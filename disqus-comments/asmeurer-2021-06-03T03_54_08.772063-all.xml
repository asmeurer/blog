<?xml version="1.0" encoding="utf-8"?>
<disqus xmlns="http://disqus.com" xmlns:dsq="http://disqus.com/disqus-internals" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://disqus.com/api/schemas/1.0/disqus.xsd http://disqus.com/api/schemas/1.0/disqus-internals.xsd">
<category dsq:id="2876908">
<forum>asmeurer</forum>
<title>General</title>
<isDefault>true</isDefault>
</category>
<thread dsq:id="2244986334">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/about.html</link>
<title>About</title>
<message />
<createdAt>2009-04-23T03:02:35Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986338">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2009/05/16/work-started-exact-differential-equations.html</link>
<title>Work started -- Exact Differential Equations</title>
<message />
<createdAt>2009-05-16T08:47:08Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986361">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2009/05/25/patch-problems-and-updates.html</link>
<title>Patch Problems and Updates</title>
<message />
<createdAt>2009-05-25T08:29:23Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986385">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2009/05/31/first-order-differential-equations-with-homogeneous-coefficients.html</link>
<title>First Order Differential Equations with Homogeneous Coefficients</title>
<message />
<createdAt>2009-05-31T04:10:45Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986389">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2009/05/31/separable-next.html</link>
<title>Separable next</title>
<message />
<createdAt>2009-05-31T22:48:35Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986400">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2009/06/05/git-stash.html</link>
<title>git stash</title>
<message />
<createdAt>2009-06-05T07:56:29Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986407">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2009/06/22/how-to-permanently-lose-data-with-git-and-then-retrieve-it-again.html</link>
<title>How to permanently lose data with git (and then retrieve it again)</title>
<message />
<createdAt>2009-06-22T09:16:23Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986425">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2009/07/20/modifying-a-list-while-looping-through-it-in-python.html</link>
<title>Modifying a list while looping through it in Python</title>
<message />
<createdAt>2009-07-20T10:35:45Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986451">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2009/08/01/variation-of-parameters-and-more.html</link>
<title>Variation of Parameters and More</title>
<message />
<createdAt>2009-08-01T21:39:48Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986453">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2009/08/12/testing-implicit-solutions-to-odes.html</link>
<title>Testing implicit solutions to ODEs</title>
<message />
<createdAt>2009-08-13T01:27:21Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986459">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2009/08/17/undetermined-coefficients.html</link>
<title>Undetermined Coefficients</title>
<message />
<createdAt>2009-08-18T02:33:00Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986465">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2009/11/13/how-to-get-both-32-bit.html</link>
<title>How to get both 32-bit and 64-bit Python in Snow Leopard</title>
<message />
<createdAt>2009-11-13T06:16:42Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986488">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2010/04/26/gsoc-2010.html</link>
<title>GSoC 2010</title>
<message />
<createdAt>2010-04-27T02:05:39Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986491">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2010/05/26/more-information-on-my-google-summer-of-code-project-this-year.html</link>
<title>More information on my Google Summer of Code project this year</title>
<message />
<createdAt>2010-05-26T21:33:38Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986492">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2010/06/04/pudb-a-better-python-debugger.html</link>
<title>PuDB, a better Python debugger</title>
<message />
<createdAt>2010-06-05T00:59:17Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986515">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2010/06/16/strange-python-behavior-can-someone-please-explain-to-me-what-is-going-on-here.html</link>
<title>Strange Python Behavior (can someone please explain to me what is going on here?)</title>
<message />
<createdAt>2010-06-16T08:49:06Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986552">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2010/07/24/the-risch-algorithm-part-2-elementary-functions.html</link>
<title>The Risch Algorithm: Part 2, Elementary Functions</title>
<message />
<createdAt>2010-07-24T07:32:57Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986558">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2010/07/31/integration-of-primitive-functions.html</link>
<title>Integration of primitive functions</title>
<message />
<createdAt>2010-07-31T10:44:31Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986571">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2010/08/05/prototype-risch_integrate-function-ready-for-testing.html</link>
<title>Prototype risch_integrate() function ready for testing!</title>
<message />
<createdAt>2010-08-06T02:30:00Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986589">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2011/01/09/i-am-now-the-sympy-project-leader.html</link>
<title>I am now the SymPy project leader</title>
<message />
<createdAt>2011-01-09T05:29:53Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986594">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2011/03/15/true-is-true-is-false-is-true-is-false.html</link>
<title>True is True is False is True is False</title>
<message />
<createdAt>2011-03-16T02:29:15Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986604">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2011/06/05/nondeterminism.html</link>
<title>Nondeterminism</title>
<message />
<createdAt>2011-06-05T10:08:21Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986607">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2011/06/13/sympy-0-7-0-rc1-is-out.html</link>
<title>SymPy 0.7.0.rc1 is out!</title>
<message />
<createdAt>2011-06-13T05:15:03Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986613">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2011/07/17/the-scipy-2011-conference.html</link>
<title>The SciPy 2011 Conference</title>
<message />
<createdAt>2011-07-17T20:32:31Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986622">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2011/07/25/merging-integration3-with-sympy-0-7-0-nightmare.html</link>
<title>Merging integration3 with sympy-0.7.0 nightmare</title>
<message />
<createdAt>2011-07-25T13:25:13Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986626">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2011/08/08/hacking-pudb-now-an-even-better-python-debugger.html</link>
<title>Hacking PuDB: Now an even better Python debugger</title>
<message />
<createdAt>2011-08-08T07:16:10Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986640">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2011/08/18/sqrtx-now-prints-as-sqrtx.html</link>
<title>sqrt(x) now prints as "sqrt(x)"</title>
<message />
<createdAt>2011-08-18T07:11:32Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986647">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2011/12/20/vim-vs-emacs-part-1.html</link>
<title>Vim vs. Emacs (Part 1)</title>
<message />
<createdAt>2011-12-20T13:17:43Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986677">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2012/01/03/vim-vs-emacs-part-2.html</link>
<title>Vim vs. Emacs (Part 2)</title>
<message />
<createdAt>2012-01-03T12:30:37Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986702">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2012/01/13/vim-vs-emacs-part-3.html</link>
<title>Vim vs. Emacs (Part 3)</title>
<message />
<createdAt>2012-01-14T04:01:39Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986741">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2012/06/14/how-to-install-the-development-version-of-ipython-qtconsole-and-notebook-in-ubuntu.html</link>
<title>How to install the development version of IPython Qtconsole and Notebook in Ubuntu</title>
<message />
<createdAt>2012-06-14T09:49:08Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986747">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2012/07/09/emacs-7-months-later.html</link>
<title>Emacs: 7 months later</title>
<message />
<createdAt>2012-07-09T09:24:05Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986772">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2012/09/19/infinitely-nested-lists-in-python.html</link>
<title>Infinitely nested lists in Python</title>
<message />
<createdAt>2012-09-19T08:21:08Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986775">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2013/01/01/emacs-one-year-later.html</link>
<title>Emacs: One year later</title>
<message />
<createdAt>2013-01-01T14:51:21Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986789">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2013/07/02/scipy-2013.html</link>
<title>SciPy 2013</title>
<message />
<createdAt>2013-07-02T05:42:08Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986790">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2013/07/07/automating-the-sympy-release-process.html</link>
<title>Automating the SymPy release process</title>
<message />
<createdAt>2013-07-07T07:13:57Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2244986799">
<id />
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/2013/08/09/using-python-3-as-my-default-python.html</link>
<title>Using Python 3 as my default Python</title>
<message />
<createdAt>2013-08-10T01:59:55Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2243371578">
<id>cache/posts/test-post.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://getnikola.com/posts/test-post.html</link>
<title>Test post</title>
<message />
<createdAt>2014-02-09T19:54:01Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2249584249">
<id>cache/posts/2013/08/09/using-python-3-as-my-default-python.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/posts/2013/08/09/using-python-3-as-my-default-python.html</link>
<title>Using Python 3 as my default Python</title>
<message />
<createdAt>2014-02-11T02:21:14Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2249591447">
<id>cache/posts/2013/07/07/automating-the-sympy-release-process.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/posts/2013/07/07/automating-the-sympy-release-process.html</link>
<title>Automating the SymPy release process</title>
<message />
<createdAt>2014-02-11T02:23:25Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2249591604">
<id>cache/posts/2013/07/02/scipy-2013.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/posts/2013/07/02/scipy-2013.html</link>
<title>SciPy 2013</title>
<message />
<createdAt>2014-02-11T02:23:28Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2250026449">
<id>cache/posts/2012/09/19/infinitely-nested-lists-in-python.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/posts/2012/09/19/infinitely-nested-lists-in-python.html</link>
<title>Infinitely nested lists in Python</title>
<message />
<createdAt>2014-02-11T04:50:40Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2254491537">
<id>cache/posts/2013/01/01/emacs-one-year-later.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/posts/2013/01/01/emacs-one-year-later.html</link>
<title>Emacs: One year later</title>
<message />
<createdAt>2014-02-12T04:01:16Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2254494693">
<id>cache/posts/2009/07/20/modifying-a-list-while-looping-through-it-in-python.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/posts/2009/07/20/modifying-a-list-while-looping-through-it-in-python.html</link>
<title>Modifying a list while looping through it in Python</title>
<message />
<createdAt>2014-02-12T04:02:33Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2360137274">
<id>cache/posts/2013/08/22/python-3-single-codebase-vs-2to3.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/posts/2013/08/22/python-3-single-codebase-vs-2to3.html</link>
<title>Python 3: Single codebase vs. 2to3</title>
<message />
<createdAt>2014-03-04T20:59:53Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2425266117">
<id>cache/posts/2010/07/12/integration-of-exponential-functions.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/posts/2010/07/12/integration-of-exponential-functions.html</link>
<title>Integration of exponential functions</title>
<message />
<createdAt>2014-03-14T02:51:24Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2427106117">
<id>cache/posts/2009/04/26/git-tutorial.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/posts/2009/04/26/git-tutorial.html</link>
<title>Git Tutorial</title>
<message />
<createdAt>2014-03-14T09:06:28Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2427291968">
<id>cache/posts/2011/06/29/sympy-0-7-0-released.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/posts/2011/06/29/sympy-0-7-0-released.html</link>
<title>SymPy 0.7.0 released</title>
<message />
<createdAt>2014-03-14T09:33:25Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2429395407">
<id>cache/posts/2009/08/17/undetermined-coefficients.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/posts/2009/08/17/undetermined-coefficients.html</link>
<title>Undetermined Coefficients</title>
<message />
<createdAt>2014-03-14T13:31:17Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2429567742">
<id>cache/posts/2010/07/24/the-risch-algorithm-part-2-elementary-functions.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/posts/2010/07/24/the-risch-algorithm-part-2-elementary-functions.html</link>
<title>The Risch Algorithm: Part 2, Elementary Functions</title>
<message />
<createdAt>2014-03-14T13:50:50Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2429768368">
<id>cache/posts/2010/06/11/integration-of-rational-functions.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/posts/2010/06/11/integration-of-rational-functions.html</link>
<title>Integration of rational functions</title>
<message />
<createdAt>2014-03-14T14:15:13Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2434165757">
<id>cache/posts/2009/08/12/testing-implicit-solutions-to-odes.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/posts/2009/08/12/testing-implicit-solutions-to-odes.html</link>
<title>Testing implicit solutions to ODEs</title>
<message />
<createdAt>2014-03-15T05:41:18Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2434858562">
<id>cache/posts/2009/05/08/my-gsoc-proposal.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/posts/2009/05/08/my-gsoc-proposal.html</link>
<title>My GSoC Proposal</title>
<message />
<createdAt>2014-03-15T08:30:57Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2435009339">
<id>cache/posts/2011/04/27/accepted-gsoc-students-announced.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/posts/2011/04/27/accepted-gsoc-students-announced.html</link>
<title>Accepted GSoC Students Announced</title>
<message />
<createdAt>2014-03-15T09:11:33Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2435092265">
<id>cache/posts/2011/12/20/vim-vs-emacs-part-1.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/posts/2011/12/20/vim-vs-emacs-part-1.html</link>
<title>Vim vs. Emacs (Part 1)</title>
<message />
<createdAt>2014-03-15T09:31:06Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2435244607">
<id>cache/posts/2011/04/27/advice-for-future-prospective-gsoc-students.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/posts/2011/04/27/advice-for-future-prospective-gsoc-students.html</link>
<title>Advice for Future Prospective GSoC Students</title>
<message />
<createdAt>2014-03-15T10:10:59Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2439888466">
<id>cache/posts/2009/06/13/vacation.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/posts/2009/06/13/vacation.html</link>
<title>Vacation</title>
<message />
<createdAt>2014-03-16T03:50:45Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2554166100">
<id>cache/posts/2013/03/03/when-does-xlogy-ylogx.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurer.github.io/posts/2013/03/03/when-does-xlogy-ylogx/</link>
<title>When does x^log(y) = y^log(x)?</title>
<message />
<createdAt>2014-03-30T16:57:41Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2554470098">
<id>cache/posts/moving-to-github-pages-with-nikola.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurer.github.io/posts/moving-to-github-pages-with-nikola/</link>
<title>Moving to GitHub pages with Nikola</title>
<message />
<createdAt>2014-03-30T17:34:39Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2587379147">
<id>cache/posts/gsoc-advice-redux.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurer.github.io/posts/gsoc-advice-redux/</link>
<title>GSoC advice redux</title>
<message />
<createdAt>2014-04-05T01:51:47Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2728779828">
<id>cache/posts/2009/09/07/google-summer-of-code-2009-wrap-up.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/posts/2009/09/07/google-summer-of-code-2009-wrap-up.html</link>
<title>Google Summer of Code 2009 Wrap Up</title>
<message />
<createdAt>2014-06-01T19:00:19Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2754123783">
<id>cache/posts/2012/12/30/2012-in-review.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/posts/2012/12/30/2012-in-review.html</link>
<title>2012 in review</title>
<message />
<createdAt>2014-06-11T01:19:46Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2801105561">
<id>cache/posts/2009/04/22/first-post.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/posts/2009/04/22/first-post.html</link>
<title>First Post!</title>
<message />
<createdAt>2014-06-28T01:50:48Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2840498513">
<id>cache/posts/scipy-2014.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurer.github.io/posts/scipy-2014/</link>
<title>SciPy 2014</title>
<message />
<createdAt>2014-07-13T17:02:33Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2935177498">
<id>cache/posts/playing-with-swift-and-sprite-kit.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurer.github.io/posts/playing-with-swift-and-sprite-kit/</link>
<title>Playing with Swift and Sprite Kit</title>
<message />
<createdAt>2014-08-17T17:23:54Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="2935364301">
<id>cache/posts/playing-with-swift-and-spritekit.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurer.github.io/posts/playing-with-swift-and-spritekit/</link>
<title>Playing with Swift and SpriteKit</title>
<message />
<createdAt>2014-08-17T18:55:43Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="3064450861">
<id>cache/posts/2013/04/06/how-to-make-attributes-un-inheritable-in-python-using-descriptors.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/posts/2013/04/06/how-to-make-attributes-un-inheritable-in-python-using-descriptors.html</link>
<title>How to make attributes un-inheritable in Python using descriptors</title>
<message />
<createdAt>2014-09-29T09:05:28Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="3519815990">
<id>cache/posts/2012/07/09/emacs-7-months-later.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/posts/2012/07/09/emacs-7-months-later.html</link>
<title>Emacs: 7 months later</title>
<message />
<createdAt>2015-02-16T08:38:51Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="3727695330">
<id>cache/posts/753.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurersympy.wordpress.com/posts/753.html</link>
<title>The Risch Algorithm: Part 4, The Structure Theorems</title>
<message />
<createdAt>2015-05-01T10:34:48Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="3736427125">
<id>cache/stories/python-trickery.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurer.github.io/stories/python-trickery/</link>
<title>Python Trickery</title>
<message />
<createdAt>2015-05-04T23:21:29Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="3736430838">
<id>cache/stories/about.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurer.github.io/about/</link>
<title>About</title>
<message />
<createdAt>2015-05-04T23:23:52Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="3736487533">
<id>cache/posts/my-python-debugging-toolbox.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurer.github.io/posts/my-python-debugging-toolbox/</link>
<title>My Python Debugging Toolbox</title>
<message />
<createdAt>2015-05-04T23:57:59Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="3736510161">
<id>cache/posts/python-trickery.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurer.github.io/posts/python-trickery/</link>
<title>Python Trickery</title>
<message />
<createdAt>2015-05-05T00:11:32Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="3873489731">
<id>cache/stories/work.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurer.github.io/blog/work/</link>
<title>work</title>
<message />
<createdAt>2015-06-24T00:46:41Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="3931003634">
<id>cache/posts/dont-rebase.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurer.github.io/blog/posts/dont-rebase/</link>
<title>Don't Rebase</title>
<message />
<createdAt>2015-07-13T18:18:26Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="4185308554">
<id>cache/posts/lessons-learned-from-working-at-continuum.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurer.github.io/blog/posts/lessons-learned-from-working-at-continuum/</link>
<title>Lessons learned from working at Continuum</title>
<message />
<createdAt>2015-10-02T00:35:57Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="4418210173">
<id>cache/posts/doing-math-with-python-by-amit-saha-book-review.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>http://asmeurer.github.io/blog/posts/doing-math-with-python-by-amit-saha-book-review/</link>
<title>*Doing Math with Python* by Amit Saha book review</title>
<message />
<createdAt>2015-12-19T21:53:56Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="4523624031">
<id>cache/posts/what-happens-when-you-mess-with-hashing-in-python.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>https://asmeurer.github.io/blog/posts/what-happens-when-you-mess-with-hashing-in-python/</link>
<title>What happens when you mess with hashing in Python</title>
<message />
<createdAt>2016-01-26T04:14:08Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="4777005575">
<id>cache/posts/moving-away-from-python-2.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>https://asmeurer.github.io/blog/posts/moving-away-from-python-2/</link>
<title>Moving Away from Python 2</title>
<message />
<createdAt>2016-04-26T02:42:13Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="5163193865">
<id>cache/posts/tuples.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>https://asmeurer.github.io/blog/posts/tuples/</link>
<title>Tuples</title>
<message />
<createdAt>2016-09-22T02:34:58Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="5200134029">
<id>cache/posts/github-reviews-gripes.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>https://asmeurer.github.io/blog/posts/github-reviews-gripes/</link>
<title>GitHub Reviews Gripes</title>
<message />
<createdAt>2016-10-06T00:26:15Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="5570815892">
<id>cache/posts/mypython-writing-my-own-python-repl.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>https://asmeurer.github.io/blog/posts/mypython-writing-my-own-python-repl/</link>
<title>Mypython: Writing My Own Python REPL</title>
<message />
<createdAt>2017-02-21T07:48:32Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="5924739795">
<id>cache/posts/automatically-deploying-this-blog-to-github-pages-with-travis-ci.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>https://asmeurer.github.io/blog/posts/automatically-deploying-this-blog-to-github-pages-with-travis-ci/</link>
<title>Automatically deploying this blog to GitHub Pages with Travis CI</title>
<message />
<createdAt>2017-06-19T20:03:18Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="7025150036">
<id>cache/posts/1000-github-cuts.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>https://asmeurer.github.io/blog/posts/1000-github-cuts/</link>
<title>1000 GitHub Cuts</title>
<message />
<createdAt>2018-11-07T02:14:15Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="7032338500">
<id>cache/posts/github-cuts.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>https://asmeurer.com/blog/posts/github-cuts/</link>
<title>GitHub Cuts</title>
<message />
<createdAt>2018-11-09T20:13:21Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="7299622457">
<id>cache/posts/reflecting-on-10-years-of-open-source.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>https://asmeurer.com/blog/posts/reflecting-on-10-years-of-open-source/</link>
<title>Reflecting on 10 Years of Open Source</title>
<message />
<createdAt>2019-03-17T02:57:23Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="7367498143">
<id>cache/posts/whats-new-in-sympy-14.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>https://asmeurer.com/blog/posts/whats-new-in-sympy-14/</link>
<title>What's New in SymPy 1.4</title>
<message />
<createdAt>2019-04-19T17:50:20Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="7639210543">
<id>cache/posts/quansight-labs-work-update-for-september-2019.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>https://asmeurer.com/blog/posts/quansight-labs-work-update-for-september-2019/</link>
<title>Quansight Labs Work Update for September, 2019</title>
<message />
<createdAt>2019-09-17T21:35:18Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<thread dsq:id="7944374531">
<id>cache/posts/verifying-the-riemann-hypothesis-with-sympy-and-mpmath.html</id>
<forum>asmeurer</forum>
<category dsq:id="2876908" />
<link>https://asmeurer.com/blog/posts/verifying-the-riemann-hypothesis-with-sympy-and-mpmath/</link>
<title>Verifying the Riemann Hypothesis with SymPy and mpmath</title>
<message />
<createdAt>2020-03-31T21:14:20Z</createdAt>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<isClosed>false</isClosed>
<isDeleted>false</isDeleted>
</thread>
<post dsq:id="1237682952">
<id>wp_id=4</id>
<message><![CDATA[<p>You don't need to clone the whole repository if you have already cloned sympy. Something along the following lines should also work (and use much less bandwidth):</p><p>$ git remote add aaron <a href="git://github.com/asmeurer/sympy.git" rel="nofollow noopener" title="git://github.com/asmeurer/sympy.git">git://github.com/asmeurer/s...</a><br>$ git fetch aaron<br>$ git checkout -b odes aaron/odes</p><p>And you got a local branch to play with.</p>]]></message>
<createdAt>2009-05-18T00:45:09Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>vks</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986338" />
</post>
<post dsq:id="1237733529">
<id>wp_id=5</id>
<message><![CDATA[<p>Yeah.  I am kind of new to git, so I would take my git advise with a grain of salt.  On the other hand, the math has a higher probability of being correct since I am a math major and math is my passion.  And if I post Python code, that should also be correct, since that sort of thing is at least verifiable.</p><p>Another thing I should note is that if you pull my branch and then want to play with it later, you should do a 'git pull' again before you mess with it.  I am always adding patches, so you would want to do that to remove all the bugs/get all the latest features.</p><p>Thanks for pointing out errors in blog.  If you find any bugs or inaccuracies in my code, let me know too (though hopefully none of it should make it through the review stage before it gets into the actual SymPy repository).</p>]]></message>
<createdAt>2009-05-18T04:58:10Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986338" />
<parent dsq:id="1237682952" />
</post>
<post dsq:id="1237682958">
<id>wp_id=6</id>
<message><![CDATA[<p>I'm not a git guru, but I know there are a lot of those at #git on freenode. You should ask there, I'm sure someone can help :)</p>]]></message>
<createdAt>2009-05-25T17:45:51Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Runa</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986361" />
</post>
<post dsq:id="1237682964">
<id>wp_id=9</id>
<message><![CDATA[<p>Did you try cse() + factor()?</p>]]></message>
<createdAt>2009-06-01T19:20:47Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>vks</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986389" />
</post>
<post dsq:id="1237733536">
<id>wp_id=10</id>
<message><![CDATA[<p>I know that factor can reduce the polynomial.  I was just saying that I need to use it.</p><p>&lt;del datetime="2009-06-01T18:39:45+00:00"&gt;cse() doesn't seem to do anything.  Any expression I put in cse(expr) just returns [[],[expr,]].&lt;/del&gt;</p><p>I figured out what cse does from the examples, but I don't see how that will help me separate expressions.  It looks like it turns things like <code>(x+y)**2+sqrt(x+y)</code> into <code>([(x0, x + y)], [x0**(1/2) + x0**2])</code>.  It doesn't even seem to work for <code>exp(x+y)</code>, although <code>([(x0, x + y)], [exp(x0)])</code> is not what I want.</p>]]></message>
<createdAt>2009-06-01T20:23:31Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986389" />
<parent dsq:id="1237682964" />
</post>
<post dsq:id="1237682967">
<id>wp_id=11</id>
<message><![CDATA[<p>If you have big WIPs, another (common) git practice is to commit often, commit small commits. Then at merge time or more often, you use 'rebase -i' to reorder and squash together commits into commits/patches ready for submitting.</p>]]></message>
<createdAt>2009-06-05T15:44:58Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>ulrik</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986400" />
</post>
<post dsq:id="1237774146">
<id>wp_id=12</id>
<message><![CDATA[<p>&gt;&gt;&gt; e = sin(x)<br>&gt;&gt;&gt; factor(e**2 + e)<br>Traceback (most recent call last):<br>  File "", line 1, in <br>  File "sympy/polys/<a href="http://factortools.py" rel="nofollow noopener" title="factortools.py">factortools.py</a>", line 80, in factor<br>    coeff, factors = poly_factors(f, *symbols, **flags)<br>  File "sympy/polys/<a href="http://factortools.py" rel="nofollow noopener" title="factortools.py">factortools.py</a>", line 20, in poly_factors<br>    f = Poly(f, *symbols)<br>  File "sympy/polys/<a href="http://polynomial.py" rel="nofollow noopener" title="polynomial.py">polynomial.py</a>", line 402, in __new__<br>    terms = Poly._decompose(poly, *symbols)<br>  File "sympy/polys/<a href="http://polynomial.py" rel="nofollow noopener" title="polynomial.py">polynomial.py</a>", line 545, in _decompose<br>    raise PolynomialError("Can't decompose %s" % factor)<br>sympy.polys.polynomial.PolynomialError: Can't decompose sin(x)**2<br>&gt;&gt;&gt; cse(e**2 + e)<br>([(x0, sin(x))], [x0 + x0**2])</p><p>Then you can substitute back:</p><p>&gt;&gt;&gt; w, g = cse(e**2 + e)<br>&gt;&gt;&gt; g = factor(g[0])<br>&gt;&gt;&gt; g<br>x0*(1 + x0)<br>&gt;&gt;&gt; g.subs(w[0][0], w[0][1]) # you'd have to iterate<br>(1 + sin(x))*sin(x)</p><p>&gt; It doesn’t even seem to work for exp(x+y)</p><p>It should only replace x+y if it occurs multiple times:</p><p>&gt;&gt;&gt; cse(exp(x+y))<br>([], [exp(x + y)]) # correct<br>&gt;&gt;&gt; cse(exp(x+y)+x+y)<br>([], [x + y + exp(x + y)]) # wrong<br>&gt;&gt;&gt; cse(exp(x+y)+x+y+sin(x+y))<br>([(x0, x + y)], [x0 + sin(x0) + exp(x0)]) # correct</p><p>I filed a bug report for the second case.</p>]]></message>
<createdAt>2009-06-06T15:02:19Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>vks</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986389" />
<parent dsq:id="1237733536" />
</post>
<post dsq:id="1237682966">
<id>wp_id=13</id>
<message><![CDATA[<p>OK.  I see what you mean now.  cse() turns it into a polynomial which can then be handled by factor().  It seems to choke if it has too many transcendentals:<br>&gt;&gt;&gt; e = expand(x*sin(x)*(y**2+sin(y)))<br>&gt;&gt;&gt; e<br>x*y**2*sin(x) + x*sin(x)*sin(y)<br>&gt;&gt;&gt; cse(e)<br>([(x0, sin(x))], [x*x0*sin(y) + x*x0*y**2])<br>&gt;&gt;&gt; factor(cse(e)[1][0])<br>Traceback (most recent call last):<br>  File "", line 1, in <br>  File "./sympy/polys/<a href="http://factortools.py" rel="nofollow noopener" title="factortools.py">factortools.py</a>", line 80, in factor<br>    coeff, factors = poly_factors(f, *symbols, **flags)<br>  File "./sympy/polys/<a href="http://factortools.py" rel="nofollow noopener" title="factortools.py">factortools.py</a>", line 20, in poly_factors<br>    f = Poly(f, *symbols)<br>  File "./sympy/polys/<a href="http://polynomial.py" rel="nofollow noopener" title="polynomial.py">polynomial.py</a>", line 402, in __new__<br>    terms = Poly._decompose(poly, *symbols)<br>  File "./sympy/polys/<a href="http://polynomial.py" rel="nofollow noopener" title="polynomial.py">polynomial.py</a>", line 545, in _decompose<br>    raise PolynomialError("Can't decompose %s" % factor)<br>PolynomialError: Can't decompose sin(y)</p><p>Compared to the simple separatevars function I wrote up:<br>&gt;&gt;&gt; separatevars(e)<br>x*(sin(y) + y**2)*sin(x)</p><p>As for expanding exponentials, I will write a function that does that (it should be simple).  Right now, I am working on fixing issue 252 so that they aren't put right back together after I take them apart.</p>]]></message>
<createdAt>2009-06-06T20:52:14Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986389" />
</post>
<post dsq:id="1237682969">
<id>wp_id=14</id>
<message><![CDATA[<p>also check out stgit.</p><p><a href="http://procode.org/stgit/" rel="nofollow noopener" title="http://procode.org/stgit/">http://procode.org/stgit/</a></p>]]></message>
<createdAt>2009-06-08T21:10:27Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Andy Terrel</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986400" />
</post>
<post dsq:id="1237682972">
<id>wp_id=20</id>
<message><![CDATA[<p>I'd say this is a very disturbing quirk in git; it's happened to many, me included, but mostly I commit so often that I don't lose anything. Still, that --abort calls reset --hard is very disturbing.</p><p>The gitters just say.. commit often, commit everything, and use rebase -i to squash it back together really nice. But I hope this quirk is being resolved in future versions.</p>]]></message>
<createdAt>2009-06-22T13:57:18Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>ulrik</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986407" />
</post>
<post dsq:id="1237682968">
<id>wp_id=21</id>
<message><![CDATA[<p>It's because you don't color your prompt with the name of the branch (and the prompt also changes to something like "master|REBASE" if you rebase). See here how it looks like:</p><p><a href="http://code.google.com/p/sympy/wiki/GitTutorials" rel="nofollow noopener" title="http://code.google.com/p/sympy/wiki/GitTutorials">http://code.google.com/p/sy...</a></p><p>so I very, very strongly suggest you use that.</p><p><a href="http://blog.ericgoodwin.com/2008/4/10/auto-completion-with-git" rel="nofollow noopener" title="http://blog.ericgoodwin.com/2008/4/10/auto-completion-with-git">http://blog.ericgoodwin.com...</a></p><p>e.g. here is my PS1 prompt:</p><p>    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\[33[31m\]$(__git_ps1 "(%s)")\[33[00m\]\$ '</p><p>if you use Mac, source the "contrib/completion/git-completion.bash" file (in the git repository for git), which contains the definition of the __git_ps1 and some documentation too (read it if you have troubles getting it work).</p><p>Once you have the colored prompt, I am pretty sure it will never happen again.</p>]]></message>
<createdAt>2009-06-22T20:08:24Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Ondrej Certik</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986407" />
</post>
<post dsq:id="1237682973">
<id>wp_id=22</id>
<message><![CDATA[<p>I think git should backup aborted local changes for 30 days, like it does with commits.</p>]]></message>
<createdAt>2009-06-23T03:34:51Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>vks</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986407" />
</post>
<post dsq:id="1237682975">
<id>wp_id=23</id>
<message><![CDATA[<p>Glad to see you got the lost data.  A very important lesson, no matter what scm you use keeping things clean is very important.  Usually I will just reclone somewhere else if I need to put in some quick changes.</p>]]></message>
<createdAt>2009-06-24T20:33:37Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>andy</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986407" />
</post>
<post dsq:id="1237682982">
<id>wp_id=49</id>
<message><![CDATA[<p>has looks in args, and x.args is [] (the same with any Atom like Integer, Symbol, pi, etc), that's why x.has(x) is False.</p>]]></message>
<createdAt>2009-07-20T11:55:43Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Fabian</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986425" />
</post>
<post dsq:id="1237682979">
<id>wp_id=50</id>
<message><![CDATA[<p>oops, I was wrong. x.has(x) returns True ...</p>]]></message>
<createdAt>2009-07-20T11:56:58Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Fabian</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986425" />
</post>
<post dsq:id="1237682983">
<id>wp_id=51</id>
<message><![CDATA[<p>Another solution would be to make a copy of the list, i.e.:</p><p>for i in a[:]:<br>   ...</p><p>And now you can safely remove, add, elements in a</p>]]></message>
<createdAt>2009-07-20T12:01:24Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Fabian</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986425" />
</post>
<post dsq:id="1237682981">
<id>wp_id=54</id>
<message><![CDATA[<p>You should use filter for this.</p><p>a = filter(lambda i: i.has(x), a)</p><p>And Java has the  "for i in obj" as long as the obj implements the Iterable interface. Lots of languages have this, even Bash.</p>]]></message>
<createdAt>2009-07-22T04:39:22Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Andy Terrel</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986425" />
</post>
<post dsq:id="1237682985">
<id>wp_id=55</id>
<message><![CDATA[<p>Thanks for the filter tip.  I also didn't know that list[:] created a copy.  And, I guess  I was wrong about the for i in list syntax.   It looks like several languages support it (<a href="http://en.wikipedia.org/wiki/Foreach)" rel="nofollow noopener" title="http://en.wikipedia.org/wiki/Foreach)">http://en.wikipedia.org/wik...</a>.  Just not C, which other than Python, is the import one for me because that is what my programs for classes have to be in.</p><p>Of course, none of this answers my question, which is why exactly does it do this?  Is my theory right or is it some other thing?</p>]]></message>
<createdAt>2009-07-22T05:27:39Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Aaron Meurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986425" />
<parent dsq:id="1237682981" />
</post>
<post dsq:id="1237733538">
<id>wp_id=56</id>
<message><![CDATA[<p>More or less why doesn't matter because it will change in any implementation.  You can postulate about CPython but JPython and IronPython are in languages with the for each syntax.</p><p>Essentially the iteration though the sequence is not defined if the sequence is manipulated.  This is true in most languages.</p><p>Also a python list is not just a c array.  Python lists support resizing, insertion, and deletion; c arrays do not.</p>]]></message>
<createdAt>2009-07-23T00:52:50Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Andy Terrel</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986425" />
<parent dsq:id="1237682985" />
</post>
<post dsq:id="1237733539">
<id>wp_id=57</id>
<message><![CDATA[<p>It looks like you are basically correct about the array inside the list object being blown away and rebuilt. See Objects/listobject.c::listremove</p>]]></message>
<createdAt>2009-07-23T01:09:57Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Andy Terrel</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986425" />
<parent dsq:id="1237682985" />
</post>
<post dsq:id="1237682987">
<id>wp_id=58</id>
<message><![CDATA[<p>I downloaded the source and had a look.  It looks like a list is not an "array" per se, but a struct that contains a "Vector of pointers to list elements", which are realloced when the list size changes (with some optimizations, but that is the basic idea).</p><p>I couldn't find the relevant code on for loops, but I think it checks the size of a each time.  For example, "&gt;&gt;&gt; a = [1]; for i in a: a.append(i)" hangs forever, and when you Control-C, a is a huge list of 1's.</p><p>By the way, I get the same thing in jython (WordPress will probably kill this. It is the same as the last example above):<br>Jython 2.5.0 (Release_2_5_0:6476, Jun 16 2009, 13:33:26) <br>[Java HotSpot(TM) 64-Bit Server VM (Apple Inc.)] on java1.6.0_13<br>Type "help", "copyright", "credits" or "license" for more information.<br>&gt;&gt;&gt; a = [1, 2, 3, 4, 5]<br>&gt;&gt;&gt; for i in a:        <br>...     a.remove(i)    <br>... <br>&gt;&gt;&gt; a<br>[2, 4]</p>]]></message>
<createdAt>2009-07-23T06:48:05Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Aaron Meurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986425" />
</post>
<post dsq:id="1237682986">
<id>wp_id=59</id>
<message><![CDATA[<p>Apparently it is more than just "good style" to not modify a list while iterating over it.<br>But for your particular use case I always go backwards (!) and use the index (see below).<br>That just solves the problem because the Remove() (or del a[i]) "invalidates" only indices AFTER the one removed - which have already been dealt with if you go backwards. So like this:<br>for i in range(len(a)-1,-1,-1):<br>    if .... a[i]....:<br>         del a[i]</p>]]></message>
<createdAt>2009-07-27T23:37:01Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Sebastian Haase</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986425" />
</post>
<post dsq:id="1237682988">
<id>wp_id=60</id>
<message><![CDATA[<p>The recommended way (I think) of doing this is to avoid filter and use a list comprehension instead:</p><p>a = [i for i in a if not i.has(x)]</p>]]></message>
<createdAt>2009-07-29T22:54:46Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Ronan Lamy</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986425" />
<parent dsq:id="1237682981" />
</post>
<post dsq:id="1237733541">
<id>wp_id=61</id>
<message><![CDATA[<p>I agree.  I changed it to that.  A list comprehension is much clearer and it avoids the use of the easily obfuscatory lambda keyword.</p><p>By the way, it needs to be a = [i for i in a if i.has(x)].</p>]]></message>
<createdAt>2009-07-29T23:06:25Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Aaron Meurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986425" />
<parent dsq:id="1237682988" />
</post>
<post dsq:id="1237682989">
<id>wp_id=62</id>
<message><![CDATA[<p>The "for...in" syntax is known as the "iterator" pattern, and just FYI, lots of languages support this construct - including JavaScript, Java, Ruby, Visual Basic, C# - and those that do not can still accomplish the same thing it's just manual, such as C and C++.</p><p>As far as your loop "bug" goes, this is exactly why most languages raise an exception when modifying a list while iterating over it. I had no idea what Python would do in that situation, I personally would prefer an exception.</p><p>It's an example of an imperative programming bug. You are modifying the list that you are iterating over, so the result depends on implementation of the language.</p><p>Nice post! It surprised me that Python even allows this.</p>]]></message>
<createdAt>2009-08-02T04:10:01Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Jeremy</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986425" />
</post>
<post dsq:id="1237683000">
<id>wp_id=63</id>
<message><![CDATA[<p>you might want to ping mateusz to review the patch, as he is working in the poly module</p>]]></message>
<createdAt>2009-08-06T04:29:18Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Fabian</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986451" />
</post>
<post dsq:id="1237683001">
<id>wp_id=65</id>
<message><![CDATA[<p>So the saga continues! Might I suggest that for the higher order derivatives you do the following (e.g. for a second order equation):</p><p>- let s be the solution of the ode in df/dx and d2f/dx2<br>- solve s.diff(x) for sdfdx and s.diff(x,2) for sd2fdx2 (which may have f, df/dx, and (df/dx)^2 values in it.<br>- subs the d2f/dx2 in the ode with what you found, then subst the df/dx in that expression with the df/dx value that you found: (ode.subs(df/dx,sdfdx)).subs(d2f/dx2,sd2fdx)<br>- show that that substituted expression equals zero.</p><p>Best regards,<br> Chris</p>]]></message>
<createdAt>2009-08-13T09:22:33Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Chris Smith</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986453" />
</post>
<post dsq:id="1237683002">
<id>wp_id=66</id>
<message><![CDATA[<p>Interesting.  If this works (and it seems like it may, though I haven't played around with it), then my checksol could become general enough to move out of the test file and into the main namespace!  It seems like you could easily generalize your idea into nth order solutions.  Just take each of nth derivatives, solve for each one, and substitute into the ode in reverse order.</p><p>It's at the bottom of my list of things to do by the GSoC deadline though, so unless I find myself ahead of schedule, I expect it may have to come as a later patch.</p><p>Right now, there are no higher order solution methods implemented that return implicit solutions, except for the occasional Liouville ODE (2nd order).  Even so, it could be nice to have a general check_ode_sol (better name?) function for the module.</p>]]></message>
<createdAt>2009-08-13T09:47:02Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986453" />
<parent dsq:id="1237683001" />
</post>
<post dsq:id="1237683007">
<id>wp_id=75</id>
<message><![CDATA[<p>I think what you meant was log(sys.maxsize, 2) so that it returns the base 2 logarithm of sys.maxsize. Or you could also use log(sys.maxsize)/log(2)</p>]]></message>
<createdAt>2009-11-15T18:27:01Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>shanipribadi</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986465" />
</post>
<post dsq:id="1237733546">
<id>wp_id=76</id>
<message><![CDATA[<p>Yes.  I did.  I have edited the post to fix this.</p>]]></message>
<createdAt>2009-11-15T21:43:27Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986465" />
<parent dsq:id="1237683007" />
</post>
<post dsq:id="1237683003">
<id>wp_id=86</id>
<message><![CDATA[<p>It is very interesting your Blogg. Thanks for notifying me!</p>]]></message>
<createdAt>2010-04-24T19:08:02Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Lloyd Ceballos</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986459" />
</post>
<post dsq:id="1237683009">
<id>wp_id=90</id>
<message><![CDATA[<p>This is a little better way to determine your version:</p><p>NullVoid ~: python<br>Python 2.6.5 (r265:79359, Mar 24 2010, 01:32:55) <br>[GCC 4.0.1 (Apple Inc. build 5493)] on darwin<br>Type "help", "copyright", "credits" or "license" for more information.<br>&gt;&gt;&gt; import struct<br>&gt;&gt;&gt; struct.calcsize("P") * 8<br>32<br>&gt;&gt;&gt; quit()<br>NullVoid ~: /System/Library/Frameworks/Python.framework/Versions/2.6/bin/python<br>Python 2.6.1 (r261:67515, Feb 11 2010, 00:51:29) <br>[GCC 4.2.1 (Apple Inc. build 5646)] on darwin<br>Type "help", "copyright", "credits" or "license" for more information.<br>&gt;&gt;&gt; import struct<br>&gt;&gt;&gt; struct.calcsize("P") * 8<br>64<br>&gt;&gt;&gt;</p>]]></message>
<createdAt>2010-05-14T08:47:47Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Fred Palmer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986465" />
</post>
<post dsq:id="1237683006">
<id>wp_id=91</id>
<message><![CDATA[<p>How is it better?  It doesn't seem simpler to me, especially not simper than the 2**40 trick.  It does explain why strings hash differently, though.  sys.maxsize seems to me to be the most future-proof of the lot.  If I wanted to check this in a script, I would definitely use that one.</p><p>Also, I noticed that Python 2.7 will be offered in both 32- and 64-bit Mac OS X installers.  I don't know if it will be possible to install both System installs at the same time, though.</p>]]></message>
<createdAt>2010-05-15T21:12:34Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Aaron Meurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986465" />
</post>
<post dsq:id="1237683012">
<id>wp_id=92</id>
<message><![CDATA[<p>Hi, Aaron!</p><p>Your proposal looks pretty nice. That's the thing I really want to be improved in sympy.</p><p>Good luck with your work and keep all the world up to date in your blog!</p>]]></message>
<createdAt>2010-05-16T18:03:21Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>michwill</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986488" />
</post>
<post dsq:id="1237683015">
<id>wp_id=96</id>
<message><![CDATA[<p>Thanks for documenting the polys branch, that is absolutely awesome. We wanted to do it with Mateusz, but didn't find time to do so here in Reno.</p><p>Thanks also for the posts about the Risch algorithm, I want to learn it myself eventually. :)</p>]]></message>
<createdAt>2010-05-27T05:31:16Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Ondrej Certik</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986491" />
</post>
<post dsq:id="1237683016">
<id>wp_id=101</id>
<message><![CDATA[<p>Hi Aaron,</p><p>Thanks for the tip about pudb.  It looks nice, but I can't figure out the most basic thing, how do I get back to the source view after I have navigated to another view?</p><p>Sorry to ask you about this, but I can't find it in the docs and there doesn't seem to be a mailing list.</p><p>Thanks,<br>Ted</p>]]></message>
<createdAt>2010-06-06T21:14:00Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Ted Horst</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986492" />
</post>
<post dsq:id="1237733545">
<id>wp_id=102</id>
<message><![CDATA[<p>Hi Ted.</p><p>It tells you, at least for IPython.  Just press Control-D! :)</p><p>Aaron Meurer</p><p>EDIT:<br>Or are you talking about navigating the stack and variables?  Just use the arrow keys (press ? to see more).</p>]]></message>
<createdAt>2010-06-06T23:58:44Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986492" />
<parent dsq:id="1237683016" />
</post>
<post dsq:id="1237774148">
<id>wp_id=103</id>
<message><![CDATA[<p>Arrow keys it is.  Still don't see that in the help, but seems obvious now as I was already using up/down arrows.</p><p>Thanks!</p>]]></message>
<createdAt>2010-06-07T00:36:39Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Ted Horst</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986492" />
<parent dsq:id="1237733545" />
</post>
<post dsq:id="1237777909">
<id>wp_id=104</id>
<message><![CDATA[<p>Ah, I guess it isn't.  I think there isn't a mailing list because it is just the one developer who made it.  The source isn't too hard to modify (<code>git clone http://git.tiker.net/trees/pudb.git</code>), so you could probably go in and add a shortcut to go back to the source view.</p>]]></message>
<createdAt>2010-06-07T01:38:13Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986492" />
<parent dsq:id="1237774148" />
</post>
<post dsq:id="1237683027">
<id>wp_id=116</id>
<message><![CDATA[<p>The lambda always refers to the value of A in the global (module) scope.</p><p>A list comprehension iteration variable used to influence the current (here: module) scope, i.e. [.. for a in ..] would introduce/override variable A. Later on this was fixed,</p><p>But with generator expressions, iteration variables are in a separate scope. Now using dots to ensure the indentation shows up correctly, think of:</p><p>.. x = (l(0) + l(1) for a in H)</p><p>as:</p><p>.. def _generator(_H):<br>.... for a in _H:<br>...... yield a<br>.. x = _generator(H)</p><p>and you see the iteration variable A is local to the (hidden) function, and does not influence the global variable.</p><p>It seems in Python 3, list comprehensions are implemented similar to generator expressions (so without leaking) except they collect all values in a list instead of yielding them.</p>]]></message>
<createdAt>2010-06-16T12:08:12Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>willem</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986515" />
</post>
<post dsq:id="1237683031">
<id>wp_id=117</id>
<message><![CDATA[<p>Thank you for sharing!  I found your discussion to be very interesting.  I'm glad that Python 3.1 treats the list comprehension and the "list from generator" in a similar way, with respect to dummy variables.</p>]]></message>
<createdAt>2010-06-16T13:43:22Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>EOL</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986515" />
</post>
<post dsq:id="1237683024">
<id>wp_id=118</id>
<message><![CDATA[<p>"I defined the lambda function l in terms of a without defining first defining a"</p><p>Did you mean to do that, or were you just surprised that it behaved differently in different contexts?  I think its considered bad form to define lambdas that operate on global variables especially if they haven't been defined yet.</p><p>Ted</p>]]></message>
<createdAt>2010-06-16T17:45:28Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Ted Horst</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986515" />
</post>
<post dsq:id="1237683025">
<id>wp_id=119</id>
<message><![CDATA[<p>Couldn't you make it "future proof" by adding a parameter to the lambda function?</p><p>In [2]: H = [(1, 2), (3, 4)]</p><p>In [5]: l = lambda a, i: a[i]</p><p>In [6]: [l(a, 0) + l(a, 1) for a in H]<br>Out[6]: [3, 7]</p><p>In [7]: list((l(a, 0) + l(a, 1) for a in H))<br>Out[7]: [3, 7]</p>]]></message>
<createdAt>2010-06-16T18:43:44Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Stepan</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986515" />
</post>
<post dsq:id="1237733550">
<id>wp_id=120</id>
<message><![CDATA[<p>No, it was a complete accident.  I only realized what I had done after the error had popped up and I had looked at it for a bit.</p>]]></message>
<createdAt>2010-06-16T21:12:23Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986515" />
<parent dsq:id="1237683024" />
</post>
<post dsq:id="1237733551">
<id>wp_id=121</id>
<message><![CDATA[<p>No.  The problem is that RootSum takes a function of 1 argument (see the link to the actual problem code in the blog post).</p><p>Actually, I just figured out that the way to future proof it is to redue it from a two-liner to a one-liner.  So, for example, this works:</p><p>[code language="py"]<br>&gt;&gt;&gt; list(((lambda i: a[i])(0) + (lambda i:a[i])(1) for a in H))<br>[3, 7]<br>[/code]</p><p>I had pulled out the lambda function because it made the code a little easier to read, but I guess future compatibility and the ability to use a generator comprehension instead of a list comprehension outweigh that in this case.</p><p>I will update the blog post pretty soon with this.</p>]]></message>
<createdAt>2010-06-16T21:20:46Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986515" />
<parent dsq:id="1237683025" />
</post>
<post dsq:id="1237733553">
<id>wp_id=122</id>
<message><![CDATA[<p>Ah, of course, that's the reason.  If Python lets you define a function as</p><p>[code language="py"]<br>def f(x):<br>    return a*x<br>[/code]</p><p>and just use the <code>a</code> from the outer scope, then <code>lambda i: a*i</code> should work too.  I guess I need to learn a bit more about how Python treats scoping.</p>]]></message>
<createdAt>2010-06-16T21:44:23Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986515" />
<parent dsq:id="1237683027" />
</post>
<post dsq:id="1237774150">
<id>wp_id=123</id>
<message><![CDATA[<p>Oh, now I see what you meant. I think you could still split it in two lines, if you dont mind using lambda twice (untested):</p><p>[code language="py"]<br>def residue_reduce_derivation(H, D, x, t, z):<br>    lfunc = lambda a, i: i*derivation(a[1], D, x, t).as_basic().subs(z, i)/ \<br>         a[1].as_basic().subs(z, i)<br>    return S(sum([RootSum(a[0].as_poly(z), lambda i: lfunc(a, i)) for a in H]))<br>[/code]</p>]]></message>
<createdAt>2010-06-17T12:07:45Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Stepan</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986515" />
<parent dsq:id="1237733551" />
</post>
<post dsq:id="1237683029">
<id>wp_id=127</id>
<message><![CDATA[<p>Hey I just discovered yours and others' comments on my blog (they were just kind of hidden to me at first...). Anyway, thanks! I'll check into the whitespace errors. Keep on making these epic blog posts of yours.</p>]]></message>
<createdAt>2010-06-20T23:11:58Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Matt Curry</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986515" />
</post>
<post dsq:id="1237683035">
<id>wp_id=169</id>
<message><![CDATA[<p>Great job!!</p><p>Symbolic integration algorithms is chanlenging....<br>IIRC, a large fraction of mathematica open bugs is in "Integrate".</p><p>Definite integrate using Meijer G-functions is another story:<br>You have to deal with branch points.</p>]]></message>
<createdAt>2010-08-04T14:32:54Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>xavier</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986558" />
</post>
<post dsq:id="1237733558">
<id>wp_id=170</id>
<message><![CDATA[<p>Hi xavier.</p><p>Yes, this is why I want to release a prototype function for testing before it gets merged into the main SymPy.  I've found that perhaps more than 50% of the bugs I have found so far in my code have lead to wrong results (as opposed to raising an exception).  I'm very close to finishing the preparser code, so look out for a blog post about it either today or tomorrow.</p><p>Do you know of any good references on definite integration with the Meijer G-functions?  So far, the best I have found are some papers by Kelly Roach.</p>]]></message>
<createdAt>2010-08-04T21:47:06Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986558" />
<parent dsq:id="1237683035" />
</post>
<post dsq:id="1237683040">
<id>wp_id=178</id>
<message><![CDATA[<p>Hi,</p><p>Hum I'm not a git expert...how should I get your branch?<br>(I'm a linux user...just tell me how to get your git branch :))</p>]]></message>
<createdAt>2010-08-08T15:48:39Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>xavier</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986571" />
</post>
<post dsq:id="1237733566">
<id>wp_id=179</id>
<message><![CDATA[<p>Hi.</p><p>Don't worry, git is super easy if you are just using it to download someone's branch. So first (obviously), you need to install git.  It should be available in your Linux package manager.  Then, just cd into whatever directory you want SymPy, and run the following commands:</p><p>[code]<br>git clone <a href="git://github.com/sympy/sympy.git" rel="nofollow noopener" title="git://github.com/sympy/sympy.git">git://github.com/sympy/symp...</a><br>cd sympy<br>git remote add asmeurer <a href="git://github.com/asmeurer/sympy.git" rel="nofollow noopener" title="git://github.com/asmeurer/sympy.git">git://github.com/asmeurer/s...</a><br>git fetch asmeurer<br>git checkout -b integration3 asmeurer/integration3<br>[/code]</p><p>And you are done.  Then you can just run <code>./bin/isympy</code>, and there should be a <code>risch_integrate()</code> function there for you to work with.  If you want to update the branch (which you should do often, because I'm always pushing up fixes/improvements, just do</p><p>[code]<br>git pull<br>[/code]</p><p>and it will do it.</p><p>You can run <code>git help command_name</code> to see what each command does.  I also created a <a href="http://code.google.com/p/sympy/wiki/GettingTheBleedingEdge" rel="nofollow noopener" title="http://code.google.com/p/sympy/wiki/GettingTheBleedingEdge">page</a> on the SymPy wiki about how to do this.</p>]]></message>
<createdAt>2010-08-08T21:42:22Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986571" />
<parent dsq:id="1237683040" />
</post>
<post dsq:id="1237683041">
<id>wp_id=180</id>
<message><![CDATA[<p>Ok so far I haven't found a bug... :)</p><p>Ho maybe one : <br>In [44]: risch_integrate((1/3)*x, x)<br>Out[44]: <br>                   2<br>0.166666666666667⋅x</p><p>Why do we get a float?</p><p>I can imagine that there is no symbolic fraction in sympy...is that right?</p>]]></message>
<createdAt>2010-08-09T00:56:08Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>xavier</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986571" />
</post>
<post dsq:id="1237733567">
<id>wp_id=181</id>
<message><![CDATA[<p>This is one of the disadvantages of using Python.  Python evaluates 1/3 to 0.333333… before SymPy gets a chance to even see it.  The solution is to never do number/number, always do number*Symbol/number, or you can do</p><p>[code language="py"]<br>&gt;&gt;&gt; S(1)/3<br>1/3<br>[/code]</p><p>See <a href="http://docs.sympy.org/gotchas.html#python-numbers-vs-sympy-numbers" rel="nofollow noopener" title="http://docs.sympy.org/gotchas.html#python-numbers-vs-sympy-numbers">this page</a> for more information, and similar tips.</p><p>By the way, if you just pass it a rational function in x (no exp or log), it is just using the already existing ratint(), which works great, but it's nothing new.</p>]]></message>
<createdAt>2010-08-09T01:26:54Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986571" />
<parent dsq:id="1237683041" />
</post>
<post dsq:id="1237683043">
<id>wp_id=182</id>
<message><![CDATA[<p>Ok. It looks like it works just fine even in some corners cases<br>(Except the expected NotImplementedErrors).</p><p>I'm gonna test it with more complex inputs...</p>]]></message>
<createdAt>2010-08-10T16:05:16Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>xavier</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986571" />
</post>
<post dsq:id="1237733568">
<id>wp_id=183</id>
<message><![CDATA[<p>Great! I am currently in the process of removing those NotImplementedErrors, so don't forget to do <code>git pull</code> every once in a while.  Also, I have fixed a few bugs that I've found on my own, so that's another good reason to do it.</p>]]></message>
<createdAt>2010-08-10T20:29:14Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986571" />
<parent dsq:id="1237683043" />
</post>
<post dsq:id="1237683045">
<id>wp_id=184</id>
<message><![CDATA[<p>About differentiating between "failed" and "proven to be impossible" to integrate: I suggest in both cases you should return a custom exception, returning the unevaluated integral as an included object part of the exception, they are called something like "RischFailure" and "RischNonElementary"...</p>]]></message>
<createdAt>2010-08-10T20:53:19Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>schilly</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986571" />
</post>
<post dsq:id="1237733569">
<id>wp_id=185</id>
<message><![CDATA[<p>Well, eventually, risch_integrate() will just be an internal function, and all integration will be done through integrate().  In that case, if risch_integrate() fails, it will just pass it on to the next method, or else return an unevaluated Integral().  I think I am going to create a NonElementaryIntegral class, which would be similar to the already existing unevaluated Integral class, except that it would be smart enough to not try to evaluate the integral, and it might pretty print differently, so that you can tell it's unevaluated because it's proven to be non-elementary and not just because it failed.</p><p>The question is, what should</p><p><code>&gt;&gt;&gt; pprint(NonElementaryIntegral(exp(-x**2), x))</code></p><p>look like?</p>]]></message>
<createdAt>2010-08-11T00:10:10Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986571" />
<parent dsq:id="1237683045" />
</post>
<post dsq:id="1237683047">
<id>wp_id=193</id>
<message><![CDATA[<p>Integrating ln(x+c) doesn't work when the constant is not an integer, for instance</p><p>risch_integrate(ln(x+1/2),x)</p><p>raises</p><p>CoercionFailed: expected an integer, got 0.500000000000000</p><p>while<br>risch_integrate(ln(x+S(1)/2),x)</p><p>produces<br>TypeError: Not an iterable container</p><p>However, <br>c=Symbol('c')<br>risch_integrate(ln(x+c),x)<br>returns the correct answer.</p>]]></message>
<createdAt>2010-08-20T18:54:46Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Benhuard</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986571" />
</post>
<post dsq:id="1237733562">
<id>wp_id=194</id>
<message><![CDATA[<p>It works on my computer:</p><p>[code language="py"]<br>In [1]: risch_integrate(ln(x+S(1)/2),x)<br>Out[1]: <br>log(2 + 4⋅x)                     <br>──────────── - x + x⋅log(1/2 + x)<br>     2                           <br>[/code]<br>Which means that one of my uncommitted changes fixes it.  As for the 1/2 one, that's just a general problem that you're liable to encounter with floating point numbers, because of limitations in the Polys (which hopefully Mateusz will be fixing eventually).</p>]]></message>
<createdAt>2010-08-20T19:29:40Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986571" />
<parent dsq:id="1237683047" />
</post>
<post dsq:id="1237683036">
<id>wp_id=197</id>
<message><![CDATA[<p>Hey, awesome series on integration. It's amazing how few people know about how CAS's implement their algorithms, and you're amazing for implementing them.</p><p>Anyway, the tan(t/2) trick is well known (Weierstrass substitution) and can convert any nasty combination of trig functions into a rational function. Converting back is a pattern matching exercise.</p>]]></message>
<createdAt>2010-08-24T19:16:13Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Nimish Telang</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986552" />
</post>
<post dsq:id="1237733555">
<id>wp_id=198</id>
<message><![CDATA[<p>Hey.</p><p>I never knew that it was called Weierstrass substitution.  Actually, you just have to do <code>result.subs(tan(x/2), sin(x)/(1 + cos(x)))</code> (or <code>(1 - cos(x))/sin(x)</code> if you like), and then it's just a matter of doing $latex \sin^2{(x)} + \cos^2{(x)} = 1$ simplification on the result (SymPy's <code>trigsimp()</code> is going to have to get a little smarter whenever I implement this, actually).</p>]]></message>
<createdAt>2010-08-25T01:06:20Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986552" />
<parent dsq:id="1237683036" />
</post>
<post dsq:id="1237774151">
<id>wp_id=199</id>
<message><![CDATA[<p>Fifth command should be</p><p>git checkout -b integration3 asmeurer/integration3,</p><p>not</p><p>git checkout -b asmeurer/integration3 integration3,</p><p>right?</p>]]></message>
<createdAt>2010-08-26T22:31:08Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Miha</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986571" />
<parent dsq:id="1237733566" />
</post>
<post dsq:id="1237774154">
<id>wp_id=200</id>
<message><![CDATA[<p>Oh, sorry.  You are right.  I always use the <br>[code language="bash"]<br>git checkout asmeurer/integration3<br>git checkout -b integration3<br>[/code]<br>variant, so I get that confused sometimes.  I will fix the original reply.</p>]]></message>
<createdAt>2010-08-27T00:41:16Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Aaron Meurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986571" />
<parent dsq:id="1237774151" />
</post>
<post dsq:id="1237682948">
<id>wp_id=206</id>
<message><![CDATA[<p>Hello! I want to talk to you about the implementation of the Risch algorithm in sympy. Could you send me an email? I could not find your email in the web. Thanks.</p>]]></message>
<createdAt>2010-10-09T20:51:35Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Oscar Lazo</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986334" />
</post>
<post dsq:id="1237682949">
<id>wp_id=207</id>
<message><![CDATA[<p>Hi.  I never noticed that my email isn't on my blog here.  I will fix that.</p><p>Anyway, it would be preferable if you emailed the sympy mailing list (sympy@googlegroups.com). That way, the community knows what sorts of things are going on.  You can also contact me via IRC via the #sympy in freenode.  I am asmeurer.</p>]]></message>
<createdAt>2010-10-09T22:15:45Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986334" />
</post>
<post dsq:id="1237777910">
<id>wp_id=220</id>
<message><![CDATA[<p>Many thanks, also didn't occur to be to use horiz. arrow keys.</p>]]></message>
<createdAt>2010-10-22T02:09:16Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>thomas</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986492" />
<parent dsq:id="1237774148" />
</post>
<post dsq:id="1237683039">
<id>wp_id=228</id>
<message><![CDATA[<p>It is a pity that Manuel Bronstein is dead before he managed to finish his second book on symbolic integration.</p><p>Can you do without the second book? I have read at Wolfram MathWorld that «The case of algebraic extensions is quite complicated and is therefore not completely implemented in any computer algebra system.» Is that true?</p>]]></message>
<createdAt>2010-11-28T17:33:21Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Anton Sukhinov</name>
<isAnonymous>false</isAnonymous>
<username>disqus_I4DdxavzjP</username>
</author>
<thread dsq:id="2244986571" />
</post>
<post dsq:id="1237733559">
<id>wp_id=229</id>
<message><![CDATA[<p>Well, a second Bronstein book would have been very nice, as his first is the most clear and well-written math textbook I have ever read.  For the algebraic case, I am going to have to rely on the book by Davenport and Trager's PhD thesis.</p><p>But before I even think of implementing the algebraic case, I need to do two things, first, finish the transcendental case, and second, learn some more algebra (I need to learn some more about the theory of algebraic curves to fully understand the algebraic algorithm).</p><p>And yes, as far as I know, it is true that no CAS has completely implemented the algebraic case.  You see, there are actually three cases, the transcendental case, which deals with purely transcendental functions, the algebraic case, which deals with purely algebraic functions, and the mixed case, which deals with a mix of both (like $latex \sqrt{\sin{(x)} + 1}$).  I believe it is this third case which is the hardest to implement, and is likely what not even Axiom has completely done (though I could be wrong, I haven't looked into it too deeply yet).</p>]]></message>
<createdAt>2010-11-29T02:45:57Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Aaron Meurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986571" />
<parent dsq:id="1237683039" />
</post>
<post dsq:id="1237733565">
<id>wp_id=230</id>
<message><![CDATA[<p>Can you provide references to the books that you think together are completely describing symbolic integration process?</p>]]></message>
<createdAt>2010-11-29T21:22:21Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Anton Sukhinov</name>
<isAnonymous>false</isAnonymous>
<username>disqus_I4DdxavzjP</username>
</author>
<thread dsq:id="2244986571" />
<parent dsq:id="1237733559" />
</post>
<post dsq:id="1237774149">
<id>wp_id=231</id>
<message><![CDATA[<p>Well, I haven't studied the non-transcendental parts to know what really gives a full overview yet, but here's a try:</p><p>If you just want a basic overview (not all the subalgorithms detailed like in Bronstein's book) see Bronstein's "Symbolic Integration Tutorial."  You can download it for free at <a href="http://www-sop.inria.fr/cafe/Manuel.Bronstein/publications/issac98.ps.gz" rel="nofollow noopener" title="http://www-sop.inria.fr/cafe/Manuel.Bronstein/publications/issac98.ps.gz">http://www-sop.inria.fr/caf...</a>.</p><p>Like I have said, for the transcendental part of the algorithm, all you need is Bronstein's book.</p><p>If you download the front and back matter from Bronstein's book <a href="http://www.springerlink.com/content/978-3-540-21493-9" rel="nofollow noopener" title="http://www.springerlink.com/content/978-3-540-21493-9">here</a>, you will see in the preface that he has cited [8, 9, 11, 14, 29, 73, 74, 76, 91] for the algebraic algorithm.  29 and 91 are the Davenport and Trager (respectively) that I mentioned above.  I would go with the most recently published things first, as I think that there have been some advancements in the algebraic part of the algorithm since Risch's original paper.</p><p>Beyond that, my only recommendation would be to follow the sources in Bronstein's "Tutorial" that I linked to above.  Sorry if I can't be super specific, but I really have only studied in depth the transcendental algorithm so far.  One thing I can tell you is that aside from Bronstein (and perhaps Davenport) there aren't really any books that describe the algorithm in detail (books in computer algebra may detail an outline, like Bronstein's "Tutorial").  So if you wanted to learn the whole thing in enough detail to implement it, you will have to use other literature, like journal articles and PhD theses.  If you don't care about enough detail to implement the algorithm, I think Bronstein's "Tutorial" should be sufficient to give a basic overview (assuming you have the algebraic background to understand what he is talking about).</p><p>By the way, what is your reason for wanting such a list?</p>]]></message>
<createdAt>2010-11-29T21:44:21Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Aaron Meurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986571" />
<parent dsq:id="1237733565" />
</post>
<post dsq:id="1237683052">
<id>wp_id=306</id>
<message><![CDATA[<p>Congratulations!</p>]]></message>
<createdAt>2011-01-16T04:10:34Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Jeff Pickhardt</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986589" />
</post>
<post dsq:id="1237683018">
<id>wp_id=362</id>
<message><![CDATA[<p>PuDB is quite nice and all, but I find it a bit too jarring to jump from TextMate all the way to a text mode program (and is it only for me it blinks every time you step?).</p><p>So I got a little carried away and thought I'd code a basic debugger for TextMate. I present to you PythonMate: <a href="https://github.com/boxed/PythonMate" rel="nofollow noopener" title="https://github.com/boxed/PythonMate">https://github.com/boxed/Py...</a></p><p>It has some rather sharp edges in the current state but I'll continue polishing it up as I need to use it. I would of course appreciate any help a lot! (For example, it could need stop/restart/etc functionality :P )</p>]]></message>
<createdAt>2011-02-20T04:52:52Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Anders Hovmöller</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986492" />
</post>
<post dsq:id="1237733547">
<id>wp_id=363</id>
<message><![CDATA[<p>No, it blinks for me too.  See the third annoyance above.</p><p>I don't use TextMate to edit code (I use XCode), and I am always using the terminal to test the code, so having a terminal debugger like PuDB isn't that bad for me.</p>]]></message>
<createdAt>2011-02-21T04:39:22Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Aaron Meurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986492" />
<parent dsq:id="1237683018" />
</post>
<post dsq:id="1237683053">
<id>wp_id=366</id>
<message><![CDATA[<p>Awesome. You waked me up)</p>]]></message>
<createdAt>2011-03-16T04:42:49Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>michwill</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986594" />
</post>
<post dsq:id="1237683054">
<id>wp_id=369</id>
<message><![CDATA[<p>Thanks for the interesting post. Previously I had thought of Python operators the way I think of C operators. In C, the meaning of a multi-operator expression is the composition of the individual operators (with parentheses added according to associativity and precedence). Not so with Python's 'is' and '=='...</p><p>I think this is a good language design choice. It makes n-way comparisons concise but readable.</p><p>By the way, another operator that does not associate is '='.</p>]]></message>
<createdAt>2011-04-09T10:47:55Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Clay</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986594" />
</post>
<post dsq:id="1237683057">
<id>wp_id=382</id>
<message><![CDATA[<p>Very nice implementation job!<br>The Risch algorithm is known to be tricky...</p>]]></message>
<createdAt>2011-06-06T02:16:37Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>fakbill</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986604" />
</post>
<post dsq:id="1237683060">
<id>wp_id=384</id>
<message><![CDATA[<p>Awesome, thanks for all the work that you did!</p>]]></message>
<createdAt>2011-06-13T12:34:46Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Ondrej Certik</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986607" />
</post>
<post dsq:id="1237683061">
<id>wp_id=391</id>
<message><![CDATA[<p>Thanks for writing it up. Very interesting and I am glad that you enjoyed it. I am also interested to see Eric Jones' presentation on video.</p>]]></message>
<createdAt>2011-07-19T00:08:38Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Ondrej Certik</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986613" />
</post>
<post dsq:id="1237683064">
<id>wp_id=392</id>
<message><![CDATA[<p>It sounds like it was a good conference - do you have any idea how long before the videos go up?</p>]]></message>
<createdAt>2011-07-19T10:51:34Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Simon</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986613" />
</post>
<post dsq:id="1237733570">
<id>wp_id=393</id>
<message><![CDATA[<p>Not really.  I'd say in about a week or two.  The person who filmed it has to edit it all together.</p>]]></message>
<createdAt>2011-07-19T21:54:16Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986613" />
<parent dsq:id="1237683064" />
</post>
<post dsq:id="1237683065">
<id>wp_id=394</id>
<message><![CDATA[<p>Very interesting. Yes, just prepare a pull request for the whole thing, we will thoroughly tested, just like with the polys, and then just merge it in, and be done with it.</p>]]></message>
<createdAt>2011-07-26T01:24:09Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Ondrej Certik</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986622" />
</post>
<post dsq:id="1237683070">
<id>wp_id=395</id>
<message><![CDATA[<p>I decided that this was pretty important to discuss, so I <a href="http://groups.google.com/group/sympy/browse_thread/thread/05395e1a251e5092#" rel="nofollow noopener" title="http://groups.google.com/group/sympy/browse_thread/thread/05395e1a251e5092#">wrote to the mailing list</a> about it.</p>]]></message>
<createdAt>2011-07-26T03:00:30Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986622" />
<parent dsq:id="1237683065" />
</post>
<post dsq:id="1237683069">
<id>wp_id=396</id>
<message><![CDATA[<p>Yes, I agree completely with you, small branches are just much better to work with. Anecdotally, I feel that ~20 commits is sort of an upper limit - anything more and it's too hard/long to review and to keep rebasing. For example, I think if I had waited to submit all my work at once it would've taken weeks to get in. Of course, my project is a bit specific in that everything I do is self-contained but it's always possible to split up your work somehow.</p>]]></message>
<createdAt>2011-07-26T14:22:24Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>VPeric</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986622" />
</post>
<post dsq:id="1237683075">
<id>wp_id=400</id>
<message><![CDATA[<p>Well then, that's one thing where using Python 3 would be an actual help!</p>]]></message>
<createdAt>2011-08-18T17:58:02Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>VP</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986640" />
</post>
<post dsq:id="1237733571">
<id>wp_id=401</id>
<message><![CDATA[<p>I don't follow you.  The only place where Python 3 would make a difference is that you don't have to "from __future__ import division" to get the slightly less bad output from pasting.</p>]]></message>
<createdAt>2011-08-18T23:03:24Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Aaron Meurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986640" />
<parent dsq:id="1237683075" />
</post>
<post dsq:id="1237774153">
<id>wp_id=402</id>
<message><![CDATA[<p>Well, you don't really need to do anything listed under "Future work" if true division is the default.</p>]]></message>
<createdAt>2011-08-19T12:41:57Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>VP</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986640" />
<parent dsq:id="1237733571" />
</post>
<post dsq:id="1237774157">
<id>wp_id=403</id>
<message><![CDATA[<p>Yes you do.  1/2 will evaluate to 0.5, but you want it to evaluate to Rational(1, 2).</p>]]></message>
<createdAt>2011-08-20T01:12:06Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986640" />
<parent dsq:id="1237774153" />
</post>
<post dsq:id="1237683082">
<id>wp_id=422</id>
<message><![CDATA[<p>The first thing you might consider, both for Vim and for Emacs, is keyboard key reassignment. For Emacs you will want to swap the control and caps lock keys, and for Vim you will want to swap the escape and caps lock keys. This will dramatically change how it feels to use these two editors. Being able to hit the escape key with the pinky of your your left hand without moving away from the home row in Vim allows you to touch type this key like any other. It is used so often in Vim that this is really a requirement for efficient editing. Doing so will virtually eliminate the issue you have with escaping to command mode to move around and delete words. By the way, when you want to delete a misspelled word, try the command daw (delete around word), diw (delete inner word). The first will delete the word and the white space around it. The second will leave the white space intact. Better still, use caw and ciw, for change around word and change inner word, which does the same thing, but leaves you in insert mode to type a word's replacement.</p><p>Secondly, memorizing all of these commands is daunting. There is one thing to know and one thing to do to overcome this problem. The thing to know is that Vim's commands are a mini-language of nouns, verbs and modifiers. Movement commands such as w, W, b, B, e, E and bigger ones like (, ), {, and } are nouns corresponding to text objects. Action commands like y, yy, Y, d, dd, D, c, cc, and C are verbs that act on nouns, and numbers are the modifiers that multiply either nouns or verbs any number of times. The way these commands are used is generally [modifier] verb [modifier] noun, without spaces, the modifiers being optional.</p><p>The thing to do is to make your own cheat sheet. Don't rely on someone else's. Inevitably the cheat sheet will be too large to be useful. Make your own and only put on it what you need to remember right now.</p><p>Often overlooked by new users: the Vim user manual. The documentation is split into two parts: a reference manual, which is encyclopedic, and a user guide, which is based on a published book and is a very good extended tutorial. To get to it, type :help usr_toc. Then use what you learned in the vimtutor to navigate it. It reads like a book and explains things in human terms.</p><p>I hesitate to go into more detail to answer some of your questions, because I feel you need to get some of the basics down beforehand. But there are Vim plug-ins that will give you what you want. The ctags plug-in will help a lot with finding function definitions, and there are additional plug-ins for working with Python.</p><p>Go to <a href="http://vim.org" rel="nofollow noopener" title="vim.org">vim.org</a> and explore. There is a wealth of information there, especially in the tips section. Also, two excellent color schemes are Zenburn and Darkburn. You can find both at that site. Drop them into ~/.vim/colors and place "colorscheme zenburn" (or darkburn) into your startup file to use them.</p><p>Two weeks is pushing it for a Vim trial, or even for an Emacs trial. You will find that Emacs is very easy to get started with, but will become harder to bend to your will later unless you are willing to learn its language. Vim is harder to start with initially, but becomes much easier after about a month, and its extension language and plug-in system are easier to use.</p><p>More information is available on-line, too. You can find a good medium length tutorial at <a href="http://www.swaroopch.com/notes/Vim/" rel="nofollow noopener" title="http://www.swaroopch.com/notes/Vim/">http://www.swaroopch.com/no...</a> and some good video tutorials at <a href="http://vimcasts.org/" rel="nofollow noopener" title="http://vimcasts.org/">http://vimcasts.org/</a> and at <a href="http://www.derekwyatt.org/vim/vim-tutorial-videos/" rel="nofollow noopener" title="http://www.derekwyatt.org/vim/vim-tutorial-videos/">http://www.derekwyatt.org/v...</a>.</p><p>:wq</p>]]></message>
<createdAt>2011-12-20T21:20:59Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Scott</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986647" />
</post>
<post dsq:id="1237733577">
<id>wp_id=423</id>
<message><![CDATA[<p>Thanks for the suggestion about Caps Lock.  I will use <a href="http://pqrs.org/macosx/keyremap4macbook/extra.html" rel="nofollow noopener" title="http://pqrs.org/macosx/keyremap4macbook/extra.html">http://pqrs.org/macosx/keyr...</a> to remap it.</p><p>Regarding daw, thanks for the tip.  The difference between that and dw is subtle, and I doubt I would have noticed it without your suggestion (the difference is that daw deletes the whole word regardless of where your cursor is, whereas dw deletes the rest of the word from where your cursor is).</p><p>I actually feel that I have gotten pretty good at most of the simple commands already, more than you are giving me credit for.  Remember that I've been using it cold turkey for the past several days, and I do a lot of text editing.  Please don't hesitate to answer my questions if you know the answers.  Those are things that I've already found problems with with my limited editing experience (they are not hypothetical, they are are real problems that I've encountered).</p><p>And take a look at my .vimrc and .vim/ directories that I linked to to see what I've already done as far as plugins.  I'll check out those colors you suggested, but I think today I am going to just buckle up and create my own scheme.  It's apparently very easy, and I've already found one that is pretty decent (the built-in slate), and I have in mind what I want (XCode's midnight).  By the way, do you know if it's possible to choose different colors for the text depending on if it's highlighted or not?  Right now, several things highlight text (spelling, searching, etc.), and the highlight color invariably conflicts with some text colors, making it impossible to read the text. I'd like to keep highlighting for some things (searching at least; I think underlining for spelling should be fine), but it's very difficult to pick colors that don't conflict with anything.  The same goes for highlighting in visual mode.</p><p>Regarding the cheat sheet, actually, the one I am using seems to be pretty good. If anything, it is too small, not too large, as I often have to look up the extra commands (like things proceeded with z, ], or :). I've got a pretty good memory (if I didn't, I think no command line editor would be fit for me).</p><p>Regarding the length of the trial, perhaps.  The main reason I am making it so short is that I want to become moderately efficient at whichever one I end up using before my classes start again in January, where I will not have as much free time to go cold turkey on a new style of text editing.  I may end up giving the trial for each more time after two weeks with emacs.  It depends on where things stand at that point, if one is a clear winner or not.</p>]]></message>
<createdAt>2011-12-21T17:56:31Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986647" />
<parent dsq:id="1237683082" />
</post>
<post dsq:id="1237683080">
<id>wp_id=424</id>
<message><![CDATA[<p>These two URL's will help with camelCase. The first is a Vim tips page with settings that can be used to help and the second is a Vim plug-in that does it all for you.</p><p><a href="http://vim.wikia.com/wiki/Moving_through_camel_case_words" rel="nofollow noopener" title="http://vim.wikia.com/wiki/Moving_through_camel_case_words">http://vim.wikia.com/wiki/M...</a><br><a href="http://www.vim.org/scripts/script.php?script_id=1905" rel="nofollow noopener" title="http://www.vim.org/scripts/script.php?script_id=1905">http://www.vim.org/scripts/...</a></p><p>The taglist plug-in will help you browse functions. It works with exuberant ctags, so you need that installed for it to work correctly.</p><p><a href="http://www.vim.org/scripts/script.php?script_id=273" rel="nofollow noopener" title="http://www.vim.org/scripts/script.php?script_id=273">http://www.vim.org/scripts/...</a></p><p>These are my tab and indent settings. You can look these up in the documentation, but the two that work together to keep things consistent IIRC are shiftwidth and softtabstop.</p><p>" set tab and indent options<br>set shiftwidth=4<br>set softtabstop=4<br>set smartindent<br>set autoindent</p><p>You should probably reverse the order of:<br>t_Co and<br>colorscheme</p><p>in your .vimrc to ensure that colors are applied correctly.</p><p>Some other tips you may find useful if you don't already know about them:</p><p>You can use autocomplete to help you write code. While in insert mode, start typing a variable or function name. Then press control-p, and Vim will fill in the remainder of the name. It must have already been used in your file for it to work.</p><p>Visual block mode. Press control-v in command mode. You can use movement commands to create a rectangular highlight. Then use the c command to change the text. Type a replacement string and hit the escape key. The replacement string will appear on every line covered by the highlight and replaces what was highlighted.</p><p>Insert mode is just another command. It can be given a numeric modifier. Whatever you type while in insert mode will be repeated when you escape to normal mode. For instance:<br>80i*escape will enter 80 *'s on a line.</p><p>Another useful remapping is changing Vim's leader character to , from \. Just put this into your .vimrc:</p><p>let mapleader = ","</p><p>The \ character is quite a reach on most keyboards, but the comma is easy to reach.</p><p>At some point, if you continue using Vim, you will find your .vimrc becoming very large. Mine is several hundred lines long. You might find it useful to split it between several files, one for each type of setting or by some other organizing principle. The source command will pull in content from other files. This is how I have mine arranged:</p><p>source $HOME/.vim/myconfig/options.vim<br>source $HOME/.vim/myconfig/variables.vim<br>source $HOME/.vim/myconfig/autocmds.vim<br>source $HOME/.vim/myconfig/functions.vim<br>source $HOME/.vim/myconfig/keymaps.vim<br>source $HOME/.vim/myconfig/abbreviations.vim</p><p>If you start using extensions to Vim, you may want to start with the pathogen plug-in. It makes it easy to install AND remove plug-ins. Otherwise, a plug-in's files end up scattered around your .vim folder.</p><p><a href="http://www.vim.org/scripts/script.php?script_id=2332" rel="nofollow noopener" title="http://www.vim.org/scripts/script.php?script_id=2332">http://www.vim.org/scripts/...</a></p><p>You can browse this URL for more Python stuff related to Vim:</p><p><a href="http://www.google.com/cse?cx=partner-pub-3005259998294962%3Abvyni59kjr1&amp;ie=ISO-8859-1&amp;q=pathogen&amp;sa=Search&amp;siteurl=www.vim.org%2Fscripts%2Fscript.php%3Fscript_id%3D1905#gsc.tab=0&amp;gsc.q=python" rel="nofollow noopener" title="http://www.google.com/cse?cx=partner-pub-3005259998294962%3Abvyni59kjr1&amp;ie=ISO-8859-1&amp;q=pathogen&amp;sa=Search&amp;siteurl=www.vim.org%2Fscripts%2Fscript.php%3Fscript_id%3D1905#gsc.tab=0&amp;gsc.q=python">http://www.google.com/cse?c...</a></p><p>I hope this stuff helps.</p><p>:wq</p>]]></message>
<createdAt>2011-12-21T19:47:45Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Scott</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986647" />
</post>
<post dsq:id="1237733576">
<id>wp_id=425</id>
<message><![CDATA[<p>Wow.  Thanks for all the tips.</p><p>I installed the CamelCase plugin. For some reason, it maps ,w to move between CamelCase, instead of just remapping w (I guess it just wants to be cautious, but that's useless, and we already have WORDs, so what's the point?).  But, once again, the vim language is easy enough to understand that it took me half a minute to fix it.</p><p>I added your tab stuff to my .vimrc, and it seems to have fixed the problem.</p><p>The completion is cool. I opened a SymPy file and started typing something and then CTRL-p, and it scanned *all* the SymPy files for completions.  And then when I deleted some characters from the word, it remembered that I had completed it, and started searching again.  Are there better keys to move around the completions than the arrow keys, though? I would look it up in the help, but I don't know how to search the help for a CTRL command.</p><p>I don't get the point of the mapleader tip.  From what I can tell from the docs, it changes the semantics of the map command.  But this doesn't seem to be something that I will be using all the time.  Anyway, \ isn't too hard to type on my keyboard (it's right above RETURN).  Maybe it's *really* hard to type on your keyboard?  Or am I just missing the point here?</p><p>pathogen seems a bit excessive at this point, but I'll definitely remember it if things start to get unwieldy.</p><p>Thanks for the tip about the tagslist plugin.  I've set \ to open that, as it that key is surprisingly unused, and I suspect I will be using it a lot.</p><p>And once again, I found myself modifying the plugin to make it better. I added the Tlist_Nospell option, which lets you disable spell checking in the taglist (because I have set spell in my .vimrc, but don't care about spelling in the taglist).  If you are good a vim programming, you might check that I did it right.  My change is at <a href="https://github.com/asmeurer/dotfiles/commit/dc5ac5b4f6ea922be6c050193e549bcc28cff37b" rel="nofollow noopener" title="https://github.com/asmeurer/dotfiles/commit/dc5ac5b4f6ea922be6c050193e549bcc28cff37b">https://github.com/asmeurer...</a>. And if you think it's good, I probably should submit it upstream...</p>]]></message>
<createdAt>2011-12-21T21:04:26Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986647" />
<parent dsq:id="1237683080" />
</post>
<post dsq:id="1237774160">
<id>wp_id=426</id>
<message><![CDATA[<p>I just noticed a bug in my taglist edit, which I've fixed at <a href="https://github.com/asmeurer/dotfiles/commit/41e34cd9dd331442b7a5fbf83cc1d3aceef887fc" rel="nofollow noopener" title="https://github.com/asmeurer/dotfiles/commit/41e34cd9dd331442b7a5fbf83cc1d3aceef887fc">https://github.com/asmeurer...</a>.  Apparently g: is needed to reference a global variable.</p>]]></message>
<createdAt>2011-12-21T21:23:46Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986647" />
<parent dsq:id="1237733576" />
</post>
<post dsq:id="1237683079">
<id>wp_id=427</id>
<message><![CDATA[<p>control-n and control-p cycle through the next and previous matches in the list. You can read more about it by typing :help i_ctrl-p in Vim. That help file also has information about all commands you can use in insert mode, not just about the completion system.</p><p>The leader character is used mostly by plug-ins to assign keys to commands, or by users to create custom mappings for commonly-used Vim commands. It is there mostly to prevent problems with plug-in authors and users remapping Vim built-in commands. For the same reason, user-created ex commands must start with an upper-case letter. Lower-case commands are reserved for internal Vim use. For example:</p><p>nmap b :buffers:b</p><p>This displays a list of open buffers and leaves you at a prompt for a buffer number to switch to when you type the leader character followed by b. By using  instead of an explicit \ or , in the map command, the user can change the leader character without messing up custom mappings. Type :help leader in Vim to read more about it. Key maps are distinct from macros, which are used for on-the-fly automation. Macros are created with keystroke recording and stored in registers. They can be edited by pasting them into a buffer, editing like any other text and then yanking them back to the same register. You can read more about macros by typing :help q in Vim.</p><p>I could go on and on, but that would spoil all your fun. Suffice to say that Vim can do whatever you need it to. It either already has what you want built-in or there is a plug-in that does it. Only Emacs can match it feature-for-feature. No other editors can compete with these two.</p><p>:wq</p>]]></message>
<createdAt>2011-12-22T01:34:10Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Scott</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986647" />
</post>
<post dsq:id="1237683078">
<id>wp_id=428</id>
<message><![CDATA[<p>I forgot that wordpress removes angle brackets. That nmap command should have the word leader surrounded by angle brackets just before b.</p><p>:wq</p>]]></message>
<createdAt>2011-12-22T01:37:06Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Scott</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986647" />
</post>
<post dsq:id="1237733575">
<id>wp_id=429</id>
<message><![CDATA[<p>I'm not a fan of the way completion works.  Perhaps it can be configured to be better.  I would prefer something more like the readline completion from the command line. I start typing something, and it shows the completions.  I start typing more, and it narrows it down, etc.  If there is text after what I've typed that is common to all completions, it types that automatically.</p><p>The control-p way doesn't work like this because once I type control-p, it enters the first completion, making it impossible to type more to narrow it down.</p><p>Another thing I'm not a fan of based on one of your suggestions: in visual block mode, you can't select past the last character in whatever line the cursor is in, making it impossibile to select rectangular regions of text in many cases, unless you add sufficient whitespace to the end of the last or first line (depending on what direction you select in).</p><p>Also, if I yank something from visual block mode, it's repasted *over* lines (if that makes sense). I suppose this could be useful in some cases, but I often (usually) don't want it.  Any way to disable that?</p>]]></message>
<createdAt>2011-12-24T19:45:06Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986647" />
<parent dsq:id="1237683079" />
</post>
<post dsq:id="1237774159">
<id>wp_id=430</id>
<message><![CDATA[<p>" allow moving cursor beyond the end of the line<br>set virtualedit=all</p><p>That will fix the problem with visual block mode. Visual block mode is more for replacing text already in your file rather than for yanking, but it will yank exactly what is highlighted, no less. V will start line-wise visual mode, which selects by lines, and v will start character-wise visual mode.</p><p>Or perhaps what you are looking for is behavior like in Windows, when you select text and type replacement text, what you type only appears once? In that case, what you want is select mode. You can start that by typing gh or gH and using the arrow keys, or use the mouse to start select mode and extend the highlight. It looks like visual mode, but behaves differently.</p><p>For completion your way, what you want is the SuperTab continued extension: <a href="http://www.vim.org/scripts/script.php?script_id=1643" rel="nofollow noopener" title="http://www.vim.org/scripts/script.php?script_id=1643">http://www.vim.org/scripts/...</a></p><p>From its <a href="http://vim.org" rel="nofollow noopener" title="vim.org">vim.org</a> page: "Supertab aims to provide tab completion to satisfy all your insert completion needs." This version of it is a fork/extension of the original vim extension by another author. You can also supply your own functions to customize how it does completion.</p><p>:wq</p>]]></message>
<createdAt>2011-12-24T22:31:13Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Scott</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986647" />
<parent dsq:id="1237733575" />
</post>
<post dsq:id="1237777913">
<id>wp_id=431</id>
<message><![CDATA[<p>virtualedit=block is what I wanted.  Thanks.</p><p>I don't care about over typing text. I can just press c before I start typing if I want to do that.</p><p>Supertab lets you use the tab key, which is cool (I'm not sure yet if I like it), but it doesn't change the behavior of the completion, which is what annoys me.  I want the completion to only actually text that is common to all completions, unless I specifically choose a particular completion to use.</p><p>The way it works now, I have to know ahead of time what all the completions look like, so that I can type just the right amount of text to get it.  Otherwise, by the time I C-p to the one I want, I could have just typed the name of the variable already.</p><p>Also, these seem to suffer from a lack of caching.  Every time I press tab (or C-p), it rescans the whole directory for new completions.  It should just do this once, and remember it.  The way it is now, it is too slow.</p><p>I'm not blaming you for these problems by the way (unless you are the one who wrote the code).  I'm just pointing out the deficiencies in the hopes that there are work-arounds.  I also look forward to seeing how emacs handles all of this.</p>]]></message>
<createdAt>2011-12-24T23:29:08Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986647" />
<parent dsq:id="1237774159" />
</post>
<post dsq:id="1237683081">
<id>wp_id=432</id>
<message><![CDATA[<p>I don't know the specifics of how the completion system works, but apparently, it was implemented with a focus on flexibility, trading caching and maybe other features for flexibility in implementation. Also, it is mostly just the infrastructure of the completion system that is in Vim. In other words, actual completion for various languages is left up to plug-in authors to implement, along with any caching. Caching may be available in specific completion plug-ins for specific languages. However, there is a plug-in that may mitigate some of the problem. I haven't tried it, and I don't really know if it is directly about solving this problem, but here is the URL: <a href="http://www.vim.org/scripts/script.php?script_id=2620" rel="nofollow noopener" title="http://www.vim.org/scripts/script.php?script_id=2620">http://www.vim.org/scripts/...</a></p><p>The page describing it is vague about its purpose, but the name seems to imply that it is about caching for the completion system.</p><p>I suspect that Emacs has a more robust completion system built-in. It's been around longer than Vim and it is a much more complete development environment. It is often accused of being a great operating system. If that is the case, it may work better for you. Personally, I haven't been able to get my head around its Lisp extension language and don't have the patience to tackle it.</p><p>:wq</p>]]></message>
<createdAt>2011-12-25T01:36:54Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Scott</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986647" />
</post>
<post dsq:id="1237683086">
<id>wp_id=437</id>
<message><![CDATA[<p>The FSF publishes a reference card for Emacs as a postscript file: <a href="http://static.fsf.org/nosvn/emacs-21.4-refcard-en.ps" rel="nofollow noopener" title="http://static.fsf.org/nosvn/emacs-21.4-refcard-en.ps">http://static.fsf.org/nosvn...</a></p><p>It's a little dated, considering it is for version 21. But the basics should work. Perhaps an Emacs user can point you to a more up-to-date version.</p><p>:wq</p>]]></message>
<createdAt>2012-01-03T13:52:45Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Scott</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986677" />
</post>
<post dsq:id="1237683089">
<id>wp_id=442</id>
<message><![CDATA[<p>Regarding speed, you might want to consider starting emacs with the -nw option. This loads it up within the terminal itself.</p>]]></message>
<createdAt>2012-01-09T21:09:33Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>saptman</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986677" />
</post>
<post dsq:id="1237683090">
<id>wp_id=443</id>
<message><![CDATA[<p>For some reason vim doesn't beep for me.  If it beeped then I would figure out a way to turn it off or I would switch to emacs.</p>]]></message>
<createdAt>2012-01-09T22:42:13Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>nobeep</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986677" />
</post>
<post dsq:id="1237733581">
<id>wp_id=446</id>
<message><![CDATA[<p>Yeah, that's what I was doing from the start :)</p><p>I actually have had to always use -nw ever since I compiled and started using the git version of emacs, as otherwise it just hangs (my X11 is broken).  And the Cocoa GUIs suck by the way.</p><p>It's not super slow. It takes maybe two or three seconds to start.  But that's still annoying, especially when type-ahead doesn't work reliably.</p><p>I think part of the problem is the VC module.  Or at least that's what it says it's loading.  I'll see if there's a way to disable it.  Also, I think I might be able to make $EDITOR at least faster by adding -q (I just use $EDITOR for writing commit messages).</p>]]></message>
<createdAt>2012-01-10T20:07:10Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986677" />
<parent dsq:id="1237683089" />
</post>
<post dsq:id="1237733582">
<id>wp_id=447</id>
<message><![CDATA[<p>You may have beeps disabled in your terminal, or else it doesn't support them.</p>]]></message>
<createdAt>2012-01-10T20:11:16Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986677" />
<parent dsq:id="1237683090" />
</post>
<post dsq:id="1237774163">
<id>wp_id=450</id>
<message><![CDATA[<p>Oh btw, while you spend (waste? don't worry, every serious emacs user does it ;) time configuring your .emacs, you might also want to take a look at magit which allows you to manipulate git repos right off your buffer. You could even install rope and get some cursory auto complete, although I find M - / quite adequate. Install mpdee while you are at it and use erc to chat. Frankly, I see no reason why you should have to spend any time outside emacs :D</p>]]></message>
<createdAt>2012-01-11T19:09:41Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>saptman</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986677" />
<parent dsq:id="1237733581" />
</post>
<post dsq:id="1237777911">
<id>wp_id=451</id>
<message><![CDATA[<p>I writing up a new post about some of this.</p><p>What is mpdee? A typo maybe? I didn't find anything about it.</p>]]></message>
<createdAt>2012-01-11T23:12:49Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986677" />
<parent dsq:id="1237774163" />
</post>
<post dsq:id="1237683093">
<id>wp_id=457</id>
<message><![CDATA[<p>next time you are really bored, check out artist mode, or psychiatrist</p>]]></message>
<createdAt>2012-01-15T00:25:58Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>no one</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986702" />
</post>
<post dsq:id="1237733586">
<id>wp_id=458</id>
<message><![CDATA[<p>Thanks.  I knew about psychiatrist (see my first post in the series), but not artist mode. It seems that iTerm2 doesn't support click and drag, so all I can do is created dots.  I'll have to try it in the GUI version.</p>]]></message>
<createdAt>2012-01-15T00:39:11Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986702" />
<parent dsq:id="1237683093" />
</post>
<post dsq:id="1237774166">
<id>wp_id=459</id>
<message><![CDATA[<p>Hmm, I tried it in Aquamacs, and that one also only drew dots (though it did work with dragging).  I remember seeing a picture where it also drew things like \, -, and /.  Am I missing something?</p>]]></message>
<createdAt>2012-01-15T00:48:29Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986702" />
<parent dsq:id="1237733586" />
</post>
<post dsq:id="1237683095">
<id>wp_id=465</id>
<message><![CDATA[<p>I started with Vim in 2009, so I haven't been using it that long. Before that I had been using Kate in KDE for several years and Emacs before that. Prior to using Linux, I didn't have a real text editor at all (on Windows). On OS/2 I used the Enhanced Editor that came with Warp 3 and 4, and in DOS I used the DOS editor (edit.exe).</p><p>I had tried Vim a couple of times over the years, but failed to understand it and quickly gave up on learning it. When I finally did learn it, it was because I was in need of an editor that would fit into any environment I happened to be using. At the time, KDE was undergoing major growing pains. I didn't want to rely on it while it was so unstable, so I started hopping from one desktop environment to another and was having different text editors thrown at me by default in each one, some better, or worse, than others. I decided I needed to take control of what text editor I used and chose to learn a text-mode editor. And why not? What does a text editor need fancy graphics for, anyway? (Well, it DOES make the fonts look better.)</p><p>I had put off learning Vim for a long time and decided to dive in head first. What I would say about learning it (and its tutorial agrees with me) is to not try to memorize commands. If you are approaching it that way, you're doing it wrong. Memorizing commands from cheat sheets is the wrong way to go about it. That's like trying to memorize how to ride a bicycle.</p><p>When I learned Morse code for my amateur radio license exam, it was the same way. If you try to memorize dots and dashes, you'll never get anywhere. You have to listen to the sounds and let your hand write down as letters, what your ear hears as patterns.</p><p>It is also like learning a foreign language. If you try to do it by translating what you hear into your native language in your head, you won't learn anything. What you need to develop is muscle memory that translates what you are thinking of doing to your text into finger movements on the keyboard. It's much more like touch-typing than anything else. And, indeed, it is suggested by several experts, Vim's author included, that you learn touch-typing prior to learning it.</p><p>Its command set is a mini-language of text objects and actions that can be combined in infinite ways through a consistent syntax. Once you understand that and learn a little muscle memory, learning new commands becomes easier and easier, until soon you find yourself typing Vim commands in inappropriate places, like inside of word processors or on web pages.</p><p>But why bother in the first place, when there are so many easier editors to use? That's a good question. It is one that many users have a difficult time articulating, and it has to do with efficiency and an almost Zen-like experience while using it. Some describe becoming one with the editor.</p><p>I believe it has to do with the way in which Vim encourages efficiency. Most user interfaces place their efficiency at the software end of the user interface, in menus and other devices for issuing commands, but give little thought to the physical actions required of the user to command the software. In a text editor one's hands are on the keyboard when typing text. But issuing commands almost always requires either moving the hands away from that position to press chords or to manipulate the mouse. It's a safe bet that you'll have to divert your eyes from the text on screen to do those things, too. It jars your concentration.</p><p>Vim's interface is designed with efficient physical motion in mind. Commands are typed just like text is: by touch-typing. It's commands can by typed without looking at the keyboard for this reason. Not needing to look away from the text helps keep you from losing your place while you run some command or other. Vim's user interface keeps your hands touch-typing and keeps your eyes on the screen. This promotes deeper concentration. Thus, the Zen-like experience reported by some users.</p><p>Another reason to learn it is that it enables actions on text that requires the addition of new commands or custom macros in other editors. If you wanted a command that deletes an arbitrary, but specific, number of paragraphs, many other editors would need a macro or additional commands. It wouldn't be possible in some editors at all. But in Vim there is no need for such a macro: 5d} does it five times, or 100d} does it a hundred times. If I don't like doing it that way, I can also do it like this d5} or d100}, depending on how I like to think. Remembering how to do it is not about memorizing dee five right-curly-brace. Its more like left index finger to the five key, left middle finger down, right pinky up to the right while pressing shift. It's a touch-typing memory thing, not a string of characters thing.</p><p>It's very difficult to articulate why Vim is worthwhile to learn, but it is near impossible to convince anyone if they insist on learning it through memorization from cheat sheets. Those efforts are almost guaranteed to fail with the result being someone who gave Vim a fair trial and decided it was not for them. The frustration I feel when someone does that drives me crazy, because it would all be so much easier for them if they would only take the advice that is given to them.</p><p>:wq</p>]]></message>
<createdAt>2012-01-21T16:25:06Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Scott</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986702" />
</post>
<post dsq:id="1237683097">
<id>wp_id=466</id>
<message><![CDATA[<p>Thanks for the write up.  I've heard similar accounts about a "Zen experience" when using vim.  I think you can get the same thing in anything that uses just the keyboard, such as emacs or even just the bash shell.  This is why one of the more annoying thing about emacs to me is the lack of type-ahead support while it's booting up.</p><p>I'm a little confused about what you actually suggest doing with respect to cheat sheets.  I used a cheat sheet to learn because it would be impossible to do so otherwise.  If I just went off of what I remembered from the tutorial from the start, I would end up just editing with nothing but h, j, k, l, and i, which would extremely painful (I can be more efficient in nano).  I think you have to agree that you need some kind of reference to learn the basic key commands when you start.  A cheat sheet is probably the best way to do this, as it gives you only the information you need.</p><p>In my experience, when you learn something like this, you first learn it by rote (or you always look it up).  Then, if you use it often enough, you will gain a muscle memory.  It's not because this is the best way to do it; I simply don't see how else it could be done.  How do you go about gaining a muscle memory without learning some other way first?  You can't learn a language by reading text in that language until you "get" it.  You have to learn at least some base vocabulary first.</p><p>I do agree that muscle memory is the way to go.  This is the only way that you can be as fast as you want to be.  Touch typing is a perfect example of this.  There is a limit, a pretty low one, to the wpm that you can achieve without a muscle memory of the keyboard.  But you're saying something equivalent to saying that the best way to learn how to touch type is to buy a keyboard that has no letters on the keys.  This may actually work well for someone who is close to being a touch typist, but I'm pretty sure it would result in a slower learning rate for someone who's never typed at all before.</p><p>Maybe I'm misunderstanding what you're saying, and we really do agree after all.  I don't feel that the reason I chose emacs over vim is that I used a cheat sheet, however.  For one thing, you need to learn a bunch of key commands for emacs too.  I actually haven't been using a cheat sheet for emacs, as I noted.  But I feel like this has made me less efficient.  This is because the cheat sheet serves as a constant reminder of more advanced keyboard shortcuts, which you would otherwise forget about and never use.  For example, I just recently was reminded of the M-a and M-e keyboard shortcuts in emacs.</p><p>Finally, an unrelated note: I never really got the hang of numbered command, either in vim or emacs. To me, by the time you count exactly how many words you want to delete (or whatever), you could have just pressed the shortcut that many times.  You can guess, but you'll end up getting it wrong most of the time, and for destructive commands like delete, you'll end up underestimating every time, again making things less efficient in the long run. I actually rebound C-u in emacs to work like it does in bash, because I never use this feature. Do you just get really good at estimating the number from sight, or what?</p>]]></message>
<createdAt>2012-01-22T03:10:12Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Aaron Meurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986702" />
<parent dsq:id="1237683095" />
</post>
<post dsq:id="1237733588">
<id>wp_id=467</id>
<message><![CDATA[<p>I don't mean to totally forgo cheat sheets. What I mean is that you should not rely solely on rote and definitely not on remembering the commands as strings of characters but to learn them as finger movements, so that you are not constantly doing something like this in your head: "OK, I want to delete a sentence. Let's see, that's either das or d)." You want to get to the point where you are thinking delete a sentence and your fingers just do it. Probably, what many people do is try to remember too much in the beginning and get overwhelmed. I would say, don't add new commands until you develop muscle memory for the ones you've already covered. I'm not totally against cheat sheets, but I do think it is better to make your own consisting of only the commands you have not mastered yet, but need right now.</p><p>Tutorials for learning Morse code work this way. They start out with the simplest of sounds and add similar ones gradually, but only after you master the current material. Eventually, you are listening to the entire alphabet and other symbols and increasing your speed at copying code.</p><p>If I were to give someone advice for learning Vim, I would tell them to practice the movement of their fingers for the commands they are trying to learn and try to remember what it feels like to issue particular commands. I have had better success learning new commands that way than by trying to remember that gf opens the file name under the cursor or that gg=G reformats my file. I find that sometimes my fingers do it before I am able to mentally recall the keystrokes, and I have to think about what I did to translate it into a string a characters in order to tell someone about the command.</p><p>:wq</p>]]></message>
<createdAt>2012-01-22T03:49:08Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Scott</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986702" />
<parent dsq:id="1237683097" />
</post>
<post dsq:id="1237733589">
<id>wp_id=468</id>
<message><![CDATA[<p>The counting problem, how many words am I trying to delete, or whatever, I totally agree with you about. I don't have a knack for quickly counting how many words are in the text, either. I tend to use visual mode for those situations. I just type v, followed by word movement or other movement commands, to extend the highlight until it covers the text I want to change. Then issue the command: d, c, y, or whatever.</p><p>:wq</p>]]></message>
<createdAt>2012-01-22T03:53:42Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Scott</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986702" />
<parent dsq:id="1237683097" />
</post>
<post dsq:id="1237733587">
<id>wp_id=472</id>
<message><![CDATA[<p>I learned emacs for org-mode, but have contemplated learning vim simply because I like to try new things and am always wondering what the best tool is. Having gone through the learning curve of emacs, I'm not thrilled about doing so, but was googling around for comparisons just to see... which brought me to this post.</p><p>Having read your response, I think that as Aaron mentions, this type of reflex is possible with anything physical. I'm assuming you aren't suggesting that only vim commands allow one to be "Zen like" in their movements?</p><p>I export a lot in orgmode as I tweak LaTeX files. =C-x C-s C-e p= is unbelievable reflexive. I don't look. It just happens. C-x C-s and C-x C-f are as well. Sure, these are damn simple; I'm simply illustrating that people can and do learn to adapt to any environment in this way and it becomes part of them. I think "browser" and my fingers to Ctrl+Alt+i, as that's what I have openbox bound to... so much so that when I'm using Windows and think "browser" I do the same thing.</p>]]></message>
<createdAt>2012-02-03T04:12:16Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Hendy</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986702" />
<parent dsq:id="1237683095" />
</post>
<post dsq:id="1237683096">
<id>wp_id=473</id>
<message><![CDATA[<p>"Having read your response, I think that as Aaron mentions, this type of reflex is possible with anything physical. I’m assuming you aren’t suggesting that only vim commands allow one to be “Zen like” in their movements?"</p><p>I don't think the commands themselves enable a Zen-like experience; It is the ability to issue commands without diverting your eyes from the screen or having to move your hands from the keyboard that promotes the Zen-like experience, regardless of the command set.</p><p>Wordstar still has devoted users for the same reason. See "WordStar: A Writer's Word Processor" by Robert J. Sawyer at <a href="http://www.sfwriter.com/wordstar.htm" rel="nofollow noopener" title="http://www.sfwriter.com/wordstar.htm">http://www.sfwriter.com/wor...</a> for a similar explanation of this kind of experience from using that program. In particular he writes, "[T]ouch-typists find that using the WordStar control-key commands is much more efficient, because they can be typed from the home row without hunting for special keys elsewhere on the keyboard." This lets you maintain most of your concentration on the text. If Emacs enables that, then sure, this would apply to that editor, too.</p><p>I don't agree that any and all user interfaces promote this kind of experience. Some clearly do not. The less the software gets between you and concentrating on the text, the better. But as soon as the interface asks you to fully divert your attention from the text and give it to the program to perform some action, that Zen-like concentration is broken. Mouse-based interfaces using tool bars and pull-down menus fall into this category. They cannot be used without diverting your eyes from the text. A select few programs give top billing to the data; Most upstage it, calling attention to themselves as if they are more important than what you are working on. I'm thinking of programs like Microsoft Word or PowerPoint, though a large number of text editors are guilty of this. They almost seem to be crying out, "Look at me! I'm so cool!" When I have to use them, I feel like the point of using them is to gawk at their awesomeness.</p><p>:wq</p>]]></message>
<createdAt>2012-02-03T08:10:02Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Scott</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986702" />
</post>
<post dsq:id="1237733585">
<id>wp_id=474</id>
<message><![CDATA[<p>I think I agree with this. Surely not all user interfaces are equal. That's why so much care must be taken when designing them. But you can't bash other interfaces in and of themselves:  they are clearly designed for different audiences. Word is designed for people who not only cannot touch type, but cannot remember a single keyboard shortcut (if you've ever watched someone do a copy and paste entirely with the mouse, you know what I'm talking about). Word also attempts to fit the needs of more advanced audiences by allowing to set custom shortcuts in a very advanced way. If course, that editor is not even on consideration here, because it is not a code editor.</p><p>One thing I like about emacs over vim is that it manages to combine a helpful interface on top of the "zen" one. For example, if you don't know the shortcut for a command, M-x command gives it to you. And the command names are verbose enough that you can often guess what they are. And if you run a command and there is a shortcut for it, it tells you in the echo area. This is how I learned about the M-= shortcut to do a word count. The emacs menu system also helps to learn new commands  In vim, the command names tend to be abbreviations that are hard to guess at, and I don't recall it telling me about shortcuts afterword (but I could be wrong about that).</p><p>To answer the main question, I definitely find emacs shortcuts to be "zen-like". I find C-x C-s C-x C-c to be even faster to type than :wq (mostly because I don't have to worry about removing my finger from the Shift key at just the right moment). emacs helps with muscle memory by making C-letter and M-letter do similar things, so your fingers don't have to remember different locations on the keyboard.</p>]]></message>
<createdAt>2012-02-04T02:50:49Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986702" />
<parent dsq:id="1237683096" />
</post>
<post dsq:id="1237774165">
<id>wp_id=475</id>
<message><![CDATA[<p>"In vim, the command names tend to be abbreviations that are hard to guess at"</p><p>The commands are hard for whom? That's what the help system is for and why it consists of two book-length references. Users who want to succeed just have to be willing to learn to use it.</p><p>"[Y]ou can’t bash other interfaces in and of themselves: they are clearly designed for different audiences."</p><p>I don't think I am. I was referring specifically to how mouse-based interfaces that use tool bars and pull-down menus do not promote a Zen-like experience and call attention to themselves. Word and PowerPoint were only examples of this type of interface. I could as easily have used code editors as examples. On my platform, the obvious choices would be Gedit and Kate. On Windows, Notepad++ is an obvious example. On OS X, Textmate comes to mind. There are more code editors that use this type of interface than code editors that don't. Check out the editor index at Text Editors Wiki <a href="http://texteditors.org/cgi-bin/wiki.pl?EditorIndex" rel="nofollow noopener" title="http://texteditors.org/cgi-bin/wiki.pl?EditorIndex">http://texteditors.org/cgi-...</a> to see just how many there are. They may compensate for this in various ways, but that doesn't change my point. And just to be clear, I'm also not suggesting that these code editors cannot be used with the keyboard. What I'm saying is that the point-and-click portion of the interface does not promote concentration; Rather, it interrupts concentration.</p><p>I'm also not suggesting that mouse-based interfaces have no place or that they are wrong in some way. They are perfect for those that don't want to use the keyboard or remember commands. But I stand by the position that they do not promote good concentration and that they are less efficient when used with the mouse.</p><p>:wq</p>]]></message>
<createdAt>2012-02-04T10:45:51Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Scott</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986702" />
<parent dsq:id="1237733585" />
</post>
<post dsq:id="1237733580">
<id>wp_id=490</id>
<message><![CDATA[<p>Not 100% sure if I understand exactly how you want completion to work, but I think you're looking for something along the lines of:</p><p>  :set completeopt=menu,longest,preview</p>]]></message>
<createdAt>2012-02-24T20:49:29Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Rich Cheng</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986647" />
<parent dsq:id="1237733575" />
</post>
<post dsq:id="1237683083">
<id>wp_id=491</id>
<message><![CDATA[<p>Pressing 'l' doesn't bring you to the beginning of the next line because you don't have 'l' in your setting for 'whichwrap'.</p><p>  :set whichwrap+=h,l</p><p>(but yes, if you find yourself using either 'h' or 'l' frequently, then you're probably not getting the most out of Vim's interface.)</p>]]></message>
<createdAt>2012-02-24T20:52:17Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Rich Cheng</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986647" />
</post>
<post dsq:id="1237683088">
<id>wp_id=492</id>
<message><![CDATA[<p>Not really expecting to convince you to try Vim again--it sounds as though emacs is just a better fit for you, but just for posterity and other readers:</p><p>1). You can edit the current contents of the command line by pressing ctrl-f to open the command window. See :help cmdwin.</p><p>2). Use the 'wildmenu' and 'wildmode' settings to configure how completion works on the command line. See :help wildmenu</p><p>3). Use the 'whichwrap' setting to specify whether or not you want various commands (including 'h' and 'l' to wrap over lines).</p>]]></message>
<createdAt>2012-02-24T21:06:15Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Rich Cheng</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986677" />
</post>
<post dsq:id="1237683094">
<id>wp_id=493</id>
<message><![CDATA[<p>It's definitely this one: 5). Brain's wired differently.</p><p>I was about halfway through the vimtutor when I fell in love with Vim, and I've only grown more keen on it the longer I've used it.</p><p>To me, the modal interface makes editing text like a game; it is literally fun for me. Whereas you find it a pain to have to press Esc all the time. This guy hit's the nail on the head: <a href="http://robots.thoughtbot.com/post/13164810557/the-vim-learning-curve-is-a-myth" rel="nofollow noopener" title="http://robots.thoughtbot.com/post/13164810557/the-vim-learning-curve-is-a-myth">http://robots.thoughtbot.co...</a></p>]]></message>
<createdAt>2012-02-24T21:21:52Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Rich Cheng</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986702" />
</post>
<post dsq:id="1237774162">
<id>wp_id=494</id>
<message><![CDATA[<p>Well, as you've probably discovered by now, I'm actually using emacs as my main editor.  But thanks for the tip anyway (hopefully others who come to this site will find it useful).</p><p>That still doesn't seem to do quite what I want, but it's closer.  I really like the behavior of the emacs extension auto-complete-mode (see the part 3 blog post).</p>]]></message>
<createdAt>2012-02-25T05:19:56Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986647" />
<parent dsq:id="1237733580" />
</post>
<post dsq:id="1237683098">
<id>wp_id=495</id>
<message><![CDATA[<p>I can see where you're coming from.  My friend (a vim user) told me once about some vim game where you are given two blocks of text, one before and one after.  The game is to change one into another using the fewest number of vim commands.  I never really found this, but I'm sure that that sort of things would have helped me become more efficient in vim.</p><p>But for me, sitting there trying to figure out how to "efficiently" do an operation, I could do it faster by just the slow way, because I don't lose any time on thought.  There's also probably many things that could be said about perceived time and the effect of that when I have to think about how to do an editing command and when it's just done.  Scott's concept of muscle memory also comes into play here.</p><p>The point is, when I was learning vim, I found myself just arrowing over do to something rather than using the faster keys, because it felt faster than trying to remember (or lookup) the keys to do what I want, not to mention trying to figure out the correct sequence of them and so on.</p><p>An interesting note: if I ever found myself doing serious editing on my iPhone, I might consider using vim (or viper mode), because there, typing is very painful, especially chorded commands (this depends on how the editor implements them, but I've yet to see something that is highly efficient).  Then I would just need a big "ESC" key somewhere, and I could do the rest with the regular keyboard.</p>]]></message>
<createdAt>2012-02-25T05:28:50Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986702" />
<parent dsq:id="1237683094" />
</post>
<post dsq:id="1237683019">
<id>wp_id=498</id>
<message><![CDATA[<p>How do I invoke these themes? I have whatever pudb install I got from macports and that's about all I know. It works great but it's ugly.</p>]]></message>
<createdAt>2012-02-28T22:53:11Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Victor Eijkhout</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986492" />
</post>
<post dsq:id="1237733548">
<id>wp_id=499</id>
<message><![CDATA[<p>I think the macports version may be out of date.  Try doing a "pip install pudb", or you can just do "git clone <a href="https://github.com/inducer/pudb.git;" rel="nofollow noopener" title="https://github.com/inducer/pudb.git;">https://github.com/inducer/...</a> ./<a href="http://setup.py" rel="nofollow noopener" title="setup.py">setup.py</a> develop" to run the development version.  Once you've upgraded, it should show you the prefs dialog on the first run, which has the themes.    Or you can press Ctrl-p to bring it up at any time.</p>]]></message>
<createdAt>2012-02-29T02:20:45Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986492" />
<parent dsq:id="1237683019" />
</post>
<post dsq:id="1237683067">
<id>wp_id=511</id>
<message><![CDATA[<p>It looks like you haven't gotten much response but I just wanted to thank you for your introducing me to PuDB and for your contributions. I was skeptical at it's "non-GUI-ness" but it's so easy to use I think it's actually BETTER that it doesn't have a GUI. It's a revelation!</p><p>I also saw that you are the lead on Sympy and I wanted to thank you for your contributions there as well! Sympy + IPQT + Latex = Awesome!</p><p>Thank you for helping to make python even more awesome and productive!</p>]]></message>
<createdAt>2012-03-22T23:41:05Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>J. B. L</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986626" />
</post>
<post dsq:id="1237683072">
<id>wp_id=512</id>
<message><![CDATA[<p>Well I wouldn't exactly say that it doesn't have a GUI.  It does have a GUI, just one that is implemented in curses instead of the traditional OS widgets.  You do have to use the keyboard, but even that might change at some point (see <a href="https://github.com/inducer/pudb/pull/15)" rel="nofollow noopener" title="https://github.com/inducer/pudb/pull/15)">https://github.com/inducer/...</a>.  To me, what makes PuDB great is that the superiority of actual UI itself (i.e., the layout, the way the interaction is structured, etc.).  And since it's in the terminal, which is where I work with Python anyway (with IPython), I can easily call it up without waiting for a GUI to load or moving away from the window at all.  And I can easily access to IPython from within the debugging session, which is almost a killer feature in and of itself.</p><p>Glad to hear that my contributions and suggestions are helping people out.</p>]]></message>
<createdAt>2012-03-23T05:38:02Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Aaron Meurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986626" />
<parent dsq:id="1237683067" />
</post>
<post dsq:id="1237733593">
<id>wp_id=513</id>
<message><![CDATA[<p>It's true that *before* you get the hang of Vim, you can often do things faster by just (say) hammering on the arrow keys.</p><p>The point is, though, that once you *do* get the hang of Vim, the "efficient" method requires no more thought than the inefficient method. When I'm editing in Vim, I don't sit around thinking about figuring out how to do things "efficiently". Those methods are already ingrained in my fingers, and they just happen.</p><p>And once you get there (which doesn't take as much practice as you might think) you find editing in Vim joyful and extremely efficient.</p><p>Again, I'm not trying to convince *you* that *you* should be using Vim. I'm just trying to explain why those of us that do love it so much.</p><p>The game your friend told you about is Vim Golf, and it shows off the potential of Vim.</p><p>For example, take this challenge: <a href="http://vimgolf.com/challenges/4d1a34ccfa85f32065000004" rel="nofollow noopener" title="http://vimgolf.com/challenges/4d1a34ccfa85f32065000004">http://vimgolf.com/challeng...</a></p><p>If you were good enough at Vim, you could convert the "start file" into the "end file" (and save the file and quit Vim) in *literally* the same time it takes me to type: efficient vim</p><p>Yes, it's impossible to be able to know how to complete all the challenges in Vim Golf as fast as you can type the commands, but even getting *vaguely* close to that is an enticing goal!</p>]]></message>
<createdAt>2012-03-27T21:00:21Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Rich Cheng</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986702" />
<parent dsq:id="1237683098" />
</post>
<post dsq:id="1237683104">
<id>wp_id=516</id>
<message><![CDATA[<p>I started with Emacs (well over 10 years ago now...), it worked pretty well for me. I didn't like the key combinations, but I figured well, that's the way it is. Then my friend recommended me to learn Vim, so I did (from the tutorial). It took a while to get used to hjkl. As  Scott says above, I never used any cheat sheet. I just picked up the basic commands whenever I needed it. It took some time to get used to it, but I would consider the learning curve about the same for both Vim and Emacs (from my own experience).</p><p>After using Vim for about 10 years now, I am more effective in it than in anything else. I think it's philosophy is the right one.</p>]]></message>
<createdAt>2012-05-24T03:47:15Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>certik</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986702" />
</post>
<post dsq:id="1237683105">
<id>wp_id=517</id>
<message><![CDATA[<p>Hi, I just wanted to put my few thoughts. I know both editors. But I like emacs more than double-standard (double-mode) vim. Although whatever suits you can be customized to any level. Just depends on you. Pick one and master it.<br>Thanks<br>Badar<br>Open source web developer</p>]]></message>
<createdAt>2012-06-01T21:05:46Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Badar Uddin Tagar</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986702" />
</post>
<post dsq:id="1237683107">
<id>wp_id=518</id>
<message><![CDATA[<p>Interesting.  I'm curious to what degree you customized each editor.  Did you make many modifications in your .emacs/.vimrc files, or did you mostly just use the defaults?</p>]]></message>
<createdAt>2012-06-01T22:36:10Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Aaron Meurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986702" />
<parent dsq:id="1237683104" />
</post>
<post dsq:id="1237683099">
<id>wp_id=520</id>
<message><![CDATA[<p>not sure if I am not doing it right, but xt-mouse (or ext-mode) is not working fully with emacs 24 on my debian sid box (only able to move vertical frame partitions)... trying to give emacs a fair shot, but it is hard (why are so many of the default confs so far from usable?)</p>]]></message>
<createdAt>2012-06-12T07:40:34Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Thierry</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986702" />
</post>
<post dsq:id="1237733595">
<id>wp_id=521</id>
<message><![CDATA[<p>I actually still have issues with mouse reporting, which I haven't gotten around to fixing.</p><p>I agree about the defaults. Vim is the same in my opinion. At least emacs has the very friendly M-x customize to change the most common thing. For more advanced stuff, just Google, and you'll find someone else who's had the same problem and has posted a solution.</p><p>Also take a look at my .emacs file (see post for link). There's a lot of useful configurations there.</p>]]></message>
<createdAt>2012-06-12T20:30:49Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Aaron Meurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986702" />
<parent dsq:id="1237683099" />
</post>
<post dsq:id="1237683111">
<id>wp_id=522</id>
<message><![CDATA[<p>Of course you can also just leave the system ipython installed and install the dev version locally (for your user only).  No root permissions required.</p><p>$ python <a href="http://setupegg.py" rel="nofollow noopener" title="setupegg.py">setupegg.py</a> develop --user</p>]]></message>
<createdAt>2012-06-14T12:28:55Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Bradley Froehle</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986741" />
</post>
<post dsq:id="1237683112">
<id>wp_id=527</id>
<message><![CDATA[<p>You could also use `apt-get build-dep ` to install all the dependencies for a package and get you ready for a manual build.</p><p>But I actually got rid of my manual install of ipython and switched to the development ppa which you can add to your apt sources using `sudo add-apt-repository ppa:jtaylor/ipython-dev` (See the announcement for the ppa here: <a href="http://mail.scipy.org/pipermail/ipython-dev/2012-January/008615.html)" rel="nofollow noopener" title="http://mail.scipy.org/pipermail/ipython-dev/2012-January/008615.html)">http://mail.scipy.org/piper...</a></p>]]></message>
<createdAt>2012-06-15T04:02:28Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Simon</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986741" />
</post>
<post dsq:id="1237733599">
<id>wp_id=528</id>
<message><![CDATA[<p>I didn't know about that. That would have been more direct :)</p><p>I'm going to stick with <a href="http://setup.py" rel="nofollow noopener" title="setup.py">setup.py</a> develop because I need to switch to older versions sometimes for testing, but otherwise a ppa sounds like a good solution.</p>]]></message>
<createdAt>2012-06-15T04:33:17Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Aaron Meurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986741" />
<parent dsq:id="1237683112" />
</post>
<post dsq:id="1237683100">
<id>wp_id=532</id>
<message><![CDATA[<p>“Maybe the vim users out there could comment why they use vim.”</p><p>I guess the systems I used in the past (at university or the Linux distributions I tried at home) simply had better defaults for Vim than Emacs. For example:</p><p>With Vim I could use Backspace and Delete, while Pico and Emacs had problems with one of those keys (I do use Vim with the arrows, home, end, delete, etc. I use the "native" Vi commands too, but only when they improve my productivity)</p><p>- Backspace opened help in Emacs.<br>- Save (C-x C-s) or search (C-s) froze the terminal.<br>- In Vim I could get syntax hiliting and autoindenting for every programming language I could imagine, with little configuration (I just copied vimrc_example to my home dir).<br>- In Emacs Enter does not repeat the indentation of the previous line by default (am I in Notepad??), while Vim intelligently (un)indented every line according to the previous one, handling braces and everything else much better than any other editor I had tried.<br>- The instructions of Emacs did not teach how to open a new file without giving it a name. These little things add up.</p><p>It's true that after the first impression I had to adjust several little annoyances in Vim (I still don't use it much for free text, only for programming), but I was already hooked. It's also true that changing just a few settings, Emacs does everything, but in my first tries of Emacs it simply didn't work. Now i'm trying it again, after a few years, just for fun.</p>]]></message>
<createdAt>2012-06-15T22:22:40Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Marcus Aurelius</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986702" />
</post>
<post dsq:id="1237683102">
<id>wp_id=537</id>
<message><![CDATA[<p>Actually, I've been using a Linux box for a little while, and I'm starting to get an idea of what you're talking about.  None of the shortcuts that require Control-Shift seem to work (I'm using Konsole in Ubuntu), which includes several that I rely on a lot.  Also, Alt did not work at all in Gnome terminal (one of the reasons I switched to Konsole), and it seems to like to open the Gnome search thing instead of doing the keyboard shortcut, which is really annoying.  Maybe I should just suck it up and use the GUI version until I get back to a Mac again.</p>]]></message>
<createdAt>2012-06-24T09:36:56Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Aaron Meurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986702" />
<parent dsq:id="1237683100" />
</post>
<post dsq:id="1237683101">
<id>wp_id=543</id>
<message><![CDATA[<p>Since you're using the development version of Emacs, you might like Emacs-prelude (<a href="https://github.com/bbatsov/prelude)" rel="nofollow noopener" title="https://github.com/bbatsov/prelude)">https://github.com/bbatsov/...</a>, a nice set of customizations for Emacs. In particular, it adds more modes for various languages, includes the nice Zenburn theme by default, enables ido-mode (which makes commands like C-x C-f much nicer), and so on.</p>]]></message>
<createdAt>2012-07-09T04:46:44Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>David Li</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986702" />
</post>
<post dsq:id="1237683106">
<id>wp_id=544</id>
<message><![CDATA[<p>I think I may already be too far town the configuration rabbit hole to use that (I've even already created my own theme), but I'll look at it to see if there are any interesting things I can carry over.  ido-mode already seems like a pretty cool addition to my workflow.</p>]]></message>
<createdAt>2012-07-09T05:17:29Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Aaron Meurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986702" />
<parent dsq:id="1237683101" />
</post>
<post dsq:id="1237733594">
<id>wp_id=545</id>
<message><![CDATA[<p>It has been a while since you started using Emacs. I'm just curious. How is your experience so far now that you have more experience and a more complete configuration?</p>]]></message>
<createdAt>2012-07-09T07:35:50Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Scott</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986702" />
<parent dsq:id="1237683106" />
</post>
<post dsq:id="1237774167">
<id>wp_id=546</id>
<message><![CDATA[<p>I started writing up a reply, but then it got so long that I figured that it would be best put in a new post.  So I'll reply there.</p>]]></message>
<createdAt>2012-07-09T08:21:56Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Aaron Meurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986702" />
<parent dsq:id="1237733594" />
</post>
<post dsq:id="1237683113">
<id>wp_id=584</id>
<message><![CDATA[<p>;; y/n instead of yes/no<br>(fset 'yes-or-no-p 'y-or-n-p)</p>]]></message>
<createdAt>2012-07-24T16:55:05Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Matt</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986747" />
</post>
<post dsq:id="1237733602">
<id>wp_id=585</id>
<message><![CDATA[<p>Thanks!</p>]]></message>
<createdAt>2012-07-25T03:12:55Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Aaron Meurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986747" />
<parent dsq:id="1237683113" />
</post>
<post dsq:id="1237683110">
<id>wp_id=591</id>
<message><![CDATA[<p>re. html editor: select text and C-c C-c h then you can type in the link target</p>]]></message>
<createdAt>2012-08-07T17:23:16Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Nei</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986747" />
</post>
<post dsq:id="1237683114">
<id>wp_id=592</id>
<message><![CDATA[<p>as for the re-builder, first change syntax to string with C-c TAB and then remember it's \( \). if you're pleased with the result use C-c C-w to copy and in the query-replace-regexp you can paste it with C-y -- still to hard? write your custom elisp and put it on a key binding ;-)</p><p>about isearch, just hit C-s again at the end and it will "wrap around". And if you want to edit your search string, just type M-e first and then you can delete the last char or whatever.</p><p>for code navigation I highly recommend you set up semantic and then you can use something like eassist-list-methods to get a pop-up menu with quick jump to all the methods, or if that isn't enough check out ecb</p>]]></message>
<createdAt>2012-08-07T18:17:49Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Nei</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986747" />
<parent dsq:id="1237683110" />
</post>
<post dsq:id="1237733601">
<id>wp_id=593</id>
<message><![CDATA[<p>I know that you can press C-s again.  But that's not the point. I have to press C-s up to four times just to determine if a string is really in a document or not.</p><p>Thanks for the url tip.</p><p>For regular expressions, that doesn't really solve my problem.  I want something user-friendly and interactive.  If I was an elisp wiz, I might try to do it on my own.  But I can't imagine that I'm the only one who's felt this deficiency.</p><p>I'll checkout semantic or ecb.  I vaguely remember trying semantic before but giving up because it was too hard to setup.</p>]]></message>
<createdAt>2012-08-08T03:22:44Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Aaron Meurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986747" />
<parent dsq:id="1237683114" />
</post>
<post dsq:id="1237774168">
<id>wp_id=642</id>
<message><![CDATA[<p>Emacs' regexp syntax takes a little bit getting used to, but with so many libraries dependent on it at this point, it won't change.</p><p>For your isearch problems, you're using the wrong tool.  See `occur`.  Helm has interactive interactive occur.</p><p>Also check out helm for your general incremental completion needs.  Ido is for the kiddies.  ;)</p>]]></message>
<createdAt>2012-09-08T08:27:15Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Le Wang</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986747" />
<parent dsq:id="1237733601" />
</post>
<post dsq:id="1237777912">
<id>wp_id=644</id>
<message><![CDATA[<p>Thanks.  I'll check out helm.</p>]]></message>
<createdAt>2012-09-08T22:41:23Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Aaron Meurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986747" />
<parent dsq:id="1237774168" />
</post>
<post dsq:id="1237777915">
<id>wp_id=645</id>
<message><![CDATA[<p>It looks promising, but it would require a bit of customization to get it how I want, so I'll probably not get around to it for a while.</p>]]></message>
<createdAt>2012-09-08T22:55:51Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Aaron Meurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986747" />
<parent dsq:id="1237774168" />
</post>
<post dsq:id="1237683121">
<id>wp_id=667</id>
<message><![CDATA[<p>You can certainly do it for tuples using the CPython API.  For example:</p><p>from ctypes import pythonapi, c_void_p, c_ssize_t, c_int<br>from _ctypes import PyObj_FromPtr</p><p>pythonapi.PyTuple_New.argtypes = (c_ssize_t,)<br>pythonapi.PyTuple_New.restype = c_void_p<br>pythonapi.PyTuple_SetItem.argtypes = (c_void_p, c_ssize_t, c_void_p)<br>pythonapi.PyTuple_SetItem.restype = c_int</p><p>a = pythonapi.PyTuple_New(1)<br>pythonapi.PyTuple_SetItem(a, 0, a)<br>a = PyObj_FromPtr(a)</p><p>assert type(a) is tuple<br>assert a[0] is a</p><p>repr(a) # '((...),)'<br>print(a) # segfault</p>]]></message>
<createdAt>2012-09-19T09:38:08Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Bradley Froehle</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986772" />
</post>
<post dsq:id="1237733603">
<id>wp_id=669</id>
<message><![CDATA[<p>Nice. Before it segfaults, it prints a bunch of (.  And it seems that it has been fixed in Python 3 (print(a) gives the same thing as repr(a)).</p>]]></message>
<createdAt>2012-09-19T18:53:29Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Aaron Meurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986772" />
<parent dsq:id="1237683121" />
</post>
<post dsq:id="1237682963">
<id>wp_id=683</id>
<message><![CDATA[<p>Wow that was odd. I just wrote an extremely long comment <br>but after I clicked submit my comment didn't show up. Grrrr... well I'm not writing all that <br>over again. Anyway, just wanted to say excellent blog!</p>]]></message>
<createdAt>2012-10-01T07:16:22Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Emory</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986385" />
</post>
<post dsq:id="1237682994">
<id>wp_id=743</id>
<message><![CDATA[<p>i have just had the same issue</p><p>the issue as i saw it is I was deleting an element of the list shortening it, then the for loop "goes out of range" because your using i or n or whatever in the for loop to target some part of the array (i'll call it that if i want).. i had quite a few frankenstein solutions but to be honest I think the logical one is a try: and except:</p><p>it just doesn't make sense to build any crazy workarounds (i am already doing this on a nested list, so i could have an extra variable to be like a delete after loop tickbox) but yeah exceptions are fine, if you're really OCD you program that particular exception in and you can then still be on the lookout for actual exceptions you don't know about (i am not this ocd)</p>]]></message>
<createdAt>2012-11-22T04:39:01Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Richard Ellicott</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986425" />
</post>
<post dsq:id="1237733543">
<id>wp_id=744</id>
<message><![CDATA[<p>omg i just realized how old this is lol, well maybe it's useful to others</p>]]></message>
<createdAt>2012-11-22T04:39:49Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Richard Ellicott</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986425" />
<parent dsq:id="1237682994" />
</post>
<post dsq:id="1237774147">
<id>wp_id=745</id>
<message><![CDATA[<p>Yes it's old, but this still remains one of the most popular posts on my blog.</p>]]></message>
<createdAt>2012-11-22T04:42:51Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Aaron Meurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986425" />
<parent dsq:id="1237733543" />
</post>
<post dsq:id="1237683122">
<id>wp_id=753</id>
<message><![CDATA[<p>Deleting words in Vim takes just two keystrokes "dw" if you want to delete it and stay in normal mode or "cw" if you want to delete it and enter insert mode immediately. "dw" is for delete word and "cw" is for change word. If you want to operate on say 3 words then you type "d3w" etc.</p><p>From reading your post about vim, I am not sure if you have tried vimtutor. It is installed with vim and it explains basic stuff like this. Using a cheatsheet is not the best way to learn vim</p>]]></message>
<createdAt>2013-01-18T17:46:47Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Panos</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986775" />
</post>
<post dsq:id="1237683129">
<id>wp_id=754</id>
<message><![CDATA[<p>If you're counting keystrokes, you should add one to all your counts for escape.</p><p>I did use the vim tutorial. Is that the same thing? I didn't remember everything after one run through, and hence the cheat sheet. My actual "method" of learning vim was to use it cold turkey. The cheat sheet allows me to remember more than just the basic editing commands, which I think boosted my learning (it also kept me from going insane).</p>]]></message>
<createdAt>2013-01-18T21:48:47Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Aaron Meurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986775" />
<parent dsq:id="1237683122" />
</post>
<post dsq:id="1237683127">
<id>wp_id=762</id>
<message><![CDATA[<p>To  backward-kill-word in Vim insert mode, use . It acts more intuitive than Emacs's  to me,  which would erase the whole thing:<br>    c += *<br>in one shot. The muscle memory is so ingrain that I have to swap the good old keybinding of  and  in Emacs :)</p>]]></message>
<createdAt>2013-01-23T17:54:17Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>ipirlo</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986775" />
</post>
<post dsq:id="1237733605">
<id>wp_id=764</id>
<message><![CDATA[<p>You didn't type what it was (unless you really meant .)</p><p>I think to change how Emacs deletes stuff, you just have to change what characters are recognized as word boundaries.</p>]]></message>
<createdAt>2013-01-24T00:53:04Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Aaron Meurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986775" />
<parent dsq:id="1237683127" />
</post>
<post dsq:id="1237683124">
<id>wp_id=795</id>
<message><![CDATA[<p>Thanks for putting an effort to write this up!</p><p>For indenting blocks of python:<br>Select the region to be indented and then: C-c &gt;<br>C-c &lt;  for -4 spaces</p>]]></message>
<createdAt>2013-02-21T04:07:46Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Björn Dahlgren</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986775" />
</post>
<post dsq:id="1237733604">
<id>wp_id=796</id>
<message><![CDATA[<p>Oh awesome. I just may have to enable this in all modes.</p>]]></message>
<createdAt>2013-02-21T04:40:21Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Aaron Meurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986775" />
<parent dsq:id="1237683124" />
</post>
<post dsq:id="1237683071">
<id>wp_id=812</id>
<message><![CDATA[<p>Pudb is very convenient.  Thank you for your work!</p>]]></message>
<createdAt>2013-04-12T21:56:45Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Paul Hobbs (@PaulHobbs23)</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986626" />
</post>
<post dsq:id="1237774171">
<id>wp_id=818</id>
<message><![CDATA[<p>I think it's more likely that wordpress deleted what he typed because it looked like an HTML tag.</p><p>The vim keystroke for deleting words in insert mode is CTRL-W.</p>]]></message>
<createdAt>2013-04-24T19:59:32Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Rich Cheng</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986775" />
<parent dsq:id="1237733605" />
</post>
<post dsq:id="1237777916">
<id>wp_id=824</id>
<message><![CDATA[<p>Yes, [(control w)]</p>]]></message>
<createdAt>2013-04-30T04:24:31Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>ipirlo</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986775" />
<parent dsq:id="1237774171" />
</post>
<post dsq:id="1237683115">
<id>wp_id=831</id>
<message><![CDATA[<p>When I used Emacs (a two-year period beginning in 2002), it was to compose prose text.  I loved that I could make corrections so quickly without having to move my hands away from the keyboard, but I found that Emacs' key bindings caused a burning pain in my hands after about forty-five minutes of typing.  Still, I persisted.  I wanted to learn Lisp to customize my .emacs file, but found it sufficiently complex to dissuade me from bothering with it, even though I bought a book specifically aimed at teaching Emacs Lisp.  As I gained more experience with it, I noticed that Emacs did not fit into either Windows or Linux.  To be fair, Vim doesn't fit into Windows either, but it is a nice fit on any Linux system.  Emacs felt like a strange glob of goo in Windows and like a monster on an ant hill in Linux.  It was not designed for either of these systems.  Eventually, I concluded that I was not the target audience to which Emacs (or its Lisp interpreter) was aiming, and I abandoned it.  And again, in all fairness, Vim is not aimed at authors of prose any more than Emacs is;  I was simply lucky to be a touch typist (Vim is best used in combination with touch typing) and to have approached learning it in a way that was likely to succeed: memorizing the tactile feel of commands rather than their alphabetic symbols.</p><p>:wq</p>]]></message>
<createdAt>2013-05-11T21:46:45Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Scott</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986747" />
</post>
<post dsq:id="1237683130">
<id>wp_id=852</id>
<message><![CDATA[<p>I do not know whether it's just me or if perhaps everyone else encountering problems with your site. It looks like some of the text within your posts are running off the screen. Can somebody else please provide feedback and let me know if this is happening to them too? This might be a problem with my internet browser because I've had this happen previously.<br>Thanks</p>]]></message>
<createdAt>2013-07-06T15:14:34Z</createdAt>
<isDeleted>true</isDeleted>
<isSpam>false</isSpam>
<author>
<name>pc hack</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986789" />
</post>
<post dsq:id="1237683132">
<id>wp_id=869</id>
<message><![CDATA[<p>Other than writing release notes and closing pull requests how much time will it take to do the 0.7.4 release candidate?</p>]]></message>
<createdAt>2013-07-12T02:58:34Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Matthew Rocklin</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986790" />
</post>
<post dsq:id="1237733608">
<id>wp_id=871</id>
<message><![CDATA[<p>It can be done in an hour, because other than those things you mentioned, the only other thing that isn’t automated yet is the uploading to websites (GitHub’s releases are nice, but I didn’t see any API for it). I’ll probably go to the trouble of making PyPI automated this weekend when I cut 0.7.3 final. Then, the release process will be</p><p>- Fix all blocking issues (this will always be the hardest part)<br>- Write release notes (also not easy, but this is the one thing that I’ve generally been able to get other people to volunteer for)</p><p>Once those are out of the way, we are in a state when we can release (OK, the second thing doesn’t have to happen until the release is done, but if we don’t do a release candidate, as we may not in the future, then it has to be done first). Then, the steps are</p><p>1. Create a release branch<br>2. Change the version in master<br>3. Push the branch up and make a pull request out of it<br>4. Change the version in the branch (technically this has to go before 3, because you can’t make a pull request out of an empty branch, but that messes up my little goto logic here)<br>5. Run fab vagrant release from the release directory<br>6. Fix any issues that it comes up with. In theory this will be none, because of our continuous testing, but in the current state of things, there will be issues with things like keeping AUTHORS and .mailmap up-to-date.<br>7. Copy the boilerplate text that it generates to the release notes (stuff like a table of md5 hashes, and a list of authors).<br>8. Upload everything to GitHub by hand (GitHub is not required, but I do feel a little better about having things at more than *just* PyPI)<br>9. If it’s a release candidate, wait a week, then goto 4. Fix bugs in the interim. Determine if another release candidate is needed. Otherwise, it’s a final release, so continue to 10.<br>10. Run the command to upload to PyPI.<br>11. Update the webpage and the docs (probably these can be at least partially automated)<br>12. Send a message to the mailing list (again, I think this can at least be copy-paste automated)<br>13. (optional) update the blog, post to google+ and twitter.</p><p>As for updating other sites, like sympy live and sympy gamma, I plan to leave that to other people, or I’ll do it myself if I have the time. The same for sites we don’t own like Wikipedia. I don’t plan to do anything with Google Code anymore.</p><p>Aside from bug fixing and the release notes, I anticipate the most annoying things to be:</p><p>- Updating .mailmap and AUTHORS. We should probably test this on Travis. There is a new script, ./bin/<a href="http://mailmap_update.py" rel="nofollow noopener" title="mailmap_update.py">mailmap_update.py</a>, which currently only tells you what is missing, but in the future may do some work of fixing it for you too. Already this makes it about 1/10 as painful as it was before.<br>- Updating the website and docs.<br>- All the social media stuff<br>- Uploading six files to GitHub by hand, one at a time.</p><p>Some of this can be automated, and I will probably look into it at some point or another. Of course, these all pales in comparison to the real elephant in the room, which is writing the release notes. We should think about better ways to handle that.</p><p>I have an idea. When you merge pull requests, there is an option to write a custom message. We could encourage people to write stuff in there whenever they merge important pull requests, and then write a tool that just pulls those things out into release notes. There would still need to be some way to check if something was missed, but I think this would be the dead-simplest way to encourage people to write release notes as features are implemented.</p>]]></message>
<createdAt>2013-07-12T07:19:07Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Aaron Meurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986790" />
<parent dsq:id="1237683132" />
</post>
<post dsq:id="1237683137">
<id>wp_id=926</id>
<message><![CDATA[<p>how do you then add the python path to the registry. some programs look in the windows registry for the python version and skip the path variable.</p>]]></message>
<createdAt>2013-09-09T23:15:25Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>MySchizoBuddy</name>
<isAnonymous>false</isAnonymous>
<username>MySchizoBuddy</username>
</author>
<thread dsq:id="2244986799" />
</post>
<post dsq:id="1237733610">
<id>wp_id=927</id>
<message><![CDATA[<p>If you use Anaconda or Miniconda, there is a checkbox (off by default) in the installer to do this. If you are using some other distribution, I have no idea, as I'm not a Windows user.</p>]]></message>
<createdAt>2013-09-10T02:03:30Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Aaron Meurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986799" />
<parent dsq:id="1237683137" />
</post>
<post dsq:id="1237682976">
<id>wp_id=942</id>
<message><![CDATA[<p>You can also use `git reflog` to recover in such situations, even if you had closed your terminal. `man git reflog` should tell you everything you need.</p>]]></message>
<createdAt>2013-11-16T08:56:37Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Chris Down</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986407" />
</post>
<post dsq:id="1237733537">
<id>wp_id=943</id>
<message><![CDATA[<p>No reflog wouldn't have helped because the data was never committed.</p>]]></message>
<createdAt>2013-11-16T09:46:25Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Aaron Meurer</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986407" />
<parent dsq:id="1237682976" />
</post>
<post dsq:id="1237683116">
<id>wp_id=968</id>
<message><![CDATA[<p>I have used both emacs and vim. Emacs was when I was starting to get back into programming - and it had a way of letting you know that your C++ or Java was off. Then when I started work, the only thing available at work was vim. I definitely got an appreciation for the simple key strokes with great power. Now I am coming full circle getting interested in Lisp programming, so picking up emacs again, but only because of the close integration with Lisp (Slime/swank). What has made it bearable is the evil plugin for emacs. Sweet - I have the best of both worlds. It is the scalpel on top of the Swiss army knife. The Evil plugin approximates the Vim environment by 99%.</p><p>For more information I refer you to another Vim fanatic turned Emacs/Evil editor:<br>Shinobu's Secrets -&gt; Some thoughts on Emacs and Vim (about halfway down the page):<br><a href="http://zuttobenkyou.wordpress.com/category/vim/" rel="nofollow noopener" title="http://zuttobenkyou.wordpress.com/category/vim/">http://zuttobenkyou.wordpre...</a></p><p>Also for more to get into vim look into my comments at <a href="http://shortcutworld.com" rel="nofollow noopener" title="shortcutworld.com">shortcutworld.com</a> for emacs and for vim (especially about Derek Wyatt's supreme videos from beginner to advanced)</p><p>Furthermore checkout what Ryan McGeary is doing:<br><a href="http://ryan.mcgeary.org/screencasts/2011/01/03/working-with-os-x-and-emacs/" rel="nofollow noopener" title="http://ryan.mcgeary.org/screencasts/2011/01/03/working-with-os-x-and-emacs/">http://ryan.mcgeary.org/scr...</a><br>He has great productivity insights for emacs.</p>]]></message>
<createdAt>2013-12-11T10:42:04Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Wesley Steinbrink</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986747" />
</post>
<post dsq:id="1237683118">
<id>wp_id=969</id>
<message><![CDATA[<p>Also,</p><p>Xah Lee has some ideas for emacs modernization:<br><a href="http://ergoemacs.org/emacs/emacs_modernization.html" rel="nofollow noopener" title="http://ergoemacs.org/emacs/emacs_modernization.html">http://ergoemacs.org/emacs/...</a></p>]]></message>
<createdAt>2013-12-11T20:56:08Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Wesley Steinbrink</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986747" />
</post>
<post dsq:id="1237683125">
<id>wp_id=972</id>
<message><![CDATA[<p>I really meant to leave the comment here vice at the 7 month post:</p><p>I have used both emacs and vim. Emacs was when I was starting to get back into programming – and it had a way of letting you know that your C++ or Java was off. Then when I started work, the only thing available at work was vim. I definitely got an appreciation for the simple key strokes with great power. Now I am coming full circle getting interested in Lisp programming, so picking up emacs again, but only because of the close integration with Lisp (Slime/swank). What has made it bearable is the evil plugin for emacs. Sweet – I have the best of both worlds. It is the scalpel on top of the Swiss army knife. The Evil plugin approximates the Vim environment by 99%.</p><p>For more information I refer you to another Vim fanatic turned Emacs/Evil editor:<br>Shinobu’s Secrets -&gt; Some thoughts on Emacs and Vim (about halfway down the page):<br><a href="http://zuttobenkyou.wordpress.com/category/vim/" rel="nofollow noopener" title="http://zuttobenkyou.wordpress.com/category/vim/">http://zuttobenkyou.wordpre...</a></p><p>Also for more to get into vim look into my comments at <a href="http://shortcutworld.com" rel="nofollow noopener" title="shortcutworld.com">shortcutworld.com</a> for emacs and for vim (especially about Derek Wyatt’s supreme videos from beginner to advanced)</p><p>Furthermore checkout what Ryan McGeary is doing:<br><a href="http://ryan.mcgeary.org/screencasts/2011/01/03/working-with-os-x-and-emacs/" rel="nofollow noopener" title="http://ryan.mcgeary.org/screencasts/2011/01/03/working-with-os-x-and-emacs/">http://ryan.mcgeary.org/scr...</a><br>He has great productivity insights for emacs.</p><p>Also,</p><p>Xah Lee has some ideas for emacs modernization:<br><a href="http://ergoemacs.org/emacs/emacs_modernization.html" rel="nofollow noopener" title="http://ergoemacs.org/emacs/emacs_modernization.html">http://ergoemacs.org/emacs/...</a></p><p>Furthermore there is a browser that uses emacs commands (with some influence of vim) You can find it at:<br><a href="http://broadcast.oreilly.com/2010/03/conkeror-the-best-web-browser.html" rel="nofollow noopener" title="http://broadcast.oreilly.com/2010/03/conkeror-the-best-web-browser.html">http://broadcast.oreilly.co...</a>  --&gt; Click the link for Conkeror in the first part of the article and select FrontPage under Quick Links - It is a emacs type web browser that is extensible using Javascript.</p>]]></message>
<createdAt>2013-12-13T08:25:00Z</createdAt>
<isDeleted>true</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Wesley Steinbrink</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986775" />
</post>
<post dsq:id="1237683135">
<id>wp_id=973</id>
<message><![CDATA[<p>Thanks Aaron - as I just start out with Miniconda I think I switch also straight away to Python 3</p>]]></message>
<createdAt>2013-12-13T14:09:28Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>peter1000</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986799" />
</post>
<post dsq:id="1237733606">
<id>wp_id=980</id>
<message><![CDATA[<p>&gt; If you’re counting keystrokes, you should add one to all your counts for escape.</p><p>Only if you entered Insert mode. With "d3w" - the given example - and many other editing commands, you wouldn't.</p><p>Compared to Emacs, Vim always saves keystrokes.</p>]]></message>
<createdAt>2013-12-29T07:15:42Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>konoron</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986775" />
<parent dsq:id="1237683129" />
</post>
<post dsq:id="1237683126">
<id>wp_id=981</id>
<message><![CDATA[<p>&gt; Either one of these editors (Vim or Emacs) is going to really suck unless you are willing to make a serious investment in customizing them and installing nice addons.</p><p>This.</p><p>Nice article. Thanks.</p>]]></message>
<createdAt>2013-12-29T07:17:48Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>konoron</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986775" />
</post>
<post dsq:id="1237682998">
<id>wp_id=983</id>
<message><![CDATA[<p>Ouch, this is wrong on two counts:</p><p>One, you still modify the list while iterating.  It might work currently, but it may blow up in the future. <a href="http://www.catb.org/jargon/html/N/nasal-demons.html" rel="nofollow noopener" title="http://www.catb.org/jargon/html/N/nasal-demons.html">Nasal Demons</a> aren't any fun.</p><p>Two, range(len(a)-1,-1,-1) creates a list.  Use xrange, it only creates a generator.  This is both faster and uses less memory if a is large.  This is especially important on implementations that don't return integers to the pool.</p>]]></message>
<createdAt>2014-01-02T05:54:20Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Nobody in particular</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986425" />
<parent dsq:id="1237682986" />
</post>
<post dsq:id="1237683128">
<id>wp_id=989</id>
<message><![CDATA[<p>Hi, I think your site might be having browser compatibility <br>issues. When I look at your website in Opera, it looks fine <br>but when opening in Internet Explorer, it has some overlapping.<br>I just wanted to give you a quick heads up! Other then that, great blog!</p>]]></message>
<createdAt>2014-01-29T17:25:06Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Link</name>
<isAnonymous>true</isAnonymous>
</author>
<thread dsq:id="2244986775" />
</post>
<post dsq:id="1237221585">
<id />
<message><![CDATA[<p>Comments are great!</p>]]></message>
<createdAt>2014-02-09T19:54:19Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<thread dsq:id="2243371578" />
</post>
<post dsq:id="1320074226">
<id />
<message><![CDATA[<p>Thanks for the kind words and for documenting all this!</p><p>I have this feeling we (as a project) are doing some things be harder than they need to. Maybe we should add a plugin specifically for github pages deployments, since they seem to be particularly tricky. I don't know enough about it to do it though.</p>]]></message>
<createdAt>2014-04-05T13:39:54Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Roberto Alsina</name>
<isAnonymous>false</isAnonymous>
<username>ralsina</username>
</author>
<thread dsq:id="2554470098" />
</post>
<post dsq:id="1320137747">
<id />
<message><![CDATA[<p>No so difficult, I have written about it... <a href="http://www.damian.oquanta.info/posts/one-line-deployment-of-your-site-to-gh-pages.html" rel="nofollow noopener" title="http://www.damian.oquanta.info/posts/one-line-deployment-of-your-site-to-gh-pages.html">http://www.damian.oquanta.i...</a>, but I also know some people do not like to work with subtrees... I think Aaron have another approach. IIRC...<br>Anyway, maybe a plugin could help.</p><p>@Aaron, nice post BTW...</p>]]></message>
<createdAt>2014-04-05T14:56:02Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>true</isSpam>
<author>
<name>damianavila82</name>
<isAnonymous>false</isAnonymous>
<username>damianavila82</username>
</author>
<thread dsq:id="2554470098" />
<parent dsq:id="1320074226" />
</post>
<post dsq:id="1321595909">
<id />
<message><![CDATA[<p>The thing that really tripped me up was that there are two kinds of GitHub pages. Half of the guides you will find are about <a href="http://username.github.io" rel="nofollow noopener" title="username.github.io">username.github.io</a> style pages and half are about gh-pages style pages.</p>]]></message>
<createdAt>2014-04-06T21:18:05Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<thread dsq:id="2554470098" />
<parent dsq:id="1320074226" />
</post>
<post dsq:id="2037619042">
<id />
<message><![CDATA[<p>I like this post and your blog, only just found it today but I'll add it to my reading.<br>I think the first part is that "not" is not a function but actually an operator. It must have a lower precedence than the addition operator, so what you are actually asking python to do is<br>(1+not)(2)</p><p>If you write:<br>1+(not(2))<br>this works as you change the precedence.</p><p>The second one is much harder, I guess it arises from the rule that only named arguments may follow the unpacking of an argument list. A more concise example which generates an error would be<br>f(*[1],)<br>I can add named arguments,<br>f(*[1],x=1,y=2)<br>but if I add a comma it fails again:<br>f(*[1],x=1,y=2, )<br>Please let me know if I got this one right, I think I cracked the first.<br>Marcus</p>]]></message>
<createdAt>2015-05-21T15:27:11Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Marcus</name>
<isAnonymous>false</isAnonymous>
<username>disqus_yOikPQzbh7</username>
</author>
<thread dsq:id="3736510161" />
</post>
<post dsq:id="2037653562">
<id />
<message><![CDATA[<p>The first is right (the precedence of `not` isn't what is implied by the expression). The second is more subtle. See <a href="http://stackoverflow.com/q/16950394/161801" rel="nofollow noopener" title="http://stackoverflow.com/q/16950394/161801">http://stackoverflow.com/q/...</a>.</p>]]></message>
<createdAt>2015-05-21T15:47:32Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<thread dsq:id="3736510161" />
<parent dsq:id="2037619042" />
</post>
<post dsq:id="2043457213">
<id />
<message><![CDATA[<p>I'm disappointed that the language has this non-intuitive and inconsistent argument parsing behaviour, but thanks for highlighting it.</p><p>One thing I've noticed in the same vein as the first example is that, as python has no increment operators, expressions like this are perfectly valid:</p><p>1++-+-+--+5</p><p>As the unary operators have a high precedence we can also prefix this with a multiplication or divide<br>3*+-++-6</p><p>But you'd only do this to upset someone during a code review</p>]]></message>
<createdAt>2015-05-24T21:58:17Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Marcus</name>
<isAnonymous>false</isAnonymous>
<username>disqus_yOikPQzbh7</username>
</author>
<thread dsq:id="3736510161" />
<parent dsq:id="2037653562" />
</post>
<post dsq:id="2043561965">
<id />
<message><![CDATA[<p>Aside from being mathematically satisfying that that works, it's also useful because you can override unary + and - in your custom objects with __pos__ and __neg__.</p>]]></message>
<createdAt>2015-05-24T23:41:29Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<thread dsq:id="3736510161" />
<parent dsq:id="2043457213" />
</post>
<post dsq:id="2292469262">
<id />
<message><![CDATA[<p>I enjoyed this. Thanks</p>]]></message>
<createdAt>2015-10-06T07:25:49Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>cyberbikepunk</name>
<isAnonymous>false</isAnonymous>
<username>cyberbikepunk</username>
</author>
<thread dsq:id="4185308554" />
</post>
<post dsq:id="2292516861">
<id />
<message><![CDATA[<p>Great post!</p>]]></message>
<createdAt>2015-10-06T08:30:33Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>true</isSpam>
<author>
<name>Sudhanshu Mishra</name>
<isAnonymous>false</isAnonymous>
<username>debugger22</username>
</author>
<thread dsq:id="4185308554" />
</post>
<post dsq:id="2292528870">
<id />
<message><![CDATA[<p>Thanks!</p>]]></message>
<createdAt>2015-10-06T08:46:10Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Ionut Vancea</name>
<isAnonymous>false</isAnonymous>
<username>vioan</username>
</author>
<thread dsq:id="4185308554" />
</post>
<post dsq:id="2293222301">
<id />
<message><![CDATA[<p>I would be interested in hearing more about why one should avoid object oriented programming. I've found that trying to onboard onto a project where the a codebase that did not have an expression of what its first-class-citizens were and what operations could be performed on them was rather difficult. I'm intensely curious: what do you view as the disadvantages of OOP?</p>]]></message>
<createdAt>2015-10-06T17:30:48Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Andrew M. Farrell</name>
<isAnonymous>false</isAnonymous>
<username>andrewmfarrell</username>
</author>
<thread dsq:id="4185308554" />
</post>
<post dsq:id="2293224959">
<id />
<message><![CDATA[<p>Nice writeup and I'm looking forward to seeing what you and Anthony will be doing! Congrats!</p>]]></message>
<createdAt>2015-10-06T17:32:14Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Jason K. Moore</name>
<isAnonymous>false</isAnonymous>
<username>moorepants</username>
</author>
<thread dsq:id="4185308554" />
</post>
<post dsq:id="2295563214">
<id />
<message><![CDATA[<p>Very nice write-up Aaron. </p>]]></message>
<createdAt>2015-10-07T23:30:42Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Andrew</name>
<isAnonymous>false</isAnonymous>
<username>andrewerdna12</username>
</author>
<thread dsq:id="4185308554" />
</post>
<post dsq:id="2296446416">
<id />
<message><![CDATA[<p>Very nice writeup.Thanks!</p>]]></message>
<createdAt>2015-10-08T13:48:01Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>G.J Anagnostopoulos</name>
<isAnonymous>false</isAnonymous>
<username>gjanagnostopoulos</username>
</author>
<thread dsq:id="4185308554" />
</post>
<post dsq:id="2302253523">
<id />
<message><![CDATA[<p>Object oriented programming can be done well, and there are definitely cases where it is the correct abstraction (I said avoid it when procedural programming will do just fine).</p><p>My gripe with it is twofold. One is that it tends to separate out program logic into many places. The more you split your code into many methods, or use subclassing, or other OO features, the more this is true. This makes the code harder to follow, especially as a newcomer to the codebase.</p><p>The second gripe is that while OO can be done well, it too often isn't. The issue is that there are so many "features" of OO systems (especially in Python) that can be abused. The temptation to add unnecessary complexity into a system is too high. Some example of this might be:</p><p>- Splitting the class hierarchy, even when some classes are never directly used (remember that subclassing splits apart the code logic, making it harder to follow)</p><p>- Overusing syntactic sugar features, whether it's a simple use of things like properties or __methods__ (in Python). Syntactic sugar can be powerful, but it also adds complexity, especially for newcomers, who must learn what the special syntax means. Simple function calls can be verbose, but they are also the easiest for newcomers to understand, since function names tend to be made up of words that describe what they do, rather than symbols that only suggest what they do.</p><p>- Using complex features of the OO system that few people truly understand (like multiple inheritance, or even normal single inheritance in some cases, or descriptors). This effectively moves the logic out from being explicit (for, if, else, etc.) to using the implicit logic of the OO system, which, although is consistent and generally well designed, is often only understood by language experts (do you understand how the C3 algorithm works, and can you name off the top of your head the invariants that it maintains? Can you explain, without looking up any documentation, how the super() function in Python works?).</p><p>- Changing the way that OO systems fundamentally work. This is even worse than the last point because it changes even the implicit logic. This generally involves using nasty things like metaclasses and descriptors.</p><p>Procedural programming is nice because, at least in Python, you can't really change how it works, or extend it, except in simple ways (like with decorators). So instead of being tempted to change the way the language works to fit your problem, you fit your problem into the way the language works, which, at least for problems that are already close to how the language works, leads to code that only requires an understanding of the language itself to read.</p>]]></message>
<createdAt>2015-10-12T01:28:16Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<thread dsq:id="4185308554" />
<parent dsq:id="2293222301" />
</post>
<post dsq:id="2362549310">
<id />
<message><![CDATA[<p>@asmeurer:disqus what do u think of closures to avoid partially OOP? or limiting advanced features of OOP in metaclasses?</p>]]></message>
<createdAt>2015-11-16T16:19:06Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Denis Akhiyarov</name>
<isAnonymous>false</isAnonymous>
<username>denisakhiyarov</username>
</author>
<thread dsq:id="4185308554" />
</post>
<post dsq:id="2423865147">
<id />
<message><![CDATA[<p>Hi Aaron,</p><p>Thank you so much for taking the time to read through the book and provide such a thorough review. I really appreciate that. You made a number of comments which would be tremendously helpful for a future edition of the book. I thought I will just briefly discuss the following three points:</p><p>It's true that Python 3.4 was released during the time frame of working on the book. However, I had already at least finished writing Chapter 3 on statistics, so..that would pretty much render a lot of the stuff in that chapter "useless", since you could just use the functions in the statistics module. However, I think having it in it's present form is still useful since I am able to demonstrate at a how to implement fairly complicated looking formulas in computer programs. I hope that's a right way of thinking about it.</p><p>I think you rightly point out the typesetting issue in the book regarding printing in SymPy. Honestly, I am not sure how hard/easy it would be to show SymPy's 2-D printing in print..but I should have paid more attention, I guess.</p><p>Regarding the usage of FiniteSet, I chose FiniteSet over the built-in sets because:<br>"...</p><p>However, a key reason for my choice was that I wanted to show how we can create sets which did not allow addition or removal once created - like mathematical sets. This need was fulfilled by SymPy's FiniteSet since it used Python'sfrozenset data structure and not the set data sturcture.</p><p>The alternative to that would have been to use frozenset directly, but I just did not like the idea of it and I would have also missed out on the nice features FiniteSet would provide (eventually). I should note here that once I had made the decision to go with FiniteSet, I contributed patches to SymPy to make the methods of FiniteSet more compatible with Python's built in set and also implement minor features I discussed above.</p><p>.."</p><p>I discuss it more at <a href="http://doingmathwithpython.github.io/Sets-in-SymPy-and-built-in-Python-sets.html" rel="nofollow noopener" title="http://doingmathwithpython.github.io/Sets-in-SymPy-and-built-in-Python-sets.html">http://doingmathwithpython....</a></p><p>Once again, thank you for your review, and helping me contribute to SymPy as well while I was writing the book.</p><p>Best Wishes,<br>Amit.</p>]]></message>
<createdAt>2015-12-23T23:13:32Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>amitsaha</name>
<isAnonymous>false</isAnonymous>
<username>amitsaha</username>
</author>
<thread dsq:id="4418210173" />
</post>
<post dsq:id="2424266639">
<id />
<message><![CDATA[<p>The other nice thing about FiniteSet over the builtin set is that + does union on FiniteSets (this irks me to no end that this doesn't work with the builtin set).</p>]]></message>
<createdAt>2015-12-24T06:59:00Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<thread dsq:id="4418210173" />
<parent dsq:id="2423865147" />
</post>
<post dsq:id="2686501673">
<id />
<message><![CDATA[<p>Thanks for writing this. I'm about to make a python course and was trying to decide between 2 or 3. I choose 3 and this just confirms more that it was probably the right decision.</p>]]></message>
<createdAt>2016-05-20T16:16:54Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Nick Walter</name>
<isAnonymous>false</isAnonymous>
<username>MadeUpByPeople</username>
</author>
<thread dsq:id="4777005575" />
</post>
<post dsq:id="2686618560">
<id />
<message><![CDATA[<p>I hope this forces the inevitable Python 2.8 to release sooner than later. Many want it, but nobody's been pushed far enough to actually go through with it.</p>]]></message>
<createdAt>2016-05-20T17:10:49Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Peter Shinners</name>
<isAnonymous>false</isAnonymous>
<username>shredwheat</username>
</author>
<thread dsq:id="4777005575" />
</post>
<post dsq:id="2686783095">
<id />
<message><![CDATA[<p>Python 3 not being backward compatible with Python 2 made it fail.</p>]]></message>
<createdAt>2016-05-20T18:35:42Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>SebastianBassi</name>
<isAnonymous>false</isAnonymous>
<username>SebastianBassi</username>
</author>
<thread dsq:id="4777005575" />
</post>
<post dsq:id="2686809007">
<id />
<message><![CDATA[<p>Maybe python3 needs a print statement.... That would motivate me to move...</p>]]></message>
<createdAt>2016-05-20T18:51:27Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Marcos</name>
<isAnonymous>false</isAnonymous>
<username>disqus_r3BCDwPVau</username>
</author>
<thread dsq:id="4777005575" />
</post>
<post dsq:id="2686850753">
<id />
<message><![CDATA[<p>I have seen pretty good Python 3 support. Since coming to Python a year and a half ago, I don't believe I've had much disappointment with needing a Python 2 library. I wrote all my code in Python 3. Sometimes old examples are annoying, and it's annoying when a respectable blogger writes example code with Python 2, but I've been able to succeed by writing off the few Python 2-only libraries I come across as "abandoned" for now even if they might technically be getting commits. I think the worst scenario was for data scientists and professors, but I think they's changing too. I really enjoy 3, and when I notice something wouldn't have been possible as simply in 2, I'm always surprised by the holdouts.</p>]]></message>
<createdAt>2016-05-20T19:16:51Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Dan Wolf</name>
<isAnonymous>false</isAnonymous>
<username>disqus_FlkSswMEPA</username>
</author>
<thread dsq:id="4777005575" />
</post>
<post dsq:id="2686854816">
<id />
<message><![CDATA[<p>I'm not meaning to be snarky, but I am legitimately curious as to what annoys you. Is it that your fingers are just programmed to not hit parentheses? Or is it that you like the aesthetics of a keyword over a function? To me it seems unimportant, but I can understand both the aesthetic argument as well as the opposite (that less keywords is simpler).</p>]]></message>
<createdAt>2016-05-20T19:19:18Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Dan Wolf</name>
<isAnonymous>false</isAnonymous>
<username>disqus_FlkSswMEPA</username>
</author>
<thread dsq:id="4777005575" />
<parent dsq:id="2686809007" />
</post>
<post dsq:id="2687082482">
<id />
<message><![CDATA[<p>when using python for debugging, for example<br>or if I have a variable somewhere in my code<br>I have to type print then ( then END then )</p><p>it really annoys.</p><p>I know the advantages of the print function. But at least to my habits typing, it annoys.<br>And really, from __past__ import print_statement would not be the end of the world.</p><p>how often does one *REALY* need to change the behavour of the print function ?</p>]]></message>
<createdAt>2016-05-20T21:41:04Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Marcos</name>
<isAnonymous>false</isAnonymous>
<username>disqus_r3BCDwPVau</username>
</author>
<thread dsq:id="4777005575" />
<parent dsq:id="2686854816" />
</post>
<post dsq:id="2687291376">
<id />
<message><![CDATA[<p>I learned Python 3 before Python 2, so I was programmed for parentheses, but once I had to use Python 2 for a class on a virtual machine. Ever since, *every* time I have to type those parentheses, I get annoyed at the stupid regression. Parenthesis-less print is one of my favorite things about Groovy. It would be a major plus for making Python feel easy and modern.</p>]]></message>
<createdAt>2016-05-21T00:50:31Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Noumenon72</name>
<isAnonymous>false</isAnonymous>
<username>noumenon72</username>
</author>
<thread dsq:id="4777005575" />
<parent dsq:id="2686854816" />
</post>
<post dsq:id="2687301654">
<id />
<message><![CDATA[<p>I somewhat agree with you. Changing print has always felt like a huge impediment to people transitioning to Python 3, for relatively little gain. I also feel that the "you can now overwrite 'print'" is a stupid argument, which should never have been made. Overwriting builtin functions is generally an antipattern (unless it's a method name).</p><p>The real reason to change print to a function is that, syntactically, the print statement was a wart on the language. It was the only place in the language where a trailing comma was syntactically significant (think about that for a moment). The syntax to print to a file was obscure and difficult to remember. And (and I literally just learned about this), it has some weird rules for when it does and doesn't print a space before objects.</p><p>print() the function just works like every other function in Python. You call it, and it prints its arguments. If you want to customize that behavior there are keyword arguments. I don't have any pedagogical experience, but I suspect this consistency helps people who are new to the language.</p><p>As to habits, well, if you're using Python, you're probably typing a lot of parentheses anyway. It actually ends up being not too bad (but I'm a fast typer, so maybe I'm biased).</p>]]></message>
<createdAt>2016-05-21T01:01:05Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<thread dsq:id="4777005575" />
<parent dsq:id="2687082482" />
</post>
<post dsq:id="2687322284">
<id />
<message><![CDATA[<p>I guess I can see that. To me it seems fairly unimportant, but then the only language I've used without them on the print was classic VBscript which nobody compliments, of course. Perhaps I'd really enjoy them.</p>]]></message>
<createdAt>2016-05-21T01:22:52Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Dan Wolf</name>
<isAnonymous>false</isAnonymous>
<username>disqus_FlkSswMEPA</username>
</author>
<thread dsq:id="4777005575" />
<parent dsq:id="2687291376" />
</post>
<post dsq:id="2687375082">
<id />
<message><![CDATA[<p>Good article, I agree with pretty much everything. Except one thing:</p><p>&gt; (keep in mind that you're using open source libraries without paying for them—the developers literally owe you nothing)</p><p>I would point out that even though users typically didn't pay for open source software using money, it is not true that developers do not owe the users anything. Because if developers didn't owe users anything, then we can literally remove sympy from pypi and github, destroy the website, remove the mailinglist and so on. And still sleep well at night. So in fact, we, as developers, owe users quite a bit. Users pay with their time and by them promoting the library to other people. Thus, developers get more users and ultimately also more developers. In return, developers owe the users a commitment, that the library will be maintained responsibly. It doesn't mean that users own my time. It doesn't mean that I *have* to spend my time fixing a particular bug. But it does mean that I will do my best, withing reasonable limits, to help (perhaps by directing the user to another developer who can help). It's an implicit agreement/contract --- i.e. I never signed up anywhere that I have to help, but I want my library to be used, and I want users to know that they will get help. Also, if developers start behaving that they don't owe anything, i.e. literally they stop caring about users, then users will stop using the library, or somebody will fork it and create a better community.</p><p>So yes, developers owe something. But you are right, that developers do not owe money nor time nor work, but they do owe good will, and at least enough time to execute on the good will (as I said, at least directing users in the right direction, or more if developers have time).</p><p>My other comment is that PEP 394 is a major mistake, as that makes all distributions (including Debian and Ubuntu) to still use Python 2 for `python`. They need to change that and make `python` to point to the latest version that the user installs (or let the user choose), but it should not point to Python 2.7 when 3.5 is installed.</p>]]></message>
<createdAt>2016-05-21T02:18:50Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Ondřej Čertík</name>
<isAnonymous>false</isAnonymous>
<username>ocertik</username>
</author>
<thread dsq:id="4777005575" />
</post>
<post dsq:id="2687401545">
<id />
<message><![CDATA[<p>If the maintainers really wanted people to move to v3 as much as they suggested that they do, then "import ___ from __future__" would have never been allowed to happen.</p>]]></message>
<createdAt>2016-05-21T02:47:06Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Brian Miller</name>
<isAnonymous>false</isAnonymous>
<username>disqus_y6xcymGvdn</username>
</author>
<thread dsq:id="4777005575" />
</post>
<post dsq:id="2687533628">
<id />
<message><![CDATA[<p><a href="https://www.python.org/dev/peps/pep-0404/" rel="nofollow noopener" title="https://www.python.org/dev/peps/pep-0404/">https://www.python.org/dev/...</a></p>]]></message>
<createdAt>2016-05-21T05:39:22Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Michael Blume</name>
<isAnonymous>false</isAnonymous>
<username>michael_blume</username>
</author>
<thread dsq:id="4777005575" />
<parent dsq:id="2686618560" />
</post>
<post dsq:id="2687584508">
<id />
<message><![CDATA[<p>I would *love* to move off Python 2.7. I just need Google to support 3.x on Google App Engine...</p>]]></message>
<createdAt>2016-05-21T07:00:48Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Jim Karabatsos</name>
<isAnonymous>false</isAnonymous>
<username>jim_karabatsos</username>
</author>
<thread dsq:id="4777005575" />
</post>
<post dsq:id="2687608562">
<id />
<message><![CDATA[<p>Yes, you are right. I actually think that all people owe goodwill to all other people in all aspects of life. In that sentence, I meant "owe" strictly in the economic sense (no payment has been rendered, so no services are due). Hence my use of "literally." I don't think it's fair (economically) for users of open source to make demands on those who provide it. But at the same time, the reason to provide open source in the first place is that of goodwill, and you shouldn't break that goodwill, even if there is no economic cost to doing it. It is a bit paradoxical, especially if you think economics are the only reason for doing things. I could probably write a whole essay on "why I contribute to open source."</p><p>Now that you bring this up, this sentence doesn't sit well with me, because I actually dislike it when people take this attitude, mostly because it does lead to this confusion of economic "owing" and goodwill "owing." So I'm going to delete the "owe you" part completely, and make it clear that I am only talking about payment of money.</p>]]></message>
<createdAt>2016-05-21T07:42:32Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<thread dsq:id="4777005575" />
<parent dsq:id="2687375082" />
</post>
<post dsq:id="2688142144">
<id />
<message><![CDATA[<p>To fully appreciate Ondřej's comment, it helps to read David Graeber's book "Debt: The First 5000 Years". It explains very well how informal and imprecise debt between members of a community was the backbone of social relations before the invention of monetary economy, whose main innovation was to make debt precisely measurable. That also opened the door to the idea of paying back a debt exactly, with no obligation left. And that in turn made anonymous economic relations possible.</p><p>Your statement that OS developers owe nothing to their users is true in the sense of the formal monetary economy and the laws that are based on it. What Ondřej refers to is the informal imprecise debt implicit in all non-anonymous human relations, which is what OS communities are based on.</p><p>Ultimately, this whole discussion is about attributing technical debt in the OS universe. Everybody would like to default on his/her own technical debt and modernize one's code without the burden of maintaining compatibility. But everyone would also like their dependencies to remain stable, and thus their authors to invest the additional effort to maintain compatibility. What we see happening right now in the Python community is a transition. Initially, the Python core team and the authors of the next layer of core libraries assumed the technical debt of the 2-&gt;3 transition. Now that most of the big libraries have finished the move to 3, they decide that the various small players who are still in the Python 2 world are not worth supporting any more.</p><p>This is of course a very understandable decision from an economic point of view. Developer resources are limited, and need to be used wisely. But there is a hidden cost in terms of reputation. Many small projects will simply disappear because they don't have the means to move to Python 3. Their authors and users will be disappointed by the Python community, and probably move on elsewhere (assuming they find some good elsewhere). It's very hard to estimate how many people are concerned. They are not very visible individually, but their total number might well be large, in particular in the scientific user community, where lots of people work with highly specialized and scarcely maintained code.</p>]]></message>
<createdAt>2016-05-21T16:53:05Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Konrad Hinsen</name>
<isAnonymous>false</isAnonymous>
<username>khinsen</username>
</author>
<thread dsq:id="4777005575" />
<parent dsq:id="2687608562" />
</post>
<post dsq:id="2688455504">
<id />
<message><![CDATA[<p>&gt; It often feels like core Python itself doesn't really want people to use Python 3. It's little things, like docs links that redirect to Python 2 [...]</p><p>This is now done: <a href="https://github.com/python/psf-salt/pull/83" rel="nofollow noopener" title="https://github.com/python/psf-salt/pull/83">https://github.com/python/p...</a></p>]]></message>
<createdAt>2016-05-21T21:06:29Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Berker Peksag</name>
<isAnonymous>false</isAnonymous>
<username>berkerpeksag</username>
</author>
<thread dsq:id="4777005575" />
</post>
<post dsq:id="2689266006">
<id />
<message><![CDATA[<p>I've seen that Google do offer Python 3.4 in what they call the GAE flexible environment, which of course is beta. Anyone tried that out yet? Experiences?</p><p><a href="https://cloud.google.com/appengine/docs" rel="nofollow noopener" title="https://cloud.google.com/appengine/docs">https://cloud.google.com/ap...</a></p>]]></message>
<createdAt>2016-05-22T14:06:28Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Fredrik J</name>
<isAnonymous>false</isAnonymous>
<username>disqus_SdWszV21iv</username>
</author>
<thread dsq:id="4777005575" />
<parent dsq:id="2687584508" />
</post>
<post dsq:id="2690593914">
<id />
<message><![CDATA[<p>Why should everybody stop supporting Python 2.7 by date X? If you don't want to support it, stop supporting it. It's as simple as that. Why wait for everybody else?  I don't get it.</p>]]></message>
<createdAt>2016-05-23T11:21:56Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>v@disqus</name>
<isAnonymous>false</isAnonymous>
<username>disqus_q9gf1Zvo5B</username>
</author>
<thread dsq:id="4777005575" />
</post>
<post dsq:id="2696661361">
<id />
<message><![CDATA[<p>A fairly meaningless comment - unless this is a genuine prediction of the future?!</p>]]></message>
<createdAt>2016-05-26T15:23:54Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>gamesbook</name>
<isAnonymous>false</isAnonymous>
<username>gamesbook</username>
</author>
<thread dsq:id="4777005575" />
<parent dsq:id="2686783095" />
</post>
<post dsq:id="2696668598">
<id />
<message><![CDATA[<p>Yes; any transition will cause a loss in support.  Every "organisation" (in the broadest sense of the word) loses people when it changes its policies or products or service levels etc. etc.  The one saving grace in the open source world is that if a project - however small - is crucial to someone somewhere, there is a good chance that maintenance/upgrades will be taken over.  You may be surprised just how well the scientific user community (which is where I work) will be able to adapt to this change...</p>]]></message>
<createdAt>2016-05-26T15:28:13Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>gamesbook</name>
<isAnonymous>false</isAnonymous>
<username>gamesbook</username>
</author>
<thread dsq:id="4777005575" />
<parent dsq:id="2688142144" />
</post>
<post dsq:id="2696669559">
<id />
<message><![CDATA[<p>I usually try to make my code compatible to both 2.7 and &gt;3.4 to be useful to "most" people. Most of the bigger scientific projects do that at the moment, but yeah, ensuring 2.7 compatibility is an extra inconvenience (for me) :P. I am looking forward not to worry about 2.7 anymore (like most people don't worry about 2.6 anymore) :)</p>]]></message>
<createdAt>2016-05-26T15:28:45Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Sebastian Raschka</name>
<isAnonymous>false</isAnonymous>
<username>seraschka</username>
</author>
<thread dsq:id="4777005575" />
<parent dsq:id="2686501673" />
</post>
<post dsq:id="2863597433">
<id />
<message><![CDATA[<p>Very interesting post. I was just looking into hash functions (I've never formally learned what the topic entails), and since I'm most familiar with Python this post explained quite a bit, especially your early mathematical points.</p>]]></message>
<createdAt>2016-08-28T12:33:12Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>bjd2385</name>
<isAnonymous>false</isAnonymous>
<username>bjd2385</username>
</author>
<thread dsq:id="4523624031" />
</post>
<post dsq:id="2885296747">
<id />
<message><![CDATA[<p>Doing Math with phyton seems like an easy task for someone to accomplish. It's just that, they can be able to nourish the true power of phyton programming language in order to do some equations in mathematics.</p>]]></message>
<createdAt>2016-09-10T00:57:05Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>true</isSpam>
<author>
<name>academic assignment writing</name>
<isAnonymous>false</isAnonymous>
<username>disqus_Za0zjBCO7g</username>
</author>
<thread dsq:id="4418210173" />
</post>
<post dsq:id="2910457164">
<id />
<message><![CDATA[<p>Very nice!  This post is a good counter-example of everything I meant in my original tweets.  Here's what I mean... it's very easy to start a discussion by introducing lists.  For example, you make a list of pets or something:</p><p>     pets = ['cat', 'dog', 'hamster']<br>     pets.append('snake')<br>     print(len(pets))</p><p>and then tuples get introduced as a "read-only list":</p><p>    pets = ('cat', 'dog', 'hamster')<br>    pets.append('snake')    # Error. Immutable...</p><p>Argh!  No.  No. No.   This is my red-flag. It's the wrong mental model for how tuples usually get used.  Tuples have more nuance.  Yes, they are list like, but it's way more common to use a tuple as a "record" or "structure" or something where related values get grouped together.</p><p>   date = (2016, 9, 22)</p><p>And as you cover, you might do all sorts of stuff with that:</p><p>   year, month, day = date                       # Unpacking in variables<br>   return (year, month, day)                      # Return multiple values<br>   m = { (year, month, day) : 'meeting' }   # Composite dictionary key</p><p>I like the parse tree example.  It's maybe not a record, but you're definitely not thinking about "lists" there (at least I don't think so).</p>]]></message>
<createdAt>2016-09-22T13:54:59Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>David Beazley</name>
<isAnonymous>false</isAnonymous>
<username>david_beazley</username>
</author>
<thread dsq:id="5163193865" />
</post>
<post dsq:id="2910533921">
<id />
<message><![CDATA[<p>Your example 1 doesn't show a tuple on the left hand side of the assignment (same for footnote 2). That is actually pattern matching syntax.</p><p>For example:</p><p>        &gt;&gt;&gt; bar=(a,b)=[1,2]<br>        &gt;&gt;&gt; a<br>    1<br>    &gt;&gt;&gt; b<br>    2<br>    &gt;&gt;&gt; bar<br>    [1, 2]</p>]]></message>
<createdAt>2016-09-22T14:41:13Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Danno</name>
<isAnonymous>false</isAnonymous>
<username>DannoHung</username>
</author>
<thread dsq:id="5163193865" />
</post>
<post dsq:id="2910695195">
<id />
<message><![CDATA[<p>Yeah I know it's not really a tuple, especially since Python's pattern matching is woefully limited—only identifiers and other "tuples" can go in those parentheses. But it looks like one, and if you're teaching newcomers to the language, it's not too incorrect to say that is one, thanks to the relative syntactic consistency of the language. </p>]]></message>
<createdAt>2016-09-22T16:15:36Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<thread dsq:id="5163193865" />
<parent dsq:id="2910533921" />
</post>
<post dsq:id="2910727545">
<id />
<message><![CDATA[<p>Excellent post and discussion. For me, tuples clicked in my mind when I read the following comment in SO click:</p><p>"Tuples are useful when position has relevance - the best example comes from coordinates in mathematics, which even uses the same syntax: (x, y, z)"</p><p><a href="http://stackoverflow.com/questions/1708510/python-list-vs-tuple-when-to-use-each#comment22973344_1708610" rel="nofollow noopener" title="http://stackoverflow.com/questions/1708510/python-list-vs-tuple-when-to-use-each#comment22973344_1708610">http://stackoverflow.com/qu...</a></p><p>I found that analogy helpful for beginners:<br><a href="http://swcarpentry.github.io/training-course/2015/02/mutable-immutable-python-concept-map/" rel="nofollow noopener" title="http://swcarpentry.github.io/training-course/2015/02/mutable-immutable-python-concept-map/">http://swcarpentry.github.i...</a><br>What do you think?</p>]]></message>
<createdAt>2016-09-22T16:33:26Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>CAChemE</name>
<isAnonymous>false</isAnonymous>
<username>CAChemE</username>
</author>
<thread dsq:id="5163193865" />
</post>
<post dsq:id="2910803358">
<id />
<message><![CDATA[<p>If you start with mutable and then say "but what if you want it to be immutable", it's unmotivated, because no one starts off thinking "I need this to be immutable". They might think they need hashablility, but that's distinct concept. The benefits of immutability are more hidden. You aren't, especially as a beginner, going to think you "need" it from the get go. It's better start with immutable, and then motivate "but what if you need mutability".</p>]]></message>
<createdAt>2016-09-22T17:15:58Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<thread dsq:id="5163193865" />
<parent dsq:id="2910457164" />
</post>
<post dsq:id="2912567309">
<id />
<message><![CDATA[<p>Hi,</p><p>Your footnote 4, "t = (1,2, [3, 4]) ; t[2] += [5,6]" raises an error but actually ends up modifying "t".</p><p>Just tested in the REPL on Python 2.7.11 and 3.5.1.</p>]]></message>
<createdAt>2016-09-23T11:25:09Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Pierre de Buyl</name>
<isAnonymous>false</isAnonymous>
<username>pierredebuyl</username>
</author>
<thread dsq:id="5163193865" />
</post>
<post dsq:id="2931678541">
<id />
<message><![CDATA[<p>At what point does Python 3 force the override of __hash__ if you've defined __eq__?  E.g when would your</p><p>AlwaysEqual class fail?</p>]]></message>
<createdAt>2016-10-03T20:26:54Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Mark Lawrence</name>
<isAnonymous>false</isAnonymous>
<username>breamoreboy</username>
</author>
<thread dsq:id="4523624031" />
</post>
<post dsq:id="2931696020">
<id />
<message><![CDATA[<p>That's a good catch. I originally wrote this post in Python 2. The example does indeed fail in Python 3. More specifically, if you override __eq__, Python 3 automatically sets __hash__ to None. I'll update the post to make this more clear.</p>]]></message>
<createdAt>2016-10-03T20:38:13Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>asmeurer</name>
<isAnonymous>false</isAnonymous>
<username>asmeurer</username>
</author>
<thread dsq:id="4523624031" />
<parent dsq:id="2931678541" />
</post>
<post dsq:id="2935953477">
<id />
<message><![CDATA[<p>These are all excellent points.</p><p>If I can pile on my own gripes:</p><p>1) Once I've requested changes, the front page has a status of "nedbat has requested changes" (or something).  The author pushes some more commits.  Now how do I find the changes I've requested? I have to flip to the diff page and Cmd-F search the page for my name!</p><p>2) If the author has fixed three of my seven requests, but hasn't quite gotten it right on the other four, how do I indicate that?  We've reverted to old-school comment conventions.</p><p>3) Now more often than not, the notification emails don't link to a specific place in the pull request. I get the "We can't find those commits" message. GitHub: you sent me the email based on something that *just* happened in the pull request!! How can the link already be broken?</p><p>To be honest, this feels like a feature that was rushed out the door in time for the annual conference.</p>]]></message>
<createdAt>2016-10-06T09:48:29Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Ned Batchelder</name>
<isAnonymous>false</isAnonymous>
<username>nedbat</username>
</author>
<thread dsq:id="5200134029" />
</post>
<post dsq:id="2935961195">
<id />
<message><![CDATA[<p>Changing the default behaviour of inline comments is the one that really gets me. All they had to do to make that transition seamless was to keep the old behaviour of immediate comments as the default, and add a new button that transitioned between the two states: starting a new review (if there wasn't one active) and finishing the current review (if a review was already in progress).</p><p>That way folks that only pressed the old button would always stay in "Immediate commenting" mode, while folks that switched to delayed commenting would have a "Complete review" button readily available every time they made a comment.</p><p>(FWIW I actually like being able to do proper batched reviews ala Gerrit and Rietveld, but changing a long established default to something a lot of enterprises are likely to prefer without any notice looks suspiciously like a Business Development group winning a UX argument they should have conceded)</p>]]></message>
<createdAt>2016-10-06T09:59:18Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Nick Coghlan</name>
<isAnonymous>false</isAnonymous>
<username>ncoghlan</username>
</author>
<thread dsq:id="5200134029" />
</post>
<post dsq:id="2936701365">
<id />
<message><![CDATA[<blockquote>The hash of an object must not change across the object's lifetime (in other words, a hashable object should be immutable).</blockquote><p></p><p>There is no requirement like this in python. The <a href="https://docs.python.org/3/reference/datamodel.html#object.__hash__" rel="nofollow noopener" title="https://docs.python.org/3/reference/datamodel.html#object.__hash__">docs say</a>: <i>The only required property is that objects which compare equal have the same hash value.</i> You are correct though that it needs to be done with caution.</p><p></p><blockquote>Python considers it fair game to swap out two identical immutable (i.e., hashable) objects at any time.</blockquote><p> No, that would be really dangerous. Python only does it to objects of builtin classes, where it knows exactly what they represent and where the user cannot change anything. Python would never swap objects of user-defined classes without an explicit instruction from the programmer. However Python would consider such a pair of objects to be a match for purposes of dictionary lookup or set inclusion.</p>]]></message>
<createdAt>2016-10-06T18:42:23Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>true</isSpam>
<author>
<name>Pkch</name>
<isAnonymous>false</isAnonymous>
<username>pkch1</username>
</author>
<thread dsq:id="4523624031" />
</post>
<post dsq:id="2951337187">
<id />
<message><![CDATA[<p>Why there is no tuple comprehension?</p>]]></message>
<createdAt>2016-10-15T03:29:01Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Denis Akhiyarov</name>
<isAnonymous>false</isAnonymous>
<username>denisakhiyarov</username>
</author>
<thread dsq:id="5163193865" />
</post>
<post dsq:id="3078030901">
<id />
<message><![CDATA[<p>The "tuple as record" argument is strengthened when one considers how similar a namedtuple is with a Struct in other languages, like Ruby:</p><p>Ruby:</p><p><a href="http://Struct.new" rel="nofollow noopener" title="Struct.new">Struct.new</a>('Person', :name, :age)<br>person = Struct::<a href="http://Person.new" rel="nofollow noopener" title="Person.new">Person.new</a>('Alice', 23)</p><p>Python:<br>from collections import namedtuple</p><p>Person = namedtuple('Person', ['name', 'age'])<br>person = Person('Alice', 23)</p>]]></message>
<createdAt>2017-01-01T14:48:49Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Yoong Kang Lim</name>
<isAnonymous>false</isAnonymous>
<username>limyoongkang</username>
</author>
<thread dsq:id="5163193865" />
</post>
<post dsq:id="3145522808">
<id />
<message><![CDATA[<p>Thank you for sharing.You have written a descriptive review.It creates enthusiasm to read the book.Python is one the strong cross-platform language.Both the programmers and the web developer love this very much.It is a 5th generation programming language so it is very effective.For learning it people need a good and trusted resource.I think this book is informative and trustworthy.So, it may help them.</p>]]></message>
<createdAt>2017-02-09T08:11:21Z</createdAt>
<isDeleted>true</isDeleted>
<isSpam>false</isSpam>
<author>
<name>ffgfdsdgddff</name>
<isAnonymous>false</isAnonymous>
<username>$241704682</username>
</author>
<thread dsq:id="4418210173" />
</post>
<post dsq:id="3153997564">
<id />
<message><![CDATA[<p>Thank you for sharing.You have written a descriptive review.It creates enthusiasm to read the book.Python is one the strong cross-platform language.Both the programmers and the web developer love this very much.It is a 5th generation programming language so it is very effective.For learning it people need a good and trusted resource.I think this book is informative and trustworthy.So, it may help them.</p>]]></message>
<createdAt>2017-02-14T06:40:58Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>true</isSpam>
<author>
<name>theactuarialexam.com</name>
<isAnonymous>false</isAnonymous>
<username>charlesllogue</username>
</author>
<thread dsq:id="4418210173" />
</post>
<post dsq:id="3216848035">
<id />
<message><![CDATA[<p>I am using Wordpress for my blog but since my blogs are just about my random thoughts or ranting about my daily life occurrence, it is okay. And I am not really familiar with Github.</p>]]></message>
<createdAt>2017-03-22T13:33:48Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>help with writing college essa</name>
<isAnonymous>false</isAnonymous>
<username>disqus_qdj29kLxNH</username>
</author>
<thread dsq:id="2554470098" />
</post>
<post dsq:id="3245842128">
<id />
<message><![CDATA[<p>Thank you for this review, it is a great help for my decision to check out the ebook. I am one of the millions of self-learners of python out here.</p>]]></message>
<createdAt>2017-04-08T03:07:51Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>true</isSpam>
<author>
<name>college papers for sale</name>
<isAnonymous>false</isAnonymous>
<username>stan1943</username>
</author>
<thread dsq:id="4418210173" />
</post>
<post dsq:id="3357184203">
<id />
<message><![CDATA[<p>Thanks for the article, you’ve done a really great job. By the way, if you don’t mind, I can suggest this guide — another effective way to host your project on Git - <a href="https://mobirise.com/help/github-pages-tutorial-301.html" rel="nofollow noopener" title="https://mobirise.com/help/github-pages-tutorial-301.html">https://mobirise.com/help/g...</a></p>]]></message>
<createdAt>2017-06-13T09:56:17Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>true</isSpam>
<author>
<name>Henry Henderson</name>
<isAnonymous>false</isAnonymous>
<username>HenryHendersonn</username>
</author>
<thread dsq:id="2554470098" />
</post>
<post dsq:id="3359309734">
<id />
<message><![CDATA[<p>Thanks for the article, you’ve done a really great job. By the way, if you don’t mind, I can suggest this guide — another effective way to host your project on Git - <a href="https://mobirise.com/help/github-pages-tutorial-301.html" rel="nofollow noopener" title="https://mobirise.com/help/github-pages-tutorial-301.html">https://mobirise.com/help/g...</a></p>]]></message>
<createdAt>2017-06-14T07:49:10Z</createdAt>
<isDeleted>true</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Tobias Crops</name>
<isAnonymous>false</isAnonymous>
<username>$255093925</username>
</author>
<thread dsq:id="2554470098" />
</post>
<post dsq:id="3364752500">
<id />
<message><![CDATA[<p>Thanks for the article, you’ve done a really great job. By the way, if you don’t mind, I can suggest this guide — another effective way to host your project on Git - <a href="http://mobirisegithubblog.blogspot.com" rel="nofollow noopener" title="mobirisegithubblog.blogspot.com">mobirisegithubblog.blogspot...</a></p>]]></message>
<createdAt>2017-06-16T07:52:00Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Tobias Crops</name>
<isAnonymous>false</isAnonymous>
<username>tobiascrops</username>
</author>
<thread dsq:id="2554470098" />
</post>
<post dsq:id="3370791877">
<id />
<message><![CDATA[<p>Great tutorial for doctr! You might actually want to consider adding a link to this blog post quite high in the README of doctr.</p>]]></message>
<createdAt>2017-06-19T23:41:34Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Björn Dahlgren</name>
<isAnonymous>false</isAnonymous>
<username>bjrndahlgren</username>
</author>
<thread dsq:id="5924739795" />
</post>
<post dsq:id="3442607874">
<id />
<message><![CDATA[<p>Great article! We must really pay attention to these details when implementing custom hashes.</p>]]></message>
<createdAt>2017-07-30T03:23:55Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Erick Mendonça</name>
<isAnonymous>false</isAnonymous>
<username>erickmendonca</username>
</author>
<thread dsq:id="4523624031" />
</post>
<post dsq:id="3556282445">
<id />
<message><![CDATA[<p>Thanks a lot for this post! Clarified a lot of concepts.</p>]]></message>
<createdAt>2017-10-07T22:31:56Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>false</isSpam>
<author>
<name>Ignacio</name>
<isAnonymous>false</isAnonymous>
<username>disqus_0kdNl9Iq3G</username>
</author>
<thread dsq:id="4523624031" />
</post>
<post dsq:id="3597925284">
<id />
<message><![CDATA[<p>I wish to indicate because of you only to bail me out of this specific trouble.As a consequence of checking through the net and meeting systems that were not beneficial, I thought my life was finished</p><p><a href="https://www.besanttechnologies.com/training-courses/python-training-institute-in-bangalore" rel="nofollow noopener" title="https://www.besanttechnologies.com/training-courses/python-training-institute-in-bangalore">https://www.besanttechnolog...</a></p>]]></message>
<createdAt>2017-11-03T06:13:34Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>true</isSpam>
<author>
<name>Rose Bk</name>
<isAnonymous>false</isAnonymous>
<username>rose_bk</username>
</author>
<thread dsq:id="4777005575" />
</post>
<post dsq:id="3598105007">
<id />
<message><![CDATA[<p>⦁Your good knowledge and kindness in playing with all the pieces were very useful. I don’t know what I would have done if I had not encountered such a step like this.<a href="https://www.besanttechnologies.com/training-courses/oracle-training" rel="nofollow noopener" title="https://www.besanttechnologies.com/training-courses/oracle-training">"Oracle Training in Bangalore"</a></p>]]></message>
<createdAt>2017-11-03T10:35:01Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>true</isSpam>
<author>
<name>renith harsan</name>
<isAnonymous>false</isAnonymous>
<username>renithharsan</username>
</author>
<thread dsq:id="4777005575" />
</post>
<post dsq:id="3840197446">
<id />
<message><![CDATA[<p>I appreciate your work on Data Science. It's such a wonderful read on Data Science. Keep sharing stuffs like this. I am also educating people on similar technologies so if you are interested to know more you can watch this:- <br><a href="https://www.youtube.com/watch?v=1ek7IdGhbXI" rel="nofollow noopener" title="https://www.youtube.com/watch?v=1ek7IdGhbXI">https://www.youtube.com/wat...</a></p>]]></message>
<createdAt>2018-04-05T11:55:45Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>true</isSpam>
<author>
<name>Claudia Alves</name>
<isAnonymous>false</isAnonymous>
<username>disqus_6p97qiHR5e</username>
</author>
<thread dsq:id="4777005575" />
</post>
<post dsq:id="3841466390">
<id />
<message><![CDATA[<p>The Alternative To A Mac Upgrade</p><p>When you are using a Mac sometimes you can notice that over time your computer will be slower with a bit more lag than you are used to and that's because sometimes information gets truly clogged up and starts overlapping and really destroying the functions that should perform normally.  You do not need to upgrade your Mac anymore not with Detox your Mac.  What this program does is it truly helps to clean out everything in your Mac and make it function better and faster than it has in a long time.  Sometimes even restoring the factory quickly you had when you bought the computer to begin with.  When you use a computer it becomes absolutely filled up with useless files and copies of files which you thought you might have gotten rid of but the fact of the matter is that everything is stored on a computer until you can really get in there and clean it with a product such as Detox my Mac simply because it gets down deep into the computer to places that a normal Mac user wouldn't even go to look for things.  Understanding full well that Mac computer are not cheap means that instead of getting an even more expensive upgrade you can actually use this product to help clean out everything that need to be cleaned out and get your computer up and running at peak performance. <br>Within just a few seconds after starting the program you can have it go through hundreds of thousands of files getting rid of everything that is useless. Having a hard drive full of useless information really does make things so much harder on the computer itself and can be a true frustration to someone who really needs to just get the job done on the computer but instead they are having to wait longer and longer periods of time for loads and downloads or even for the initial startup of the computer before they can get anything done.  That's the great thing about Detox my Mac is that it takes your computer and goes through file by file and everything that is useless it will get rid of it and help restore the Mac back to a point where you can actually get what you need to get done without issues or waiting or even the dreaded crashing.  It's not the standard files it goes through it also goes through the logs which can totally slow down the whole function of the computer even though they aren't needed except for in development states that doesn't seem to matter, this program will truly get in there and with an intelligent nature it will get rid of all the log files.  It will also go through the language files and get rid of all the unused language files as well.  This is very important because it can take a huge portion of your hard drive just storing unused languages and this gets rid of all of it.<br>You will be getting with the Detox my Mac program the most innovative and powerful product in the world when it comes to this kind of software.  You get absolutely instant access to the program with a very quick download.  You will get totally free upgrades for life with this program as well which means that you will never again pay for another update like with most software you will pay a one time fee of $37.95 and you will have everything that you need at your finger tips.  You will have a safe and trusted program which is the industry leader in it's field, and that means that you get 24 hour a day 7 day a week support if any issue comes up.  You also get a 60 day money back guarantee which means that if for any reason you do not like what you've gotten or it didn't work as well as you'd expected in 2 months then you can return it for the full price you paid for it and not a cent less.  Detox my Mac is truly the best program you can get to help get your Mac back in factory fastness and standard. Read more here - <a href="http://detox-my-mac.com?1f5sd87f89S4DCS98D79Fs" rel="nofollow noopener" title="http://detox-my-mac.com?1f5sd87f89S4DCS98D79Fs">http://detox-my-mac.com?1f5...</a></p>]]></message>
<createdAt>2018-04-06T03:53:43Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>true</isSpam>
<author>
<name>geroge</name>
<isAnonymous>false</isAnonymous>
<username>disqus_HRXnOxmCzR</username>
</author>
<thread dsq:id="2554470098" />
</post>
<post dsq:id="3890734372">
<id />
<message><![CDATA[<p>Thanks for sharing the descriptive information on Python course. It’s really helpful to me since I'm taking Python training. Keep doing the good work and if you are interested to know more on Python, do check this Python tutorial.https://<a href="http://www.youtube.com/watch?v=e9p0_NB3WrM" rel="nofollow noopener" title="www.youtube.com/watch?v=e9p0_NB3WrM">www.youtube.com/watch?v=e9p...</a></p>]]></message>
<createdAt>2018-05-08T07:14:19Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>true</isSpam>
<author>
<name>Kritika Kapoor</name>
<isAnonymous>false</isAnonymous>
<username>disqus_KH5Qc74pzW</username>
</author>
<thread dsq:id="4523624031" />
</post>
<post dsq:id="3890756493">
<id />
<message><![CDATA[<p>I appreciate your work on Python. It's such a wonderful read on Python course. Keep sharing stuffs like this. I am also educating people on similar Python training so if you are interested to know more you can watch this Python tutorial:-<a href="https://www.youtube.com/watch?v=e9p0_NB3WrM" rel="nofollow noopener" title="https://www.youtube.com/watch?v=e9p0_NB3WrM">https://www.youtube.com/wat...</a></p>]]></message>
<createdAt>2018-05-08T07:53:57Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>true</isSpam>
<author>
<name>Kritika Kapoor</name>
<isAnonymous>false</isAnonymous>
<username>disqus_KH5Qc74pzW</username>
</author>
<thread dsq:id="4418210173" />
</post>
<post dsq:id="3890838236">
<id />
<message><![CDATA[<p>I appreciate your work on Python. It's such a wonderful read on Python course. Keep sharing stuffs like this. I am also educating people on similar Python training so if you are interested to know more you can watch this Python tutorial:-<a href="https://www.youtube.com/watch?v=e9p0_NB3WrM" rel="nofollow noopener" title="https://www.youtube.com/watch?v=e9p0_NB3WrM">https://www.youtube.com/wat...</a></p>]]></message>
<createdAt>2018-05-08T10:06:11Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>true</isSpam>
<author>
<name>Kritika Kapoor</name>
<isAnonymous>false</isAnonymous>
<username>disqus_KH5Qc74pzW</username>
</author>
<thread dsq:id="4418210173" />
</post>
<post dsq:id="3891004825">
<id />
<message><![CDATA[<p>Thanks for sharing the descriptive information on Python course. It’s really helpful to me since I'm taking Python training. Keep doing the good work and if you are interested to know more on Python, do check this Python tutorial.https://<a href="http://www.youtube.com/watch?v=e9p0_NB3WrM" rel="nofollow noopener" title="www.youtube.com/watch?v=e9p0_NB3WrM">www.youtube.com/watch?v=e9p...</a></p>]]></message>
<createdAt>2018-05-08T13:07:39Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>true</isSpam>
<author>
<name>malisha uday</name>
<isAnonymous>false</isAnonymous>
<username>malishauday</username>
</author>
<thread dsq:id="4418210173" />
</post>
<post dsq:id="3893933495">
<id />
<message><![CDATA[<p>Worthful Python tutorial. Appreciate a lot for taking up the pain to write such a quality content on Python course. Just now I watched this similar Python tutorial and I think this will enhance the knowledge of other visitors for sure. Thanks anyway.https://<a href="http://www.youtube.com/watch?v=e9p0_NB3WrM" rel="nofollow noopener" title="www.youtube.com/watch?v=e9p0_NB3WrM">www.youtube.com/watch?v=e9p...</a></p>]]></message>
<createdAt>2018-05-10T06:53:15Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>true</isSpam>
<author>
<name>devangna raj</name>
<isAnonymous>false</isAnonymous>
<username>devangnaraj</username>
</author>
<thread dsq:id="4523624031" />
</post>
<post dsq:id="3899686789">
<id />
<message><![CDATA[<p>This really has covered a great insight on Python. I found myself lucky to visit your page and came across this insightful read on Python tutorial. Please allow me to share similar work on Python training course . Watch and gain knowledge today.https://<a href="http://www.youtube.com/watch?v=e9p0_NB3WrM" rel="nofollow noopener" title="www.youtube.com/watch?v=e9p0_NB3WrM">www.youtube.com/watch?v=e9p...</a></p>]]></message>
<createdAt>2018-05-14T07:45:01Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>true</isSpam>
<author>
<name>Meenal Rajput</name>
<isAnonymous>false</isAnonymous>
<username>meenalrajput</username>
</author>
<thread dsq:id="4523624031" />
</post>
<post dsq:id="3913586625">
<id />
<message><![CDATA[<p>Thanks for sharing the descriptive information on python course. It’s really helpful to me since I'm taking python training. Keep doing the good work and if you are interested to know more on python, do check this python tutorial.<br><a href="https://www.youtube.com/watch?v=YJ8xP33nTOA" rel="nofollow noopener" title="https://www.youtube.com/watch?v=YJ8xP33nTOA">https://www.youtube.com/wat...</a></p>]]></message>
<createdAt>2018-05-23T13:08:26Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>true</isSpam>
<author>
<name>Jyoti Garg</name>
<isAnonymous>false</isAnonymous>
<username>disqus_FTCjPNyiBR</username>
</author>
<thread dsq:id="4523624031" />
</post>
<post dsq:id="4008790128">
<id />
<message><![CDATA[<p>Great post dear. It definitely has increased my knowledge on Spark. Please keep sharing similar write ups of yours. You can check this too for Spark tutrial as i have recorded this recently on Spark. and i'm sure it will be helpful to you.https://<a href="http://www.youtube.com/watch?v=8Kcu63H0d8c" rel="nofollow noopener" title="www.youtube.com/watch?v=8Kcu63H0d8c">www.youtube.com/watch?v=8Kc...</a></p>]]></message>
<createdAt>2018-07-27T12:23:22Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>true</isSpam>
<author>
<name>Claudia Alves</name>
<isAnonymous>false</isAnonymous>
<username>disqus_6p97qiHR5e</username>
</author>
<thread dsq:id="5163193865" />
</post>
<post dsq:id="4068636631">
<id />
<message><![CDATA[<p><a href="https://uploads.disquscdn.com/images/7a44a3fb410fd50d963d74c3041796e6ef4565fbc73e210e6f6463bc3ce4f9aa.jpg" rel="nofollow noopener" title="https://uploads.disquscdn.com/images/7a44a3fb410fd50d963d74c3041796e6ef4565fbc73e210e6f6463bc3ce4f9aa.jpg">https://uploads.disquscdn.c...</a> She's a perfect 10 A 4 with a 6-pack under her arm.</p>]]></message>
<createdAt>2018-08-30T15:23:20Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>true</isSpam>
<author>
<name>Anthea9308</name>
<isAnonymous>false</isAnonymous>
<username>anthea9308</username>
</author>
<thread dsq:id="5924739795" />
</post>
<post dsq:id="4108333868">
<id />
<message><![CDATA[<p>Very Impressive Python tutorial. The content seems to be pretty exhaustive and excellent and will definitely help in learning Python. I'm also a learner taken up Python training and I think your content has cleared some concepts of mine. While browsing for Python tutorials on YouTube i found this fantastic video on Python. Do check it out if you are interested to know more.:-<a href="https://www.youtube.com/watch?v=qgOXopu4n7c&amp;" rel="nofollow noopener" title="https://www.youtube.com/watch?v=qgOXopu4n7c&amp;">https://www.youtube.com/wat...</a></p>]]></message>
<createdAt>2018-09-22T08:54:51Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>true</isSpam>
<author>
<name>Manju Gupta</name>
<isAnonymous>false</isAnonymous>
<username>disqus_1L9OxnxT41</username>
</author>
<thread dsq:id="4418210173" />
</post>
<post dsq:id="4108398539">
<id />
<message><![CDATA[<p>Thanks for sharing the descriptive information on Python tutorial. It’s really helpful to me since I'm taking Python training. Keep doing the good work and if you are interested to know more on Python, do check this Python tutorial.-<a href="https://www.youtube.com/watch?v=qgOXopu4n7c&amp;" rel="nofollow noopener" title="https://www.youtube.com/watch?v=qgOXopu4n7c&amp;">https://www.youtube.com/wat...</a></p>]]></message>
<createdAt>2018-09-22T10:29:30Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>true</isSpam>
<author>
<name>Manju Gupta</name>
<isAnonymous>false</isAnonymous>
<username>disqus_1L9OxnxT41</username>
</author>
<thread dsq:id="2840498513" />
</post>
<post dsq:id="4113057031">
<id />
<message><![CDATA[<p>Thanks for sharing the descriptive information on Python tutorial. It’s really helpful to me since I'm taking Python training. Keep doing the good work and if you are interested to know more on Python, do check this Python tutorial.-<a href="https://www.youtube.com/watch?v=qgOXopu4n7c&amp;" rel="nofollow noopener" title="https://www.youtube.com/watch?v=qgOXopu4n7c&amp;">https://www.youtube.com/wat...</a></p>]]></message>
<createdAt>2018-09-25T10:50:20Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>true</isSpam>
<author>
<name>Manju Gupta</name>
<isAnonymous>false</isAnonymous>
<username>disqus_1L9OxnxT41</username>
</author>
<thread dsq:id="2840498513" />
</post>
<post dsq:id="4141379384">
<id />
<message><![CDATA[<p>Great presentation of Python form of blog and Python tutorial. Very helpful for beginners like us to understand Python course. if you're interested to have an insight on Python training do watch this amazing tutorial.:<a href="https://www.youtube.com/watch?v=HcsvDObzW2U" rel="nofollow noopener" title="https://www.youtube.com/watch?v=HcsvDObzW2U">https://www.youtube.com/wat...</a></p>]]></message>
<createdAt>2018-10-12T11:19:47Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>true</isSpam>
<author>
<name>Urmila pandey</name>
<isAnonymous>false</isAnonymous>
<username>urmilapandey</username>
</author>
<thread dsq:id="4418210173" />
</post>
<post dsq:id="4141419563">
<id />
<message><![CDATA[<p>Very Impressive Python tutorial. The content seems to be pretty exhaustive and excellent and will definitely help in learning Python course. I'm also a learner taken up Python training and I think your content has cleared some concepts of mine. While browsing for Python tutorials on YouTube i found this fantastic video on Python. Do check it out if you are interested to know more python training.:-<a href="https://www.youtube.com/watch?v=HcsvDObzW2U" rel="nofollow noopener" title="https://www.youtube.com/watch?v=HcsvDObzW2U">https://www.youtube.com/wat...</a></p>]]></message>
<createdAt>2018-10-12T11:57:54Z</createdAt>
<isDeleted>false</isDeleted>
<isSpam>true</isSpam>
<author>
<name>Deepika punja</name>
<isAnonymous>false</isAnonymous>
<username>deepikapunja</username>
</author>
<thread dsq:id="2840498513" />
</post>
</disqus>
