<html><body><a href="http://asmeurersympy.wordpress.com/2009/07/20/modifying-a-list-while-looping-through-it-in-python/">Every once in a while</a>, seemingly really simple Python code does something completely unexpected for me. Look at the following snippet of Python code.  This is run straight from the 2.6.5 interpreter, with no other commands executed.  Do you notice anything strange?


```py


$python

Python 2.6.5 (r265:79359, Mar 24 2010, 01:32:55) 

[GCC 4.0.1 (Apple Inc. build 5493)] on darwin

Type "help", "copyright", "credits" or "license" for more information.

>>>; l = lambda i: a[i]

>>> l

<function at="" replaceme h="[(1," l for a in did you spot it here is hint. running different but similar session: python mar inc. build on darwin type or more information. i: traceback recent call last file line nameerror: global name not defined do see now i the lambda function>l in terms of <code>a</code> without defining first defining <code>a</code>!  And furthermore, it just works when <code>a</code> is defined.  This is actually independent of the fact that we are working in a list comprehension, as this continuation of the previous session shows:



```py


>>> a = [3, 4, 5]

>>> l(0)

3


```



But I want to expand on the list comprehension example, because there even more bizzare things going on here.  Restarting a new session again:



```py


$python

Python 2.6.5 (r265:79359, Mar 24 2010, 01:32:55) 

[GCC 4.0.1 (Apple Inc. build 5493)] on darwin

Type "help", "copyright", "credits" or "license" for more information.

>>> l = lambda i: a[i]

>>> H = [(1, 2), (3, 4)]

>>> [l(0) + l(1) for a in H]

[3, 7]

>>> (l(0) + l(1) for a in H)

<generator object="" at="" replaceme list l for a in h so if you are astute and have been using python long enough should be able to catch what is going on here. don know here hint of previous session as may earlier comprehension index variables into the local namespace. strange thing that although would reset it generator version does not. well normally do this: x="1" range del traceback recent call last file line nameerror: name not defined above bit has something with way>lambda function was defined with the <code>a</code>.  By the way, here is what happens with the generator comprehension (is that what these are called?) if <code>a</code> is not defined:



```py


>>> del a

>>> list((l(0) + l(1) for a in H))

Traceback (most recent call last):
  File "", line 1, in 
  File "", line 1, in 
  File "", line 1, in 
NameError: global name 'a' is not defined


```



This is how I discovered this.  I had defined a lambda function using an variable that was then passed to a list comprehension that used this variable as the index without realizing it. But then I tried converting this into a generator comprehension to see if it would be faster, and got the above error.  



Finally, since the "feature" of leaking list comprehension loop variables into the local namespace is <a href="http://docs.python.org/release/3.0.1/whatsnew/3.0.html#changed-syntax">going away</a> in Python 3, I expected things to behave at least a little differently in Python 3.  I tried the above in a Python 3.1.2 interpreter and got the following:



```py


$python3

Python 3.1.2 (r312:79147, Mar 23 2010, 22:02:05) 

[GCC 4.2.1 (Apple Inc. build 5646) (dot 1)] on darwin

Type "help", "copyright", "credits" or "license" for more information.

>>> l = lambda i: a[i]

>>> l

<function at="" replaceme h="[(1," l for a in traceback recent call last file line nameerror: global name is not defined list so python both the comprehension and generator comprehensions act same which too surprising. i guess should recode that piece of code to make it future proof although this doesn seem easy moment may require converting one-liner into six-liner. if you are interested href="http://github.com/asmeurer/sympy/blob/15c3675ff67be854c12c349ed9034f12bb2f5247/sympy/integrals/risch.py#L297">here.



So can anyone provide any insight into what is going on with that lambda function?  Running it with the <code>-3</code> switch to <code>python2.6</code> didn't give any warnings related to it.  



<strong>Update:</strong> As I noted in a <a href="http://asmeurersympy.wordpress.com/2010/06/16/strange-python-behavior-can-someone-please-explain-to-me-what-is-going-on-here/#comment-121">comment</a>, I figured out how to make this future-proof.  I need to convert it from 



```py


def residue_reduce_derivation(H, D, x, t, z):
    lambdafunc = lambda i: i*derivation(a[1], D, x, t).as_basic().subs(z, i)/ \
         a[1].as_basic().subs(z, i)
    return S(sum([RootSum(a[0].as_poly(z), lambdafunc) for a in H]))

```

to

```py


def residue_reduce_derivation(H, D, x, t, z):
    return S(sum((RootSum(a[0].as_poly(z), lambda i: i*derivation(a[1], D, x, t).as_basic().subs(z, i)/ \
        a[1].as_basic().subs(z, i)) for a in H)))

```



Thanks to all the commenters for the explanations.  



Also, you may have noticed that I discovered that if you use <tt>[code]</tt> instead of <tt>&lt;code&gt;</tt>, you get these nicer code blocks that <em>actually respect indentation!</em>  Now I just need to figure out how to make them syntax highlight Python code.



<strong>Update 2:</strong> <tt>[code='py']</tt> colors it!  Sweet!



<strong>Update 3:</strong> I just discovered that SymPy has a <code>Lambda()</code> object that handles this better.  In particular, it pretty prints the code, and is what is already being used for <code>RootSum()</code> in the rational function integrator, at least in Mateusz's polys9.  



```py


>>> integrate(1/(x**5 + 1), x)

log(1 + x)/5 + RootSum(625*_t**4 + 125*_t**3 + 25*_t**2 + 5*_t + 1, Lambda(_t, _t*log(x + 5*_t)))                                                   


```



Still, this has been a very good learning experience.  </function></generator></function></body></html>