<html><body><p>I have decided to start working on my project, even though it is a week early, since I am finished with school and have nothing better to do.  I also like the idea of getting ahead.  I am pushing everything to my <a href="http://github.com/asmeurer/sympy/tree/odes">github account</a>.  So far, I have implemented <a href="http://en.wikipedia.org/wiki/Exact_differential_equation">exact differential equations</a>, which are cake (i.e., they took me about an hour to code up).  These are equations of the type,<img class="alignnone size-full wp-image-30" title="Exact Differential Equation Form" src="http://asmeurersympy.files.wordpress.com/2009/05/exact-differential-equation-form.png" alt="Exact Differential Equation Form" width="138" height="14">where<img class="alignnone size-full wp-image-31" title="dP:dy=dQ:dx" src="http://asmeurersympy.files.wordpress.com/2009/05/dpdydqdx.png" alt="dP:dy=dQ:dx" width="49" height="19">.  If this condition holds, then there exists a function<img class="alignnone size-full wp-image-32" title="F(x,y)" src="http://asmeurersympy.files.wordpress.com/2009/05/fxy.png" alt="F(x,y)" width="38" height="14">, often called a 'potential function' because of some applications of theses equations to physics, such that<img class="alignnone size-full wp-image-33" title="dF:dx=P" src="http://asmeurersympy.files.wordpress.com/2009/05/dfdxp.png" alt="dF:dx=P" width="43" height="17">and<img class="alignnone size-full wp-image-34" title="dF:dy=Q" src="http://asmeurersympy.files.wordpress.com/2009/05/dfdyq.png" alt="dF:dy=Q" width="43" height="19">.  This is because mixed partials are equal for continuous functions.  The solution will then just be<img class="alignnone size-full wp-image-35" title="F(x,y)=C1" src="http://asmeurersympy.files.wordpress.com/2009/05/fxyc1.png" alt="F(x,y)=C1" width="68" height="14">.  The tricky part is finding the potential function<img class="alignnone size-full wp-image-32" title="F(x,y)" src="http://asmeurersympy.files.wordpress.com/2009/05/fxy.png" alt="F(x,y)" width="38" height="14">, but it turns out to be easier than you would think.  Because of the fundamental theorem of calculus, the potential function is just<img class="alignnone size-full wp-image-36" title="Exact Differential Equation Solution" src="http://asmeurersympy.files.wordpress.com/2009/05/exact-differential-equation-solution.png" alt="Exact Differential Equation Solution" width="235" height="19">.  There is a restriction where the rectangle connecting<img class="alignnone size-full wp-image-37" title="(x0,y0)" src="http://asmeurersympy.files.wordpress.com/2009/05/x0y0.png" alt="(x0,y0)" width="39" height="14">,<img class="alignnone size-full wp-image-38" title="(x0,y)" src="http://asmeurersympy.files.wordpress.com/2009/05/x0y.png" alt="(x0,y)" width="34" height="14">,<img class="alignnone size-full wp-image-39" title="(x,y0)" src="http://asmeurersympy.files.wordpress.com/2009/05/xy0.png" alt="(x,y0)" width="34" height="14">, and<img class="alignnone size-full wp-image-42" title="(x,y)" src="http://asmeurersympy.files.wordpress.com/2009/05/xy.png" alt="(x,y)" width="29" height="14">has to lie entirely in the domain of <img class="alignnone size-full wp-image-43" title="P" src="http://asmeurersympy.files.wordpress.com/2009/05/p.png" alt="P" width="11" height="10"> and<img class="alignnone size-full wp-image-44" title="Q" src="http://asmeurersympy.files.wordpress.com/2009/05/q.png" alt="Q" width="11" height="13">, but if we let<img class="alignnone size-full wp-image-45" title="x0=y0=0" src="http://asmeurersympy.files.wordpress.com/2009/05/x0y00.png" alt="x0=y0=0" width="63" height="13">, then this is not really a problem for functions that SymPy will encounter.  UPDATE: It turns out this is a problem if the equation has singularities in it.  Fortunately, I was able to code up a workaround that usually works.


So you can see that this is easy to implement in SymPy if you know the above fact.  It turns out that most solution methods for ODEs are like this.  They can be solved in the general case, although usually students are only taught tricks because they are much easier to remember than generally solved formulas.  For example, to solve an exact differential equation, students are often taught to just integrate<img class="alignnone size-full wp-image-43" title="P" src="http://asmeurersympy.files.wordpress.com/2009/05/p.png" alt="P" width="11" height="10">with respect to<img class="alignnone size-full wp-image-46" title="x" src="http://asmeurersympy.files.wordpress.com/2009/05/x.png" alt="x" width="9" height="8">and<img class="alignnone size-full wp-image-44" title="Q" src="http://asmeurersympy.files.wordpress.com/2009/05/q.png" alt="Q" width="11" height="13">with respect to<img class="alignnone size-full wp-image-47" title="y" src="http://asmeurersympy.files.wordpress.com/2009/05/y.png" alt="y" width="8" height="9">.  It is much simpler for a human being to do that than the above integral, because the integral involves evaluating limits and so on, but for a computer algebra system, the above integral is a one-liner.



By the way, if you want to test my code, you should clone my github repository and switch to the odes branch.  You can do this by typing 'git clone git://github.com/asmeurer/sympy.git' and then 'git checkout odes' in a Terminal that is cd'd to the directory you want to clone to (of course, you will need git installed first!).  Then type 'cd sympy' and './bin/isympy', which will start SymPy.  Then from there, you can do stuff like 'dsolve(sin(x)*cos(f(x))+cos(x)*sin(f(x))*f(x).diff(x),f(x)' (this is exact).  It's easy to generate an exact differential equation.  Just start with a random function of x and y, then take the derivative of it with respect to x and y each, and do a subs(y,f(x)) on each term (SymPy wants functions for the dependent variable, so we have to use f(x)).  Then do dsolve(&lt;the derivative with respect to x&gt;+&lt;the derivative with respect to y&gt;*f(x).diff(x),f(x)).  You should get your original function equals an arbitrary constant C1.  By the way, diff(&lt;function&gt;,x) will take the derivative of &lt;function&gt; with respect to x.



Up next: Initial conditions, and then first order homogeneous differential equations.</p></body></html>