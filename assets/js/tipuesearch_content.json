{
  "pages": [
    {
      "title": "About",
      "tags": "",
      "text": "I am Aaron Meurer. I work at Continuum Analytics, primarily on\nconda and\nAnaconda.  I am also the lead developer for\nSymPy.\nHere are my various social sites:\nGitHub\nTwitter (@asmeurer) Follow @asmeurer !function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document,\n  'script', 'twitter-wjs');\nGoogle+ (I don't really use)\nHomepage: You're looking at it.\nPersonal Email: \n  asmeurer@gmail.com\nWork Email (use this for queries about Conda or Anaconda): \n  aaron.meurer@continuum.io\nMy old blog\nStackOverflow",
      "loc": "/about/"
    },
    {
      "title": "Playing with Swift and SpriteKit",
      "tags": "",
      "text": "I've always wanted to learn how to write native apps for iOS and the Mac as\nlong as either has existed.  However, the barrier of entry has always been too\nhigh, given that I only ever had time to play with them as a hobby.  The\nObjective-C programming language is a bit complicated to learn, especially\nalongside all the memory management that you have to do (and it doesn't help\nthat Apple has gone through several memory management schemes through Mac OS X\nversions).  To add on to that, the Cocoa framework is huge, and it's quite\ndaunting to even know where to get started with it.\nWith Apple's announcement of the\nSwift programming language in June, it\nwas clear to me that the language would significantly lower the barrier of\nentry.  The XCode 6 beta is\nnow public (i.e., you do not need to have a paid Apple Developer account to\naccess it), so anyone can play with Swift.\nNote that I am still very new to both Swift and iOS development in general,\nso it's quite likely that some of the things I mention here are actually bad\nideas.  If you know more than I do and spot a bad thing that I am doing,\nplease mention it in the comments.\nIt's also possible that some of the assumptions I've made about the Swift\nlanguage or the SpriteKit framework are actually wrong. Please remember that I\nam still a beginner and take what I say with a grain of salt.\nThe Swift Language\nIf you don't know how to program at all, I don't know how well this will work\nfor you. I already know several language, especially Python, so my experience\nderives from that.\nFirst, read through the\nSwift language guide. If you\nhave XCode 6, you can read it interactively as a Playground. I only have read\nthrough the first part so far, which gives a high-level overview of the\nlanguage.\nThe Swift language is actually quite easy to learn, especially if you already\nknow a high-level language like Python.  A few important things:\n\n\nvar and let seem a bit confusing.  The difference is actually quite\n  simple: var denotes a variable that can change and let denotes a\n  variable that cannot.  You could in theory just use var for everything,\n  but let lets the compiler spot mistakes for you, and it also probably lets\n  it make your code faster.  If you intend to never change the value of a\n  variable, use let.\n\n\nSwift uses type inference, meaning that you usually don't need to specify\n  types. But when you do, you do so by putting a : after the variable name,\n  like var a: Int = 2 or func f(a: Int).  The exception is the return type\n  of a function, which uses the arrow -> (if you are familiar with Python 3\n  type annotations, the syntax is exactly the same), func f(a: Int) -> Int.\n\n\nSwift uses ? after a type name to indicate that a variable could be its\n  given type, or nil. If you are familiar with Haskell, this is like the\n  Maybe monad.  I know very little Haskell, so I don't know if Swift's\n  implementation of ? is truly a Monad.\nRoughly speaking, in many circumstances, you don't know if a variable will\nactually be the given type or not. A good example of this is with\ndictionaries. var a: [String: Int] creates a dictionary that maps\nstrings to integers. If you manipulate this dictionary, and then access a\nkey from it, like a[b], there is no way for the compiler to know if that\nkey will really be in the dictionary. If the key is in the dictionary, you\nwill get the value of that key. Otherwise, you will get nil. Hence, the\ntype of a[b] is Int?.\nSwift uses ! to indicate that the value is not nil, which tells the\ncompiler to compile code that doesn't check for that case.\nFor the most part, you can ignore this as well, at least when you\nstart. Just write code as you would, let XCode add in the types for you, and\nonly worry about types if the compiler tells you something is wrong.\n\n\nSwift functions often require the parameters be named, for instance, you\n  have to write CGSize(width: 1, height: 2) instead of just CGSize(1,\n  2). This is both for clarity (the former is much easier to read if you\n  aren't familiar with the API for CGSize), and because Swift allows\n  polymorphism, i.e., you can define different initializers for the same class\n  with different type signatures. For example, CGRect can be initialized as\n  CGRect(origin: CGPoint, size: CGSize) or CGRect(x: Int, y: Int, width:\n  Int, height: Int). This can lead to ambiguities in some cases unless you\n  explicitly tell the compiler which version to use.\n\n\nI've found Swift to be a very strict language. I don't mean this in the sense\ndescribed by\nthis Wikipedia article. What\nI mean is that Swift typically only lets you do things one way.  This is\nsimilar to Python's \"one way to do it,\" except Swift enforces this at the\nlanguage level.\nA nice example of this is that I rarely get a warning from the Swift compiler.\nJust about every message I've gotten from the compiler has been an error. The\ndifference is that the program will still compile and run with a warning. This\nis different from C, C++, and Objective-C, which have many warnings that the\ncompiler will still compile with. These warnings usually are for things like\nan incorrect pointer type. Since there is really only one type in C, the\ninteger (because all data in memory is just integers), the program can still\nrun even if you mix your types up a bit.\nThere are also many cases where Swift seems maybe too strict about things,\nalthough it's clear that it is doing it to try to stray people away from\ncommon mistakes and antipatterns. For example, the condition of an if\nstatement in Swift must always be of type Bool. Unlike languages like\nPython, things do not have implicit boolean values. if 1 is a syntax\nerror. So is if a unless a is type Bool.\nThis ends up not being a big problem. The things Swift forces you to do feel\nlike good programming practices.  This is not unlike how Python \"forces\" you\nto keep your code indented correctly.  It feels very different from a language\nlike Java, where the things that you are forced to do all feel like they are\nthere simply to make the compiler writer's life easier.  And indeed, unlike\nJava and Objective-C and much like Python, Swift code requires very little\nboilerplate.  There are no header files for instance.\nSo all said and done, I like Swift. I don't like it as much as Python (I also\ndon't have my head wrapped around it as much as Python). But it's far better\nthan Objective-C, and that's what matters. Frankly, my biggest gripe with it\nis the ubiquitous use of CamelCasing and two letter prefixing (NS, CG,\nSK; I don't know if there's a name for this) in the API. I adamantly refuse\nto do this with my own variables, because I believe CamelCase reduces\nreadability over underscore_casing. I like the Python convention to use\nunderscore_casing for variables, functions, and methods, and CamelCase for\nclasses (because classes are kind of like proper nouns, and CamelCase is as\nclose to Capitalization as possible in programming language conventions).\nLearn to read Objective-C\nWhile it is not necessary to write Objective-C any more, it is a good idea to\nknow how to read it. The reason is that a lot of good resources on the\ninternet are still in Objective-C (also a lot of Apple's example\ndocumentation). The API names are the same, so this mainly boils down to\nunderstanding how to convert the basic syntax to Swift. Reading the section of\nthe Wikipedia article on\nthe syntax of Objective-C should be enough.\nFor instance\n[touch locationInNode:self]\n\n\n\nwould be translated to\ntouch.locationInNode(self)\n\n\n\nUse XCode\nIf you are comfortable with the Swift language itself, you should get started\nwith a project.\nFirst off, you should use XCode to edit your code, at least to begin with,\neven if you are accustomed to using another editor.  The reason is that XCode\nis going to do a lot of things for you which will make your life easier and\nreduce the complexity significantly as you get started.  Once you are\ncomfortable, you can move to another editor.\nSome things that XCode will do for you:\n\n\nAutocompletion: The best way to figure out the Cocoa APIs is to use the\n  autocompletion. This pops up when you want to override a method in a\n  subclass, create an object from an existing class, access an attribute of a\n  class, or instantiate a class or call a function (remember that Swift is\n  polymorphic, so it's useful to know all the possible ways to instantiate a\n  class or call a function).\n\n\nCompiler errors and warnings: Swift, being a strictly typed language,\n  will give you a lot of useful compiler errors. It's pretty hard to write a\n  program incorrectly from a type point of view, and have it even compile.\n  XCode integrates this nicely, and it even offers suggestions on how to fix\n  things every once in a while (so that you can just click the button and have\n  it fixed inline).\n\n\nDirect interaction with the iOS Simulator: One button will compile your code\n  and start the simulator. If your target is Mac OS X, it will open the\n  application.\n\n\nDebugger: Clicking to the left of a line will set a breakpoint in the\n  debugger.  The Swift debugger seems pretty limited right now. I wasn't able\n  to get any useful information out of the variables view when I used it.  But\n  in my experience using XCode in the past to debug C, its graphical debugger\n  is one of the best.\n\n\nConfiguration settings: If you click on the XCode project in the files\n  view (the root node of all the files), you get a view with all the different\n  settings for your project. Most of these you probably won't want to change,\n  but a few are important, like what devices and orientations you want to\n  allow, what operating system versions you want to support, and the name and\n  version of your project.  Editing these outside of XCode requires editing an\n  XML file, which is no fun.\n\n\nOf course, any editor can potentially do these things, and I'm really looking\nforward to the point where I can just use Emacs to edit Swift code, as the\nXCode editor as an editor is quite annoying.  XCode was the editor that I used\nbefore I switched to using Emacs, and it's not gotten much better. There are\nstill several visual glitches in the editor environment, especially with the\nscope coloring and syntax highlighting. You can edit the keyboard shortcuts in\nthe XCode setting to get some things the way you like them (although I found\nthat trying to set TAB to autoindent did not work). You can also use a tool\nlike Karabiner (previously\nKeyRemap4MacBook) to enable Vim or Emacs editor shortcuts everywhere\n(including XCode). It doesn't help that XCode 6 is still in beta (at some\npoint the editor backend died and all syntax highlighting and tab completion\nstopped working; I managed to fix it by removing a spurious ! in the code)\nThe iOS Simulator\nOne disappointing thing that I learned is that you cannot run any iOS program\nyou write on an iOS device unless you are in the paid developer program (or if\nyou Jailbreak and are willing to go through some hoops). The iOS developer\nprogram costs $100 a year, and since I'm not sure yet how far I am going to go\nwith this, I am holding off on it.\nThe only other option then is to run on the simulator. The simulator is fine,\nthe only issue is that there are limits to how you can simulate a touch screen\non a computer with a mouse.\nA few things to note about the simulator:\n\n\nThere are several things you can do with the \"hardware\" from the hardware\n  menu, such as rotating the device or pressing the home button.\n\n\nIt's worth remembering the keyboard shortcut for pressing the home button,\n  \u21e7\u2318H, as you can press it twice in quick succession just like on a real\n  device to open the task manger. You can then drag your app up to completely\n  reset it, without having to restart the simulator.\n\n\nThe retina iPad is taller than your display, even if you have a 15\" retina\n  display. So be aware that you will need to scroll up and down to see it\n  all. Alternately, you can use a smaller device, like an iPhone, or rotate it\n  to landscape, where it all fits.\n\n\nThe only way to do multitouch is to hold down the Option key. This will\n  create two fingers.  However, it's quite limited as the two fingers are\n  always centered around the center of the screen. Therefore if you want to\n  test multitouching two objects, you'll have to position them symmetrically so\n  that you can grab them both.\n\n\nGetting started with a project\nThe best way to start is to start a template project with XCode. I personally\nstarted with a SpriteKit game for iOS. This created a basic template \"Hello\nWorld\" Swift file with the basic SKScene subclass. Go ahead and compile and\nrun this in the simulator to see what it does.\nThere are four important methods of SKScene which you will want to override,\ndidMoveToView, touchesBegan, touchesEnded, and update. didMoveToView\nis the initializer for the scene.  Anything that should be set up and appear\nfrom the very beginning should go there. touchesBegan and touchesEnded are\ncalled when a finger touches the screen and when it leaves the screen,\nrespectively. Remember always that iOS devices are multitouch devices, so\nthese events can happen concurrently, and there can be multiple touches\nhappening at once.  The first argument to these methods is a set of touches,\nwhich you should iterate over to perform actions (the \"Hello World\" example\nshows how to do this). Finally, the update method is called every time the\nscene is updated, at each \"frame\" essentially.\nThere are other methods, for instance, touchesMoved. However, I discovered\nthat you don't actually want to use touchesMoved to do what you would think\nyou'd use it for, namely, to move stuff around. The reason is that there is no\neasy way to sync up multitouches between touchesBegan (where you know what\nthing the finger started on) and touchesMoved to move it around. It works\nwell for a single touch, but if you want to be able to move multiple things\naround at once (which I highly recommend, as it leads to a much nicer user\nexperience), you have to do things a little differently, as I'll explain\nbelow.\nAdding some objects to your environment\nThere are a lot of classes to create various objects of various shapes. I\nstarted with SKSpriteNode, which creates a simple square, because I wanted\nto play around with touch events.\nI started out with four sprites (yes, it would be better to put these in an\narray, and probably abstract them to a method):\nlet sprite1 = SKSpriteNode(color: UIColor(red: 1.0, green: 0.0, blue: 0.0, alpha: 1.0), size: CGSize(width: 30, height: 30))\nlet sprite2 = SKSpriteNode(color: UIColor(red: 0.0, green: 1.0, blue: 0.0, alpha: 1.0), size: CGSize(width: 30, height: 30))\nlet sprite3 = SKSpriteNode(color: UIColor(red: 0.0, green: 0.0, blue: 1.0, alpha: 1.0), size: CGSize(width: 30, height: 30))\nlet sprite4 = SKSpriteNode(color: UIColor(red: 1.0, green: 1.0, blue: 0.0, alpha: 1.0), size: CGSize(width: 30, height: 30))\n\n\n\nThese lines go at the class level. This lets them be accessed from within any\nmethod of the class.\nOne thing I could not figure out how to do was how to access class variables\nfrom within other class variables.  In Python, you can do\nclass Test:\n    a = 1\n    b = a + 1\n\n\n\nBut in Swift, if you do\nclass Test {\n    let a = 1\n    let b = a + 1\n}\n\n\n\nit tells you that Test.Type does not have a member named 'a' on the let b =\na + 1 line.\nYou may have to use properties with getters and setters in this case, which I\ndidn't feel like fooling with. The result is that I did not abstract out the\nCGSize(width: 30, height: 30) into a common variable.\nThe didMoveToView method then becomes\noverride func didMoveToView(view: SKView) {\n    let center = CGPoint(x:CGRectGetMidX(self.frame), y:CGRectGetMidY(self.frame))\n\n    for s in [sprite1, sprite2, sprite3, sprite4] {\n        s.position = center\n\n        self.addChild(s)\n    }\n}\n\n\n\nThe self.addChild is the most important method here, as it actually puts the\nsprite in the main view. If you forget this line, none of the sprites will\nshow up.\nIf you run this, you will only see the yellow box, because you put them all on\ntop of one another in the center of the view.\n\nAdding Basic Physics\nWe could change the positions so that they do not overlap, but the option I\nwent with was to play around with the physics a little. SpriteKit has a nice\n2D physics engine built in, and it's quite easy to use.\nSo my final didMoveToView was\noverride func didMoveToView(view: SKView) {\n    /* Setup your scene here */\n    let center = CGPoint(x:CGRectGetMidX(self.frame), y:CGRectGetMidY(self.frame))\n\n    for s in [sprite1, sprite2, sprite3, sprite4] {\n        s.position = center\n\n        var physics_body = SKPhysicsBody(rectangleOfSize: CGSize(width: 30, height: 30))\n\n        physics_body.affectedByGravity = false\n        physics_body.allowsRotation = false\n\n        s.physicsBody = physics_body\n        self.addChild(s)\n    }\n\n}\n\n\n\nFor each sprite, I create an SKPhysicsBody with the exact same size as the\nSKSpriteNodes (there's probably a more direct way to do this), and attach it\nto that node. The affectedByGravity property is important. If you don't set\nit to false, all the objects will fall off the bottom of the screen. I\ndisabled allowsRotation because I wanted my squares to stay\nupright. Otherwise when when the squares hit one another they will rotate in\nspace.\nNow SceneKit will prevent the squares from overlapping with one another, even\nif we put them on top of each other as we have done.\nSo now when we start the simulator, we see\n\nMaking the squares movable\nNow, let's make it so that we can move these squares around.  The correct way\nto do this took me some time to figure out.  I finally got some hints from\nthis site.\nThe key thing here is that the UITouch objects remain the same objects for\nthe duration of the touch. Their position is updated when the touch\nmoves. Hence, you just need to associate each touch with the node that was\ntouched when the touch began, and move the node to the position of that touch\nwith each update.\nTo start, we will create a dictionary on the class mapping touches to nodes\nvar selected: [UITouch: SKNode] = [:]\n\n\n\nThen, in the touchesBegan method, map every touch to the node that it\ntouches.\noverride func touchesBegan(touches: NSSet, withEvent event: UIEvent) {\n    /* Called when a touch begins */\n\n    selected = [:]\n    for touch: AnyObject in touches {\n        let location = touch.locationInNode(self)\n\n        selected[touch as UITouch] = nodeAtPoint(location)\n\n    }\n}\n\n\n\nThe as UITouch part is needed because the compiler only knows that touch is\nAnyObject. This was one of the things that was helpfully suggested by the\ncompiler, so I did not really need to know what I was doing to get it right.\nNote that even if you touch the background behind the squares, you are still\ntouching a node, namely, the GameScene node itself (the node for the class\nyou are working on).  This is a very important observation, as it will tell us\nhow to get the right position for the node when we update it. It also means\nthat we should keep track of which nodes we actually want to be moved by the\ntouch. Trying to move the GameScene node is ignored, at leads to a lot of\nconsole logs, so we should avoid it.\nNext, let's write the touchesEnded method. This method is simple. If a touch\nends (the finger is removed from the screen), we should remove it from the\nselected dictionary.\noverride func touchesEnded(touches: NSSet, withEvent event: UIEvent) {\n    for touch: AnyObject in touches {\n    selected[touch as UITouch] = nil\n    }\n}\n\n\n\nTo delete an item from a dictionary in Swift, just set it to nil.\nNow, finally, we need to write the update method to move the node to the\ncurrent position of the touch.\nThe simplest way to do this is\noverride func update(currentTime: CFTimeInterval) {\n    /* Called before each frame is rendered */\n    for (touch, node) in selected {\n        if !contains([sprite1, sprite2, sprite3, sprite4], node) {\n            continue\n        }\n        let location = touch.locationInNode(self)\n        node.position = location\n    }\n}\n\n\n\nNote that we only modify the position for the four sprite nodes.\nThe touch.locationInNode(self) part took me a long time to figure out. There\nare other methods, like touch.locationInView(nil), but this does something\nvery strange where the the horizontal axis was doubled (moving the touch one\ninch moved the object two inches), and the vertical axis was inverted. If\nsomeone knows what was going on there, please let me know.\nModifying the position directly is nice, but it's nice to play around a little\nbit with a third thing from SpriteKit, actions.\nWhat we will do instead of setting the position of the node is to tell\nSpriteKit to move the node there in a certain amount of time. If we make this\ntime small enough, like 0.01 seconds, it will appear to act exactly the\nsame. If we up this time, there will be a smooth \"lag\" where the node catches\nup to the touch. Because the movement always happens in the same amount of\ntime, it will move faster if the finger is farther away. This gives the\nsquares a nice \"frictioney\" effect with some springiness to it, which is quite\nnice.\noverride func update(currentTime: CFTimeInterval) {\n    /* Called before each frame is rendered */\n    for (touch, node) in selected {\n        if !contains([sprite1, sprite2, sprite3, sprite4], node) {\n            continue\n        }\n        let location = touch.locationInNode(self)\n        let action = SKAction.moveTo(location, duration: 0.1)\n        node.runAction(SKAction.repeatAction(action, count: 1))\n    }\n}\n\n\n\nThere are many other actions we can perform, like rotations and color\nchanges.\nConclusion\nHere is an example of the movement. You can see it works even with\nmultitouch.  You can also see the collision physics cause the other squares to\nmove out of the way when another square hits them.\n\n  Your browser does not support the video tag.\n\n\nHere you can see the movement lag caused by using SKAction.moveTo with\nduration: 0.1 (note that the mouse itself jumps a bit at the beginning, but\nthis is due to lag in the recording).\n\n  Your browser does not support the video tag.\n\n\nI have uploaded the full code to\nGitHub.\nThis isn't exactly a \"game\", but it does lay down the foundations for what you\nwould need to write a game in Swift using SpriteKit.  At least for me, it\nshows me the technical basics of how to write some games that I had thought\nabout, which mostly involve making shapes and moving them around the screen.",
      "loc": "/posts/playing-with-swift-and-spritekit/"
    },
    {
      "title": "SciPy 2014",
      "tags": "",
      "text": "I just finished SciPy 2014, a\nweek-long conference in Austin, TX for scientific computing with Python.\nThis is my third SciPy (I have been to\n2011\nand 2013). This\nyear, the conference was noticeably larger. Last year there were\n~350 people, this\nyear, there were\n~450 people.  Aside\nfrom there being a lot more people, and the main keynotes taking place in a\nlarger room, the most noticeable consequence of this is that there were three\ndays of talks this year, and three concurrent tracks of talks all three days\n(last year there were two of each). The conference consisted of two days of\ntutorials, three days of talks, and two days of sprints, running from July 5\nto July 12.\nTutorials\nThe conference started on Sunday with tutorials. I gave a tutorial on SymPy\nwith Matthew Rocklin and\nJason Moore. The videos are on YouTube\n(parts one,\ntwo,\nthree, and\nfour).  I gave tutorials for\nSymPy the previous two times I was at SciPy, although with different people\n(with Mateusz Paprocki in 2011 and\nOnd\u0159ej \u010cert\u00edk in 2013). I really enjoy\nseeing new people learn about SymPy, and working with Matthew Rocklin, who is\na very good speaker and teacher.\nI also attended the tutorial on PyDy by Jason Moore, Gilbert Gede, and\nObinna Nwanna (parts one\nand two).  This tutorial was\nalso well done, and I highly recommend it if you are interested in Newtonian\nmechanics.\nI unfortunately was unable to attend any of the other tutorials, but I heard\ngood things about them, especially the\nJulia tutorial.\nTalks\nFrom Tuesday to Thursday were talks. The quality of talks this year was very\nhigh. The SciPy talks have always been high quality talks, but this year I\nfelt that they were particularly good. I don't think I saw a bad talk.\nThus, I can't really recommend the good talks that I saw without recommending\nall of them. You should go to YouTube and the\nSciPy schedule and watch\nany talk that looks interesting.\nI therefore am going to recommend here the very best talks.  Two talks in\nparticular stood out to me as the best.\nFirst is Greg Wilson's Thursday keynote, which is among the best talks I've\never seen from any conference.\n\nGreg mentions a lot of ideas, quite a few of which are controversial, which I\nthink always makes for an interesting talk (it also means that I don't agree\nwith everything he said, although I do agree with most of it). Most of the\ntalk is about pedagogy, especially regarding his experiences at\nSoftware Carpentry. Some things he posited:\n\n\nThere is actually good research about what methods work and don't work in\n  teaching. He referenced\n  this presentation,\n  which lists just about every possible pedagogical method, and the net\n  difference that it has on students, based on over 50,000 studies. For\n  example, individualized instruction has a very small positive effect,\n  whereas teacher feedback has a very large positive effect. Since each takes\n  time and resources, we should focus on those effects that have the highest\n  impact. Greg pointed out that web-based learning has very little positive\n  effect, and hence is a waste of time and money. The most effective change is\n  removing disruptive students.\nIn particular, I liked the quote, \"if you want more computing in high\nschool, you have to tell me what to take out.\"  People like to go on that\nschools need to teach more of this or more of that, and computing and\nprogramming tends to be high on that list these days, but anyone who does\nnot discuss what things should be removed from the curriculum, which is\nalready quite full, is not being honest about the discussion.\n\n\nThe other big point Greg made is that we need more incremental massive\n  collaboration in teaching. This is the same model that has built open source\n  and Wikipedia, but is mostly absent from teaching. Incremental change is\n  important here, as well. It is more useful for someone to contribute fixes\n  to existing lesson plans, so that they become better for the students, but\n  in his experience, people are much more willing to add new lessons.  Greg\n  calls for a \"culture of patching\". If incremental change could be adopted in\n  teaching, teachers could aggregate methods and lesson plans, removing the\n  massive duplication, and most importantly, making teaching materials that\n  actually work for students to learn. Greg Wilson asks why open source and\n  Wikipedia are able to thrive on massive incremental change, but teaching\n  is not, a question he hasn't found the answer to.\nMy thought on the matter is that unlike writing software or collecting and\npresenting facts, pedagogy is very difficult. If I contribute a patch to\nan open source project that fixes a bug, I can run the tests to see if my\nfix is \"correct\". If I fix an incorrect fact on Wikipedia, it is less\neasy, but I can still cite and check references to make sure it is\ncorrect.  But for teaching, it is very difficult to know what methods work\nand what don't, and as Greg pointed out at the beginning of his talk, the\neffects of different methods can be very counterintuitive.\n\n\nThe second talk that I recommend is\nJake VanderPlas's talk about Frequentism and\nBayesianism.\n\nI won't summarize this talk, as Jake has done a much better job in his blog\n(parts\none,\ntwo,\nthree,\nand\nfour). The\nbest thing is to just watch the talk.  I will just point out that before the\ntalk, I did not really understand the difference, not being a statistician or\nsomeone who works with statistics regularly, and having seen the talk, I now\nfeel that I do.  It's a controversial topic, and if you care about the matter,\nyou should know that Jake is a strong Bayesian, although I felt that he gave\nboth sides a fair exposition.\nAgain, all talks I saw at the conference were good. But those two I felt were\nthe best. I should also mention here that I myself gave a talk on Conda (more\non that later).\nThe Conference\nOf course, the talks are only a part of any conference. The best part of SciPy\nis the gathering of the community. Each year I meet more new people, as well\nas talk with people I already know, but don't get to see outside of SciPy.\nFor me, the biggest part of the interactions this year were on Conda and\npackaging.  The background is that I have been working full time for Continuum\nsince January, and I had interned last summer, working primarily on the Conda\npackage manager and Anaconda, the Python distribution.  This year, some of the\nbiggest buzz at the conference was about Conda. I'm obviously selection\nbiased, because people came to me specifically to talk about Conda, but I also\noverheard it in other people's conversations, in several of the presentations,\nand frankly, the people who did talk to me about Conda were very excited\nabout it.  Just like everyone was talking about the IPython Notebook last year\nand how it has solved the fundamental problems of sharing and presenting data\nanalysis, this year, everyone thanked me for my work on Conda and how it has\nbasically solved the packaging problem, the ubiquitous problem in Python since\npeople started using it.\nConda: The Packaging Problem Solved\nHere is the talk I gave on Conda:\n\nI made the claim in my talk that Conda has solved the packaging problem, and\nthe general feel from people I talked to who are using Conda is that it has.\nI think this slide from my presentation summarizes why Conda solves the\npackaging problem.\n\nOne of the most amazing things about the scientific Python community, and one\nof the things that I think really sets it apart from other Python communities,\nis the use of Python alongside other languages, such as C, C++, Fortran, R, or\nJulia.  No one language is enough to get the job done for serious scientific\nwork.  The fundamental brokenness of Python packaging has been that it has\nfocused too much on Python specific tools and processes.  The\ndistutils/setuptools/pip/virtualenv stack works great if your code begins and\nends with Python.  Where it falls over is when you want to link against a C\nlibrary, compile some Fortran or Cython code, and communicate with other\nlanguages like R and Julia.  By being a system level package manager, which is\nfundamentally Python agnostic, Conda is able to deal with all packages\nequally, whether that package be a Python package, a C extension which other\npackages link against, or Python itself.\nBy being truly cross-platform and user installable, Conda is able to reach the\nmaximal number of users, especially those who have historically been hit by\nthe packaging problem the hardest:  those who are on Windows or those who do\nnot have admin rights to install necessary tools to install the packages they\nneed.\nFinally, Conda installs binaries, not source packages, and its metadata is\nentirely static (you do not need to execute arbitrary Python code to capture\nthe metadata of a package).  These two things remove two of the largest\nsources of issues with the existing Python packaging tools, such as compiler\nerrors, and nonuniformity in metadata standards (there seem to be as many\ndifferent ways of writing setup.py as there are packages on PyPI), by\nremoving arbitrary code execution from package installation.\nConda opens up its ecosystem to anybody by making it easy for people to build\ntheir own Conda packages using reproducible Conda recipes.  And\nBinstar makes it easy to share those packages.  I'm\nvery excited about Binstar, as I think it does for packaging what GitHub has\ndone for open source, i.e., distributes and democratizes it. There are\nchallenges on how to deal with this, of course. As with any distributed\ndemocratized system, Binstar can be a wild west of packages.  Continuum is\nthinking about ways to manage this complexity, while still reaping the\nbenefits it provides. If you have any thoughts on things that can be done, let\nme know in the comments section below.\nOf course, solving the packaging problem and removing it are different\nthings.  Conda does not make it easier to compile difficult packages.  It only\nmakes it so that fewer people have to do it.  And there is still work to be\ndone before Conda really takes over the world.\nSprints\nThe conference ended with two days of sprints. I mainly helped people with\nConda packaging.  One key thing that happened is that I worked with Aron\nAhmadia so that HashDist can generate Conda\npackages. HashDist is a package compiling\nframework that makes it easy to have completely reproducible builds by hashing\nall the information that was used to compile a package, and recompiling when\nany of that information changes. You can learn more about HashDist by watching\nAron's talk from the conference:\n\nI am now convinced that HashDist is a good solution for people who still want\nthe control of compiling their own packages. Once HashDist is able to produce\nConda packages, then you can gain the benefits of both worlds: Conda's\npowerful package management and environment notion, with HashDist's modular\nand reproducible package building framework.\nOther thoughts\nThe organizers of SciPy did an excellent job this year.  The video crew did\nsomething which I have not seen before, which is that they uploaded the videos\nof the talks on the same day that the talks were held. My talk, which was held\nright before lunch, was uploaded before the last talk of the day.  Something\nthat I saw come out of this is that people not attending the conference were\nable to watch the talks and take part of the conversation with the conference\nattendees, via Twitter and other social media, or by joining the sprints after\nthe conference.\nThe extended three days of talks really took their toll on me. The conference\nstarts early enough in the morning and the social events after go so late in\nthe evening that each day of the conference I become a little more sleep\ndeprived. Usually by two days of tutorials and two days of talks I have hit my\nlimit, and this year, I really had a hard time making it through that fifth\nday. Fortunately for the sprints I was able sleep in a little bit, as it's not\na big deal if you miss the beginning.\nThis year the conference organizers made a push for diversity, and it\nshows. There were noticeably more women at the conference this year, and not\njust insomuch as there were more people at all.\nFinally, I leave you with the greatest lightening talk. Ever.",
      "loc": "/posts/scipy-2014/"
    },
    {
      "title": "Python Trickery",
      "tags": "",
      "text": "Here are some bits of Python trickery that I have come across. Each of the\nfollowing is invalid syntax.  See if you can figure out why\n1 + not(2)\n\n\n\nf(*(\ni for i in range(10)\nif i % 2),\nx=3,)",
      "loc": "/stories/python-trickery/"
    },
    {
      "title": "Moving to GitHub pages with Nikola",
      "tags": "mathjax",
      "text": "So I've finally decided to move my blog from Wordpress to GitHub pages.  I\nhighly recommend it if you are technically skilled enough to do it. I was\ngetting pretty annoyed at Wordpress. It forces you to write your posts in\nhtml (or else using their WYSIWYG editor), the wordpress.com is locked down,\nso you can't add any Javascript, their math is stuck in the past rendering png\ninstead of using MathJax. The list goes on.\nWith GitHub pages, I can write my posts in Markdown, and I have full control\nover everything. And there is no lock in. If I decide I don't like the\nsoftware that is generating the posts, I can easily move to something else,\nsince the post content itself is all Markdown (or the occasional rst or\nIPython notebook if I want to do something that Markdown doesn't support). I\ncan use MathJax for math (like \\( e{i\\pi} + 1 = 0 \\)). Wordpress.com\ndoesn't let you install abtirary Javascript on your blog, so you can't do\nthings like install MathJax or enable some cool sidebar thing (like a Twitter\nfeed).\nSetting up GitHub Pages\nFirst, you need to set up GitHub pages. This is a bit confusing, because there\nare actually two kinds of GitHub pages, user pages and project pages. User\npages are if you have a repo named username.github.io (or .com). The pages\nare served from the master branch.\nFor project pages, you add a gh-pages branch to any one of your projects,\nand GitHub hosts the content automatically at\nusername.github.io/projectname. I originally had my blog content at\nasmeurer.github.io, but I didn't like that I had to do everything in master,\nboth the generated and original content. So instead I created a repo called\nblog. I have my content in the master branch and the generated pages in\nthe gh-pages branch (more on this later). At my\nasmeurer.github.com repo,\nI just have for now a basic redirect to the blog. In the future, I may want to\nput additional, non-blog content on the website, and it would go there (or in\na separate project repo with its own gh-pages branch).\nNikola\nI had initially planned on using\nPelican. However, I got stalled on the\nWordpress import. I like that Pelican is written in Python, but I was not too\nkeen on their abrasive\nlicense. Frankly,\nI shouldn't say too many bad things about Pelican because I never really tried\nthat hard with it.\nI have decided to try Nikola instead. It's also\nwritten in Python. It has a very nice\nlicense. I like\nthe philosophy of the manual:\n\nDON'T READ THIS MANUAL. IF YOU NEED TO READ IT I FAILED, JUST USE THE THING.\n\nI've also discovered that the\nNikola community is\nvery nice. And of course, even if Nikola ends up not being for me, it will\nbe easy to switch, because my actual content is just some Markdown files that\nI own.\nGetting started\nGetting started with Nikola is pretty easy. First, you need to install it. It\nhas a ton of dependencies (fortunately all Python, so it won't be that\nhard). In addition to the ones in the requirements.txt, you should also\ninstall markdown and webassets. While using nikola, it will tell you if\nyou don't have something installed that you should, so if you see that, just\ninstall what it tells you to.  If you use conda and Mac OS X, I have\nuploaded all the dependencies to my Binstar,\nso you can just conda install -c asmeurer nikola. Oh and don't worry, Nikola\nand its dependencies fully support Python 3 (I wouldn't be using it if they\ndidn't).\nThen you just run the commands from\nhttp://getnikola.com/handbook.html#all-you-need-to-know.\nOne thing that doesn't tell you is that after you init the site, you should\nwalk through conf.py and change the settings to your liking.\nAnother trick not there is that you can add\neval \"`nikola tabcompletion`\"\n\n\n\nto your Bash profile to get tab completion.\nTricks\nHere are some useful tricks:\n\n\nTo enable MathJax, you have to type mathjax in a line by itself in the\nmetadata file. There are some bugs right now, but ideally you could do inline\nmath with $math$ and display math with $$math$$. $math$ doesn't work\ncurrently, but you can do \\\\(math\\\\) (both \\s are required, although this\nis likely a bug). You can do \\\\[math\\\\] for display math.  Here are some\nexamples. Inline: \\( \\sin 2{x} + \\cos2{x} = 1\\). Display: $$ e{i\\pi} + 1 = 0 .$$\n\n\nYour one-stop command when blogging is nikola auto. This requires\n  livereload. This will serve the blog on localhost, and automatically\n  rebuild it when any change is made (and I really mean any change: it can\n  even detect when you change Nikola itself).\n\n\nI have the following in my conf.py to deploy:\n\n\nDEPLOY_COMMANDS = [\n    \"git checkout gh-pages\",\n    \"rsync -rPv --delete-after --exclude old_blog --exclude .git --exclude .gitignore --exclude cache/ --exclude .doit.db.db output/ .\",\n    \"git add -A\",\n    \"git commit -a -m 'Updating blog content'\",\n    \"git push\",\n    \"git checkout master\",\n]\n\n\n\nWARNING: These commands are dangerous. If you don't properly exclude things\nlike .git, you will wipe your entire git history. I highly recommend\ncommitting everything and pushing to GitHub before deploying.\n\nUse\n\n_site/\n*.pyc\n.DS_Store\n.doit.db.db\ncache/\noutput/\n\n\n\nfor your .gitignore.\n\nDespite what it says on the Nikola page, be sure to read the docs, because\nthere are a lot of cool features you won't know about unless you read about\nthem. Also be sure to read through conf.py.\n\nWordpress import\nThis is something that I am still figuring out. You can see the progress at\n  http://asmeurer.github.io/blog/old_blog\nImporting from Wordpress is pretty easy actually (at least in theory). First\nyou need to go to the Wordpress site dashboard and go to \"Export\" from the\n\"Tools\" menu. From here you can download an XML file with all your\ncontent. Then just do\nnikola import_wordpress export_file.xml\n\n\n\nNote that the current version of Nikola as of this writing (6.3.0) doesn't do\nthis right, so you'll need to use the\ngit master. There are some issues with\nthe import, since Wordpress has its own markup that it doesn't know everything\nabout, so you may need to go in and fix things. Or report them as bugs to\nNikola and reimport when they are fixed.\nYou'll need to go through the posts and make sure that they are rendered\ncorrectly (this is one reason I haven't finished doing it yet).\nFor comments, you first need to create a Disqus account, and enable it in your\nconf.py. You should then upload the xml file that you exported from Wordpress\nto Disqus. At this point, the comments should just work, because Nikola sets\nthe Disqus url for the imported comments to the old Wordpress url (look at the\nDisqus section of one of the built pages).\nI don't know how to automatically backlink from Wordpress back to\nNikola. Maybe I should just automatically generate some links and paste them\nin manually.",
      "loc": "/posts/moving-to-github-pages-with-nikola/"
    }
  ]
}