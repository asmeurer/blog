{
  "pages": [
    {
      "loc": "/stories/python-trickery/", 
      "title": "Python Trickery", 
      "text": "Here are some bits of Python trickery that I have come across. Each of the\nfollowing is invalid syntax.  See if you can figure out why\n1 + not(2)\n\n\n\nf(*(\ni for i in range(10)\nif i % 2),\nx=3,)", 
      "tags": ""
    }, 
    {
      "loc": "/posts/moving-to-github-pages-with-nikola/", 
      "title": "Moving to GitHub pages with Nikola", 
      "text": "So I've finally decided to move my blog from Wordpress to GitHub pages.  I\nhighly recommend it if you are technically skilled enough to do it. I was\ngetting pretty annoyed at Wordpress. It forces you to write your posts in\nhtml (or else using their WYSIWYG editor), the wordpress.com is locked down,\nso you can't add any Javascript, their math is stuck in the past rendering png\ninstead of using MathJax. The list goes on.\nWith GitHub pages, I can write my posts in Markdown, and I have full control\nover everything. And there is no lock in. If I decide I don't like the\nsoftware that is generating the posts, I can easily move to something else,\nsince the post content itself is all Markdown (or the occasional rst or\nIPython notebook if I want to do something that Markdown doesn't support). I\ncan use MathJax for math (like \\( e{i\\pi} + 1 = 0 \\)). Wordpress.com\ndoesn't let you install abtirary Javascript on your blog, so you can't do\nthings like install MathJax or enable some cool sidebar thing (like a Twitter\nfeed).\nSetting up GitHub Pages\nFirst, you need to set up GitHub pages. This is a bit confusing, because there\nare actually two kinds of GitHub pages, user pages and project pages. User\npages are if you have a repo named username.github.io (or .com). The pages\nare served from the master branch.\nFor project pages, you add a gh-pages branch to any one of your projects,\nand GitHub hosts the content automatically at\nusername.github.io/projectname. I originally had my blog content at\nasmeurer.github.io, but I didn't like that I had to do everything in master,\nboth the generated and original content. So instead I created a repo called\nblog. I have my content in the master branch and the generated pages in\nthe gh-pages branch (more on this later). At my\nasmeurer.github.com repo,\nI just have for now a basic redirect to the blog. In the future, I may want to\nput additional, non-blog content on the website, and it would go there (or in\na separate project repo with its own gh-pages branch).\nNikola\nI had initially planned on using\nPelican. However, I got stalled on the\nWordpress import. I like that Pelican is written in Python, but I was not too\nkeen on their abrasive\nlicense. Frankly,\nI shouldn't say too many bad things about Pelican because I never really tried\nthat hard with it.\nI have decided to try Nikola instead. It's also\nwritten in Python. It has a very nice\nlicense. I like\nthe philosophy of the manual:\n\nDON'T READ THIS MANUAL. IF YOU NEED TO READ IT I FAILED, JUST USE THE THING.\n\nI've also discovered that the\nNikola community is\nvery nice. And of course, even if Nikola ends up not being for me, it will\nbe easy to switch, because my actual content is just some Markdown files that\nI own.\nGetting started\nGetting started with Nikola is pretty easy. First, you need to install it. It\nhas a ton of dependencies (fortunately all Python, so it won't be that\nhard). In addition to the ones in the requirements.txt, you should also\ninstall markdown and webassets. While using nikola, it will tell you if\nyou don't have something installed that you should, so if you see that, just\ninstall what it tells you to.  If you use conda and Mac OS X, I have\nuploaded all the dependencies to my Binstar,\nso you can just conda install -c asmeurer nikola. Oh and don't worry, Nikola\nand its dependencies fully support Python 3 (I wouldn't be using it if they\ndidn't).\nThen you just run the commands from\nhttp://getnikola.com/handbook.html#all-you-need-to-know.\nOne thing that doesn't tell you is that after you init the site, you should\nwalk through conf.py and change the settings to your liking.\nAnother trick not there is that you can add\neval \"`nikola tabcompletion`\"\n\n\n\nto your Bash profile to get tab completion.\nTricks\nHere are some useful tricks:\n\n\nTo enable MathJax, you have to type mathjax in a line by itself in the\nmetadata file. There are some bugs right now, but ideally you could do inline\nmath with $math$ and display math with $$math$$. $math$ doesn't work\ncurrently, but you can do \\\\(math\\\\) (both \\s are required, although this\nis likely a bug). You can do \\\\[math\\\\] for display math.  Here are some\nexamples. Inline: \\( \\sin 2{x} + \\cos2{x} = 1\\). Display: $$ e{i\\pi} + 1 = 0 .$$\n\n\nYour one-stop command when blogging is nikola auto. This requires\n  livereload. This will serve the blog on localhost, and automatically\n  rebuild it when any change is made (and I really mean any change: it can\n  even detect when you change Nikola itself).\n\n\nI have the following in my conf.py to deploy:\n\n\nDEPLOY_COMMANDS = [\n    \"git checkout gh-pages\",\n    \"rsync -rPv --delete-after --exclude old_blog --exclude .git --exclude .gitignore --exclude cache/ --exclude .doit.db.db output/ .\",\n    \"git add -A\",\n    \"git commit -a -m 'Updating blog content'\",\n    \"git push\",\n    \"git checkout master\",\n]\n\n\n\nWARNING: These commands are dangerous. If you don't properly exclude things\nlike .git, you will wipe your entire git history. I highly recommend\ncommitting everything and pushing to GitHub before deploying.\n\nUse\n\n_site/\n*.pyc\n.DS_Store\n.doit.db.db\ncache/\noutput/\n\n\n\nfor your .gitignore.\n\nDespite what it says on the Nikola page, be sure to read the docs, because\nthere are a lot of cool features you won't know about unless you read about\nthem. Also be sure to read through conf.py.\n\nWordpress import\nThis is something that I am still figuring out. You can see the progress at\n  http://asmeurer.github.io/blog/old_blog\nImporting from Wordpress is pretty easy actually (at least in theory). First\nyou need to go to the Wordpress site dashboard and go to \"Export\" from the\n\"Tools\" menu. From here you can download an XML file with all your\ncontent. Then just do\nnikola import_wordpress export_file.xml\n\n\n\nNote that the current version of Nikola as of this writing (6.3.0) doesn't do\nthis right, so you'll need to use the\ngit master. There are some issues with\nthe import, since Wordpress has its own markup that it doesn't know everything\nabout, so you may need to go in and fix things. Or report them as bugs to\nNikola and reimport when they are fixed.\nYou'll need to go through the posts and make sure that they are rendered\ncorrectly (this is one reason I haven't finished doing it yet).\nFor comments, you first need to create a Disqus account, and enable it in your\nconf.py. You should then upload the xml file that you exported from Wordpress\nto Disqus. At this point, the comments should just work, because Nikola sets\nthe Disqus url for the imported comments to the old Wordpress url (look at the\nDisqus section of one of the built pages).\nI don't know how to automatically backlink from Wordpress back to\nNikola. Maybe I should just automatically generate some links and paste them\nin manually.", 
      "tags": "mathjax"
    }, 
    {
      "loc": "/stories/about/", 
      "title": "About", 
      "text": "I am a graduate student in Mathematics New Mexico State University at Las Cruces, NM, though I reside in Albuquerque, NM for the summer time.", 
      "tags": ""
    }
  ]
}