<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>Aaron Meurer's Blog</title><link>http://asmeurer.github.io/</link><description>My blog</description><atom:link type="application/rss+xml" href="http://asmeurer.github.io/rss.xml" rel="self"></atom:link><language>en</language><lastBuildDate>Tue, 05 May 2015 01:08:59 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Python Trickery</title><link>http://asmeurer.github.io/posts/python-trickery/</link><dc:creator>Aaron Meurer</dc:creator><description>&lt;div&gt;&lt;p&gt;Here are some bits of Python trickery that I have come across. Each of the
following is invalid syntax.  See if you can figure out why&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;1 + not(2)
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start="2"&gt;
&lt;li&gt;
&lt;/li&gt;&lt;/ol&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;f(*(
i for i in range(10)
if i % 2),
x=3,)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><guid>http://asmeurer.github.io/posts/python-trickery/</guid><pubDate>Mon, 04 May 2015 19:11:46 GMT</pubDate></item><item><title>Playing with Swift and SpriteKit</title><link>http://asmeurer.github.io/posts/playing-with-swift-and-spritekit/</link><dc:creator>Aaron Meurer</dc:creator><description>&lt;div&gt;&lt;p&gt;I've always wanted to learn how to write native apps for iOS and the Mac as
long as either has existed.  However, the barrier of entry has always been too
high, given that I only ever had time to play with them as a hobby.  The
Objective-C programming language is a bit complicated to learn, especially
alongside all the memory management that you have to do (and it doesn't help
that Apple has gone through several memory management schemes through Mac OS X
versions).  To add on to that, the Cocoa framework is huge, and it's quite
daunting to even know where to get started with it.&lt;/p&gt;
&lt;p&gt;With Apple's announcement of the
&lt;a href="https://developer.apple.com/swift/"&gt;Swift programming language&lt;/a&gt; in June, it
was clear to me that the language would significantly lower the barrier of
entry.  The &lt;a href="https://developer.apple.com/xcode/downloads/"&gt;XCode 6 beta&lt;/a&gt; is
now public (i.e., you do not need to have a paid Apple Developer account to
access it), so anyone can play with Swift.&lt;/p&gt;
&lt;p&gt;Note that I am still &lt;em&gt;very&lt;/em&gt; new to both Swift and iOS development in general,
so it's quite likely that some of the things I mention here are actually bad
ideas.  If you know more than I do and spot a bad thing that I am doing,
please mention it in the comments.&lt;/p&gt;
&lt;p&gt;It's also possible that some of the assumptions I've made about the Swift
language or the SpriteKit framework are actually wrong. Please remember that I
am still a beginner and take what I say with a grain of salt.&lt;/p&gt;
&lt;h2&gt;The Swift Language&lt;/h2&gt;
&lt;p&gt;If you don't know how to program at all, I don't know how well this will work
for you. I already know several language, especially Python, so my experience
derives from that.&lt;/p&gt;
&lt;p&gt;First, read through the
&lt;a href="https://developer.apple.com/swift/resources/"&gt;Swift language guide&lt;/a&gt;. If you
have XCode 6, you can read it interactively as a Playground. I only have read
through the first part so far, which gives a high-level overview of the
language.&lt;/p&gt;
&lt;p&gt;The Swift language is actually quite easy to learn, especially if you already
know a high-level language like Python.  A few important things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;var&lt;/code&gt; and &lt;code&gt;let&lt;/code&gt; seem a bit confusing.  The difference is actually quite
simple: &lt;code&gt;var&lt;/code&gt; denotes a variable that can change and &lt;code&gt;let&lt;/code&gt; denotes a
variable that cannot.  You could in theory just use &lt;code&gt;var&lt;/code&gt; for everything,
but &lt;code&gt;let&lt;/code&gt; lets the compiler spot mistakes for you, and it also probably lets
it make your code faster.  If you intend to never change the value of a
variable, use &lt;code&gt;let&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift uses type inference, meaning that you usually don't need to specify
types. But when you do, you do so by putting a &lt;code&gt;:&lt;/code&gt; after the variable name,
like &lt;code&gt;var a: Int = 2&lt;/code&gt; or &lt;code&gt;func f(a: Int)&lt;/code&gt;.  The exception is the return type
of a function, which uses the arrow &lt;code&gt;-&amp;gt;&lt;/code&gt; (if you are familiar with Python 3
type annotations, the syntax is exactly the same), &lt;code&gt;func f(a: Int) -&amp;gt; Int&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift uses &lt;code&gt;?&lt;/code&gt; after a type name to indicate that a variable could be its
given type, or &lt;code&gt;nil&lt;/code&gt;. If you are familiar with Haskell, this is like the
Maybe monad.  I know very little Haskell, so I don't know if Swift's
implementation of &lt;code&gt;?&lt;/code&gt; is truly a Monad.&lt;/p&gt;
&lt;p&gt;Roughly speaking, in many circumstances, you don't know if a variable will
actually be the given type or not. A good example of this is with
dictionaries. &lt;code&gt;var a: [String: Int]&lt;/code&gt; creates a dictionary that maps
strings to integers. If you manipulate this dictionary, and then access a
key from it, like &lt;code&gt;a[b]&lt;/code&gt;, there is no way for the compiler to know if that
key will really be in the dictionary. If the key is in the dictionary, you
will get the value of that key. Otherwise, you will get &lt;code&gt;nil&lt;/code&gt;. Hence, the
type of &lt;code&gt;a[b]&lt;/code&gt; is &lt;code&gt;Int?&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Swift uses &lt;code&gt;!&lt;/code&gt; to indicate that the value is not &lt;code&gt;nil&lt;/code&gt;, which tells the
compiler to compile code that doesn't check for that case.&lt;/p&gt;
&lt;p&gt;For the most part, you can ignore this as well, at least when you
start. Just write code as you would, let XCode add in the types for you, and
only worry about types if the compiler tells you something is wrong.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Swift functions often require the parameters be named, for instance, you
have to write &lt;code&gt;CGSize(width: 1, height: 2)&lt;/code&gt; instead of just &lt;code&gt;CGSize(1, 2)&lt;/code&gt;. This is both for clarity (the former is much easier to read if you
aren't familiar with the API for &lt;code&gt;CGSize&lt;/code&gt;), and because Swift allows
polymorphism, i.e., you can define different initializers for the same class
with different type signatures. For example, &lt;code&gt;CGRect&lt;/code&gt; can be initialized as
&lt;code&gt;CGRect(origin: CGPoint, size: CGSize)&lt;/code&gt; or &lt;code&gt;CGRect(x: Int, y: Int, width: Int, height: Int)&lt;/code&gt;. This can lead to ambiguities in some cases unless you
explicitly tell the compiler which version to use.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I've found Swift to be a very strict language. I don't mean this in the sense
described by
&lt;a href="https://en.wikipedia.org/wiki/Strict_programming_language"&gt;this Wikipedia article&lt;/a&gt;. What
I mean is that Swift typically only lets you do things one way.  This is
similar to Python's "one way to do it," except Swift enforces this at the
language level.&lt;/p&gt;
&lt;p&gt;A nice example of this is that I rarely get a warning from the Swift compiler.
Just about every message I've gotten from the compiler has been an error. The
difference is that the program will still compile and run with a warning. This
is different from C, C++, and Objective-C, which have many warnings that the
compiler will still compile with. These warnings usually are for things like
an incorrect pointer type. Since there is really only one type in C, the
integer (because all data in memory is just integers), the program can still
run even if you mix your types up a bit.&lt;/p&gt;
&lt;p&gt;There are also many cases where Swift seems maybe too strict about things,
although it's clear that it is doing it to try to stray people away from
common mistakes and antipatterns. For example, the condition of an &lt;code&gt;if&lt;/code&gt;
statement in Swift must always be of type &lt;code&gt;Bool&lt;/code&gt;. Unlike languages like
Python, things do not have implicit boolean values. &lt;code&gt;if 1&lt;/code&gt; is a syntax
error. So is &lt;code&gt;if a&lt;/code&gt; unless &lt;code&gt;a&lt;/code&gt; is type &lt;code&gt;Bool&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This ends up not being a big problem. The things Swift forces you to do feel
like good programming practices.  This is not unlike how Python "forces" you
to keep your code indented correctly.  It feels very different from a language
like Java, where the things that you are forced to do all feel like they are
there simply to make the compiler writer's life easier.  And indeed, unlike
Java and Objective-C and much like Python, Swift code requires very little
boilerplate.  There are no header files for instance.&lt;/p&gt;
&lt;p&gt;So all said and done, I like Swift. I don't like it as much as Python (I also
don't have my head wrapped around it as much as Python). But it's far better
than Objective-C, and that's what matters. Frankly, my biggest gripe with it
is the ubiquitous use of CamelCasing and two letter prefixing (&lt;code&gt;NS&lt;/code&gt;, &lt;code&gt;CG&lt;/code&gt;,
&lt;code&gt;SK&lt;/code&gt;; I don't know if there's a name for this) in the API. I adamantly refuse
to do this with my own variables, because I believe CamelCase reduces
readability over underscore_casing. I like the Python convention to use
underscore_casing for variables, functions, and methods, and CamelCase for
classes (because classes are kind of like proper nouns, and CamelCase is as
close to Capitalization as possible in programming language conventions).&lt;/p&gt;
&lt;h2&gt;Learn to read Objective-C&lt;/h2&gt;
&lt;p&gt;While it is not necessary to write Objective-C any more, it is a good idea to
know how to read it. The reason is that a lot of good resources on the
internet are still in Objective-C (also a lot of Apple's example
documentation). The API names are the same, so this mainly boils down to
understanding how to convert the basic syntax to Swift. Reading the section of
the &lt;a href="https://en.wikipedia.org/wiki/Objective_C#Syntax"&gt;Wikipedia article&lt;/a&gt; on
the syntax of Objective-C should be enough.&lt;/p&gt;
&lt;p&gt;For instance&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-objective-c"&gt;[touch locationInNode:self]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;would be translated to&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-swift"&gt;touch.locationInNode(self)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Use XCode&lt;/h2&gt;
&lt;p&gt;If you are comfortable with the Swift language itself, you should get started
with a project.&lt;/p&gt;
&lt;p&gt;First off, you should use XCode to edit your code, at least to begin with,
even if you are accustomed to using another editor.  The reason is that XCode
is going to do a lot of things for you which will make your life easier and
reduce the complexity significantly as you get started.  Once you are
comfortable, you can move to another editor.&lt;/p&gt;
&lt;p&gt;Some things that XCode will do for you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Autocompletion&lt;/strong&gt;: The best way to figure out the Cocoa APIs is to use the
autocompletion. This pops up when you want to override a method in a
subclass, create an object from an existing class, access an attribute of a
class, or instantiate a class or call a function (remember that Swift is
polymorphic, so it's useful to know all the possible ways to instantiate a
class or call a function).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Compiler errors and warnings&lt;/strong&gt;: Swift, being a strictly typed language,
will give you a lot of useful compiler errors. It's pretty hard to write a
program incorrectly from a type point of view, and have it even compile.
XCode integrates this nicely, and it even offers suggestions on how to fix
things every once in a while (so that you can just click the button and have
it fixed inline).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Direct interaction with the iOS Simulator&lt;/strong&gt;: One button will compile your code
and start the simulator. If your target is Mac OS X, it will open the
application.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Debugger&lt;/strong&gt;: Clicking to the left of a line will set a breakpoint in the
debugger.  The Swift debugger seems pretty limited right now. I wasn't able
to get any useful information out of the variables view when I used it.  But
in my experience using XCode in the past to debug C, its graphical debugger
is one of the best.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Configuration settings&lt;/strong&gt;: If you click on the XCode project in the files
view (the root node of all the files), you get a view with all the different
settings for your project. Most of these you probably won't want to change,
but a few are important, like what devices and orientations you want to
allow, what operating system versions you want to support, and the name and
version of your project.  Editing these outside of XCode requires editing an
XML file, which is no fun.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, any editor can potentially do these things, and I'm really looking
forward to the point where I can just use Emacs to edit Swift code, as the
XCode editor as an editor is quite annoying.  XCode was the editor that I used
before I switched to using Emacs, and it's not gotten much better. There are
still several visual glitches in the editor environment, especially with the
scope coloring and syntax highlighting. You can edit the keyboard shortcuts in
the XCode setting to get some things the way you like them (although I found
that trying to set TAB to autoindent did not work). You can also use a tool
like &lt;a href="https://pqrs.org/osx/karabiner/"&gt;Karabiner&lt;/a&gt; (previously
KeyRemap4MacBook) to enable Vim or Emacs editor shortcuts everywhere
(including XCode). It doesn't help that XCode 6 is still in beta (at some
point the editor backend died and all syntax highlighting and tab completion
stopped working; I managed to fix it by removing a spurious &lt;code&gt;!&lt;/code&gt; in the code)&lt;/p&gt;
&lt;h2&gt;The iOS Simulator&lt;/h2&gt;
&lt;p&gt;One disappointing thing that I learned is that you cannot run any iOS program
you write on an iOS device unless you are in the paid developer program (or if
you Jailbreak and are willing to go through some hoops). The iOS developer
program costs $100 a year, and since I'm not sure yet how far I am going to go
with this, I am holding off on it.&lt;/p&gt;
&lt;p&gt;The only other option then is to run on the simulator. The simulator is fine,
the only issue is that there are limits to how you can simulate a touch screen
on a computer with a mouse.&lt;/p&gt;
&lt;p&gt;A few things to note about the simulator:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;There are several things you can do with the "hardware" from the hardware
menu, such as rotating the device or pressing the home button.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It's worth remembering the keyboard shortcut for pressing the home button,
⇧⌘H, as you can press it twice in quick succession just like on a real
device to open the task manger. You can then drag your app up to completely
reset it, without having to restart the simulator.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The retina iPad is taller than your display, even if you have a 15" retina
display. So be aware that you will need to scroll up and down to see it
all. Alternately, you can use a smaller device, like an iPhone, or rotate it
to landscape, where it all fits.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The only way to do multitouch is to hold down the Option key. This will
create two fingers.  However, it's quite limited as the two fingers are
always centered around the center of the screen. Therefore if you want to
test multitouching two objects, you'll have to position them symmetrically so
that you can grab them both.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Getting started with a project&lt;/h2&gt;
&lt;p&gt;The best way to start is to start a template project with XCode. I personally
started with a SpriteKit game for iOS. This created a basic template "Hello
World" Swift file with the basic &lt;code&gt;SKScene&lt;/code&gt; subclass. Go ahead and compile and
run this in the simulator to see what it does.&lt;/p&gt;
&lt;p&gt;There are four important methods of &lt;code&gt;SKScene&lt;/code&gt; which you will want to override,
&lt;code&gt;didMoveToView&lt;/code&gt;, &lt;code&gt;touchesBegan&lt;/code&gt;, &lt;code&gt;touchesEnded&lt;/code&gt;, and &lt;code&gt;update&lt;/code&gt;. &lt;code&gt;didMoveToView&lt;/code&gt;
is the initializer for the scene.  Anything that should be set up and appear
from the very beginning should go there. &lt;code&gt;touchesBegan&lt;/code&gt; and &lt;code&gt;touchesEnded&lt;/code&gt; are
called when a finger touches the screen and when it leaves the screen,
respectively. Remember always that iOS devices are multitouch devices, so
these events can happen concurrently, and there can be multiple touches
happening at once.  The first argument to these methods is a set of touches,
which you should iterate over to perform actions (the "Hello World" example
shows how to do this). Finally, the &lt;code&gt;update&lt;/code&gt; method is called every time the
scene is updated, at each "frame" essentially.&lt;/p&gt;
&lt;p&gt;There are other methods, for instance, &lt;code&gt;touchesMoved&lt;/code&gt;. However, I discovered
that you don't actually want to use &lt;code&gt;touchesMoved&lt;/code&gt; to do what you would think
you'd use it for, namely, to move stuff around. The reason is that there is no
easy way to sync up multitouches between &lt;code&gt;touchesBegan&lt;/code&gt; (where you know what
thing the finger started on) and &lt;code&gt;touchesMoved&lt;/code&gt; to move it around. It works
well for a single touch, but if you want to be able to move multiple things
around at once (which I highly recommend, as it leads to a much nicer user
experience), you have to do things a little differently, as I'll explain
below.&lt;/p&gt;
&lt;h2&gt;Adding some objects to your environment&lt;/h2&gt;
&lt;p&gt;There are a lot of classes to create various objects of various shapes. I
started with &lt;code&gt;SKSpriteNode&lt;/code&gt;, which creates a simple square, because I wanted
to play around with touch events.&lt;/p&gt;
&lt;p&gt;I started out with four sprites (yes, it would be better to put these in an
array, and probably abstract them to a method):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-swift"&gt;let sprite1 = SKSpriteNode(color: UIColor(red: 1.0, green: 0.0, blue: 0.0, alpha: 1.0), size: CGSize(width: 30, height: 30))
let sprite2 = SKSpriteNode(color: UIColor(red: 0.0, green: 1.0, blue: 0.0, alpha: 1.0), size: CGSize(width: 30, height: 30))
let sprite3 = SKSpriteNode(color: UIColor(red: 0.0, green: 0.0, blue: 1.0, alpha: 1.0), size: CGSize(width: 30, height: 30))
let sprite4 = SKSpriteNode(color: UIColor(red: 1.0, green: 1.0, blue: 0.0, alpha: 1.0), size: CGSize(width: 30, height: 30))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These lines go at the class level. This lets them be accessed from within any
method of the class.&lt;/p&gt;
&lt;p&gt;One thing I could not figure out how to do was how to access class variables
from within other class variables.  In Python, you can do&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-py"&gt;class Test:
    a = 1
    b = a + 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But in Swift, if you do&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-swift"&gt;class Test {
    let a = 1
    let b = a + 1
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;it tells you that &lt;code&gt;Test.Type does not have a member named 'a'&lt;/code&gt; on the &lt;code&gt;let b = a + 1&lt;/code&gt; line.&lt;/p&gt;
&lt;p&gt;You may have to use properties with getters and setters in this case, which I
didn't feel like fooling with. The result is that I did not abstract out the
&lt;code&gt;CGSize(width: 30, height: 30)&lt;/code&gt; into a common variable.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;didMoveToView&lt;/code&gt; method then becomes&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-swift"&gt;override func didMoveToView(view: SKView) {
    let center = CGPoint(x:CGRectGetMidX(self.frame), y:CGRectGetMidY(self.frame))

    for s in [sprite1, sprite2, sprite3, sprite4] {
        s.position = center

        self.addChild(s)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;self.addChild&lt;/code&gt; is the most important method here, as it actually puts the
sprite in the main view. If you forget this line, none of the sprites will
show up.&lt;/p&gt;
&lt;p&gt;If you run this, you will only see the yellow box, because you put them all on
top of one another in the center of the view.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://asmeurer.github.io/galleries/swift-game-1.png" width="500"&gt;&lt;/p&gt;
&lt;h2&gt;Adding Basic Physics&lt;/h2&gt;
&lt;p&gt;We could change the positions so that they do not overlap, but the option I
went with was to play around with the physics a little. &lt;code&gt;SpriteKit&lt;/code&gt; has a nice
2D physics engine built in, and it's quite easy to use.&lt;/p&gt;
&lt;p&gt;So my final &lt;code&gt;didMoveToView&lt;/code&gt; was&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-swift"&gt;override func didMoveToView(view: SKView) {
    /* Setup your scene here */
    let center = CGPoint(x:CGRectGetMidX(self.frame), y:CGRectGetMidY(self.frame))

    for s in [sprite1, sprite2, sprite3, sprite4] {
        s.position = center

        var physics_body = SKPhysicsBody(rectangleOfSize: CGSize(width: 30, height: 30))

        physics_body.affectedByGravity = false
        physics_body.allowsRotation = false

        s.physicsBody = physics_body
        self.addChild(s)
    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For each sprite, I create an &lt;code&gt;SKPhysicsBody&lt;/code&gt; with the exact same size as the
&lt;code&gt;SKSpriteNode&lt;/code&gt;s (there's probably a more direct way to do this), and attach it
to that node. The &lt;code&gt;affectedByGravity&lt;/code&gt; property is important. If you don't set
it to &lt;code&gt;false&lt;/code&gt;, all the objects will fall off the bottom of the screen. I
disabled &lt;code&gt;allowsRotation&lt;/code&gt; because I wanted my squares to stay
upright. Otherwise when when the squares hit one another they will rotate in
space.&lt;/p&gt;
&lt;p&gt;Now &lt;code&gt;SceneKit&lt;/code&gt; will prevent the squares from overlapping with one another, even
if we put them on top of each other as we have done.&lt;/p&gt;
&lt;p&gt;So now when we start the simulator, we see&lt;/p&gt;
&lt;p&gt;&lt;img src="http://asmeurer.github.io/galleries/swift-game-2.png" width="500"&gt;&lt;/p&gt;
&lt;h2&gt;Making the squares movable&lt;/h2&gt;
&lt;p&gt;Now, let's make it so that we can move these squares around.  The correct way
to do this took me some time to figure out.  I finally got some hints from
&lt;a href="http://eppz.eu/blog/spritekit-drag/"&gt;this site&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The key thing here is that the &lt;code&gt;UITouch&lt;/code&gt; objects remain the same objects for
the duration of the touch. Their position is updated when the touch
moves. Hence, you just need to associate each touch with the node that was
touched when the touch began, and move the node to the position of that touch
with each update.&lt;/p&gt;
&lt;p&gt;To start, we will create a dictionary on the class mapping touches to nodes&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-swift"&gt;var selected: [UITouch: SKNode] = [:]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, in the &lt;code&gt;touchesBegan&lt;/code&gt; method, map every touch to the node that it
touches.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-swift"&gt;override func touchesBegan(touches: NSSet, withEvent event: UIEvent) {
    /* Called when a touch begins */

    selected = [:]
    for touch: AnyObject in touches {
        let location = touch.locationInNode(self)

        selected[touch as UITouch] = nodeAtPoint(location)

    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;as UITouch&lt;/code&gt; part is needed because the compiler only knows that touch is
&lt;code&gt;AnyObject&lt;/code&gt;. This was one of the things that was helpfully suggested by the
compiler, so I did not really need to know what I was doing to get it right.&lt;/p&gt;
&lt;p&gt;Note that even if you touch the background behind the squares, you are still
touching a node, namely, the &lt;code&gt;GameScene&lt;/code&gt; node itself (the node for the class
you are working on).  This is a very important observation, as it will tell us
how to get the right position for the node when we update it. It also means
that we should keep track of which nodes we actually want to be moved by the
touch. Trying to move the &lt;code&gt;GameScene&lt;/code&gt; node is ignored, at leads to a lot of
console logs, so we should avoid it.&lt;/p&gt;
&lt;p&gt;Next, let's write the &lt;code&gt;touchesEnded&lt;/code&gt; method. This method is simple. If a touch
ends (the finger is removed from the screen), we should remove it from the
&lt;code&gt;selected&lt;/code&gt; dictionary.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-swift"&gt;override func touchesEnded(touches: NSSet, withEvent event: UIEvent) {
    for touch: AnyObject in touches {
    selected[touch as UITouch] = nil
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To delete an item from a dictionary in Swift, just set it to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, finally, we need to write the &lt;code&gt;update&lt;/code&gt; method to move the node to the
current position of the touch.&lt;/p&gt;
&lt;p&gt;The simplest way to do this is&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-swift"&gt;override func update(currentTime: CFTimeInterval) {
    /* Called before each frame is rendered */
    for (touch, node) in selected {
        if !contains([sprite1, sprite2, sprite3, sprite4], node) {
            continue
        }
        let location = touch.locationInNode(self)
        node.position = location
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that we only modify the position for the four sprite nodes.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;touch.locationInNode(self)&lt;/code&gt; part took me a long time to figure out. There
are other methods, like &lt;code&gt;touch.locationInView(nil)&lt;/code&gt;, but this does something
very strange where the the horizontal axis was doubled (moving the touch one
inch moved the object two inches), and the vertical axis was inverted. If
someone knows what was going on there, please let me know.&lt;/p&gt;
&lt;p&gt;Modifying the position directly is nice, but it's nice to play around a little
bit with a third thing from SpriteKit, actions.&lt;/p&gt;
&lt;p&gt;What we will do instead of setting the position of the node is to tell
SpriteKit to move the node there in a certain amount of time. If we make this
time small enough, like &lt;code&gt;0.01&lt;/code&gt; seconds, it will appear to act exactly the
same. If we up this time, there will be a smooth "lag" where the node catches
up to the touch. Because the movement always happens in the same amount of
time, it will move faster if the finger is farther away. This gives the
squares a nice "frictioney" effect with some springiness to it, which is quite
nice.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-swift"&gt;override func update(currentTime: CFTimeInterval) {
    /* Called before each frame is rendered */
    for (touch, node) in selected {
        if !contains([sprite1, sprite2, sprite3, sprite4], node) {
            continue
        }
        let location = touch.locationInNode(self)
        let action = SKAction.moveTo(location, duration: 0.1)
        node.runAction(SKAction.repeatAction(action, count: 1))
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are many other actions we can perform, like rotations and color
changes.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Here is an example of the movement. You can see it works even with
multitouch.  You can also see the collision physics cause the other squares to
move out of the way when another square hits them.&lt;/p&gt;
&lt;video src="http://asmeurer.github.io/SpriteKit-Example.mp4" autoplay width="500" loop&gt;
  Your browser does not support the video tag.
&lt;/video&gt;
&lt;p&gt;Here you can see the movement lag caused by using &lt;code&gt;SKAction.moveTo&lt;/code&gt; with
&lt;code&gt;duration: 0.1&lt;/code&gt; (note that the mouse itself jumps a bit at the beginning, but
this is due to lag in the recording).&lt;/p&gt;
&lt;video src="http://asmeurer.github.io/SpriteKit-Example-2.mp4" autoplay width="500" loop&gt;
  Your browser does not support the video tag.
&lt;/video&gt;
&lt;p&gt;I have uploaded the full code to
&lt;a href="https://github.com/asmeurer/GameTest/blob/blog/GameTest/GameScene.swift"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This isn't exactly a "game", but it does lay down the foundations for what you
would need to write a game in Swift using SpriteKit.  At least for me, it
shows me the technical basics of how to write some games that I had thought
about, which mostly involve making shapes and moving them around the screen.&lt;/p&gt;
&lt;!--  LocalWords:  func Haskell CGSize CGRect CGPoint locationInNode SKScene
 --&gt;
&lt;!--  LocalWords:  touch.locationInNode Karabiner KeyRemap4MacBook SpriteKit
 --&gt;
&lt;!--  LocalWords:  didMoveToView touchesBegan touchesEnded touchesMoved py
 --&gt;
&lt;!--  LocalWords:  SKSpriteNode sprite1 UIColor sprite2 sprite3 sprite4 'a'
 --&gt;
&lt;!--  LocalWords:  Test.Type SKView CGRectGetMidX self.frame CGRectGetMidY
 --&gt;
&lt;!--  LocalWords:  s.position self.addChild img src SKPhysicsBody SceneKit
 --&gt;
&lt;!--  LocalWords:  rectangleOfSize body.affectedByGravity body.allowsRotation
 --&gt;
&lt;!--  LocalWords:  s.physicsBody affectedByGravity allowsRotation UITouch
 --&gt;
&lt;!--  LocalWords:  SKNode NSSet withEvent UIEvent AnyObject nodeAtPoint
 --&gt;
&lt;!--  LocalWords:  GameScene currentTime CFTimeInterval node.position
 --&gt;
&lt;!--  LocalWords:  frictioney SKAction.moveTo node.runAction autoplay
 --&gt;
&lt;!--  LocalWords:  SKAction.repeatAction
 --&gt;&lt;/div&gt;</description><guid>http://asmeurer.github.io/posts/playing-with-swift-and-spritekit/</guid><pubDate>Sun, 17 Aug 2014 16:31:11 GMT</pubDate></item><item><title>SciPy 2014</title><link>http://asmeurer.github.io/posts/scipy-2014/</link><dc:creator>Aaron Meurer</dc:creator><description>&lt;div&gt;&lt;p&gt;I just finished &lt;a href="https://conference.scipy.org/scipy2014/"&gt;SciPy 2014&lt;/a&gt;, a
week-long conference in Austin, TX for scientific computing with Python.&lt;/p&gt;
&lt;p&gt;This is my third SciPy (I have been to
&lt;a href="https://asmeurersympy.wordpress.com/2011/07/17/the-scipy-2011-conference/"&gt;2011&lt;/a&gt;
and &lt;a href="https://asmeurersympy.wordpress.com/2013/07/02/scipy-2013/"&gt;2013&lt;/a&gt;). This
year, the conference was noticeably larger. Last year there were
&lt;a href="http://andy.terrel.us/blog/2013/07/05/scipy2013-recap/"&gt;~350 people&lt;/a&gt;, this
year, there were
&lt;a href="https://twitter.com/scopatz/status/488370261150818304"&gt;~450 people&lt;/a&gt;.  Aside
from there being a lot more people, and the main keynotes taking place in a
larger room, the most noticeable consequence of this is that there were three
days of talks this year, and three concurrent tracks of talks all three days
(last year there were two of each). The conference consisted of two days of
tutorials, three days of talks, and two days of sprints, running from July 5
to July 12.&lt;/p&gt;
&lt;h2&gt;Tutorials&lt;/h2&gt;
&lt;p&gt;The conference started on Sunday with tutorials. I gave a tutorial on SymPy
with &lt;a href="http://matthewrocklin.com/blog/"&gt;Matthew Rocklin&lt;/a&gt; and
&lt;a href="http://www.moorepants.info/blog/"&gt;Jason Moore&lt;/a&gt;. The videos are on YouTube
(parts &lt;a href="https://www.youtube.com/watch?v=Lgp442bibDM"&gt;one&lt;/a&gt;,
&lt;a href="https://www.youtube.com/watch?v=_PTe10whFKo"&gt;two&lt;/a&gt;,
&lt;a href="https://www.youtube.com/watch?v=qleGSnrnxgc"&gt;three&lt;/a&gt;, and
&lt;a href="https://www.youtube.com/watch?v=04AGOl1P2U4"&gt;four&lt;/a&gt;).  I gave tutorials for
SymPy the previous two times I was at SciPy, although with different people
(with Mateusz Paprocki in 2011 and
&lt;a href="http://ondrejcertik.blogspot.com/"&gt;Ondřej Čertík&lt;/a&gt; in 2013). I really enjoy
seeing new people learn about SymPy, and working with Matthew Rocklin, who is
a very good speaker and teacher.&lt;/p&gt;
&lt;p&gt;I also attended the tutorial on PyDy by Jason Moore, Gilbert Gede, and
Obinna Nwanna (parts &lt;a href="https://www.youtube.com/watch?v=lWbeuDwYVto"&gt;one&lt;/a&gt;
and &lt;a href="https://www.youtube.com/watch?v=1-KqRvNX0po"&gt;two&lt;/a&gt;).  This tutorial was
also well done, and I highly recommend it if you are interested in Newtonian
mechanics.&lt;/p&gt;
&lt;p&gt;I unfortunately was unable to attend any of the other tutorials, but I heard
good things about them, especially the
&lt;a href="https://www.youtube.com/watch?v=vWkgEddb4-A"&gt;Julia tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Talks&lt;/h2&gt;
&lt;p&gt;From Tuesday to Thursday were talks. The quality of talks this year was very
high. The SciPy talks have always been high quality talks, but this year I
felt that they were particularly good. I don't think I saw a bad talk.&lt;/p&gt;
&lt;p&gt;Thus, I can't really recommend the good talks that I saw without recommending
all of them. You should go to YouTube and the
&lt;a href="https://conference.scipy.org/scipy2014/schedule/"&gt;SciPy schedule&lt;/a&gt; and watch
any talk that looks interesting.&lt;/p&gt;
&lt;p&gt;I therefore am going to recommend here the very best talks.  Two talks in
particular stood out to me as the best.&lt;/p&gt;
&lt;p&gt;First is Greg Wilson's Thursday keynote, which is among the best talks I've
ever seen from any conference.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;center&gt;&lt;iframe width="560" height="315" src="//www.youtube.com/embed/1e26rp6qPbA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/center&gt;
&lt;p&gt;Greg mentions a lot of ideas, quite a few of which are controversial, which I
think always makes for an interesting talk (it also means that I don't agree
with everything he said, although I do agree with most of it). Most of the
talk is about pedagogy, especially regarding his experiences at
&lt;a href="http://software-carpentry.org/"&gt;Software Carpentry&lt;/a&gt;. Some things he posited:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;There is actually good research about what methods work and don't work in
teaching. He referenced
&lt;a href="http://www.slideshare.net/richardcookau/john-hattie-effect-sizes-on-achievement"&gt;this presentation&lt;/a&gt;,
which lists just about every possible pedagogical method, and the net
difference that it has on students, based on over 50,000 studies. For
example, individualized instruction has a very small positive effect,
whereas teacher feedback has a very large positive effect. Since each takes
time and resources, we should focus on those effects that have the highest
impact. Greg pointed out that web-based learning has very little positive
effect, and hence is a waste of time and money. The most effective change is
removing disruptive students.&lt;/p&gt;
&lt;p&gt;In particular, I liked the quote, "if you want more computing in high
school, you have to tell me what to take out."  People like to go on that
schools need to teach more of this or more of that, and computing and
programming tends to be high on that list these days, but anyone who does
not discuss what things should be removed from the curriculum, which is
already quite full, is not being honest about the discussion.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The other big point Greg made is that we need more incremental massive
collaboration in teaching. This is the same model that has built open source
and Wikipedia, but is mostly absent from teaching. Incremental change is
important here, as well. It is more useful for someone to contribute fixes
to existing lesson plans, so that they become better for the students, but
in his experience, people are much more willing to add new lessons.  Greg
calls for a "culture of patching". If incremental change could be adopted in
teaching, teachers could aggregate methods and lesson plans, removing the
massive duplication, and most importantly, making teaching materials that
actually work for students to learn. Greg Wilson asks why open source and
Wikipedia are able to thrive on massive &lt;em&gt;incremental&lt;/em&gt; change, but teaching
is not, a question he hasn't found the answer to.&lt;/p&gt;
&lt;p&gt;My thought on the matter is that unlike writing software or collecting and
presenting facts, pedagogy is very difficult. If I contribute a patch to
an open source project that fixes a bug, I can run the tests to see if my
fix is "correct". If I fix an incorrect fact on Wikipedia, it is less
easy, but I can still cite and check references to make sure it is
correct.  But for teaching, it is very difficult to know what methods work
and what don't, and as Greg pointed out at the beginning of his talk, the
effects of different methods can be very counterintuitive.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The second talk that I recommend is
&lt;a href="http://jakevdp.github.io/"&gt;Jake VanderPlas&lt;/a&gt;'s talk about Frequentism and
Bayesianism.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;center&gt;&lt;iframe width="560" height="315" src="//www.youtube.com/embed/KhAUfqhLakw" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/center&gt;
&lt;p&gt;I won't summarize this talk, as Jake has done a much better job in his blog
(parts
&lt;a href="http://jakevdp.github.io/blog/2014/03/11/frequentism-and-bayesianism-a-practical-intro/"&gt;one&lt;/a&gt;,
&lt;a href="http://jakevdp.github.io/blog/2014/06/06/frequentism-and-bayesianism-2-when-results-differ/"&gt;two&lt;/a&gt;,
&lt;a href="http://jakevdp.github.io/blog/2014/06/12/frequentism-and-bayesianism-3-confidence-credibility/"&gt;three&lt;/a&gt;,
and
&lt;a href="http://jakevdp.github.io/blog/2014/06/14/frequentism-and-bayesianism-4-bayesian-in-python/"&gt;four&lt;/a&gt;). The
best thing is to just watch the talk.  I will just point out that before the
talk, I did not really understand the difference, not being a statistician or
someone who works with statistics regularly, and having seen the talk, I now
feel that I do.  It's a controversial topic, and if you care about the matter,
you should know that Jake is a strong Bayesian, although I felt that he gave
both sides a fair exposition.&lt;/p&gt;
&lt;p&gt;Again, all talks I saw at the conference were good. But those two I felt were
the best. I should also mention here that I myself gave a talk on Conda (more
on that later).&lt;/p&gt;
&lt;h2&gt;The Conference&lt;/h2&gt;
&lt;p&gt;Of course, the talks are only a part of any conference. The best part of SciPy
is the gathering of the community. Each year I meet more new people, as well
as talk with people I already know, but don't get to see outside of SciPy.&lt;/p&gt;
&lt;p&gt;For me, the biggest part of the interactions this year were on Conda and
packaging.  The background is that I have been working full time for Continuum
since January, and I had interned last summer, working primarily on the Conda
package manager and Anaconda, the Python distribution.  This year, some of the
biggest buzz at the conference was about Conda. I'm obviously selection
biased, because people came to me specifically to talk about Conda, but I also
overheard it in other people's conversations, in several of the presentations,
and frankly, the people who did talk to me about Conda were &lt;em&gt;very&lt;/em&gt; excited
about it.  Just like everyone was talking about the IPython Notebook last year
and how it has solved the fundamental problems of sharing and presenting data
analysis, this year, everyone thanked me for my work on Conda and how it has
basically solved the packaging problem, the ubiquitous problem in Python since
people started using it.&lt;/p&gt;
&lt;h3&gt;Conda: The Packaging Problem Solved&lt;/h3&gt;
&lt;p&gt;Here is the talk I gave on Conda:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;center&gt;&lt;iframe width="560" height="315" src="//www.youtube.com/embed/UaIvrDWrIWM" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/center&gt;
&lt;p&gt;I made the claim in my talk that Conda has solved the packaging problem, and
the general feel from people I talked to who are using Conda is that it has.&lt;/p&gt;
&lt;p&gt;I think this slide from my presentation summarizes why Conda solves the
packaging problem.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://asmeurer.github.io/galleries/conda_scipy2014_slide.png" width="500"&gt;&lt;/p&gt;
&lt;p&gt;One of the most amazing things about the scientific Python community, and one
of the things that I think really sets it apart from other Python communities,
is the use of Python alongside other languages, such as C, C++, Fortran, R, or
Julia.  No one language is enough to get the job done for serious scientific
work.  The fundamental brokenness of Python packaging has been that it has
focused too much on Python specific tools and processes.  The
distutils/setuptools/pip/virtualenv stack works great if your code begins and
ends with Python.  Where it falls over is when you want to link against a C
library, compile some Fortran or Cython code, and communicate with other
languages like R and Julia.  By being a system level package manager, which is
fundamentally Python agnostic, Conda is able to deal with all packages
equally, whether that package be a Python package, a C extension which other
packages link against, or Python itself.&lt;/p&gt;
&lt;p&gt;By being truly cross-platform and user installable, Conda is able to reach the
maximal number of users, especially those who have historically been hit by
the packaging problem the hardest:  those who are on Windows or those who do
not have admin rights to install necessary tools to install the packages they
need.&lt;/p&gt;
&lt;p&gt;Finally, Conda installs binaries, not source packages, and its metadata is
entirely static (you do not need to execute arbitrary Python code to capture
the metadata of a package).  These two things remove two of the largest
sources of issues with the existing Python packaging tools, such as compiler
errors, and nonuniformity in metadata standards (there seem to be as many
different ways of writing &lt;code&gt;setup.py&lt;/code&gt; as there are packages on PyPI), by
removing arbitrary code execution from package installation.&lt;/p&gt;
&lt;p&gt;Conda opens up its ecosystem to anybody by making it easy for people to build
their own Conda packages using reproducible Conda recipes.  And
&lt;a href="https://binstar.org/"&gt;Binstar&lt;/a&gt; makes it easy to share those packages.  I'm
very excited about Binstar, as I think it does for packaging what GitHub has
done for open source, i.e., distributes and democratizes it. There are
challenges on how to deal with this, of course. As with any distributed
democratized system, Binstar can be a wild west of packages.  Continuum is
thinking about ways to manage this complexity, while still reaping the
benefits it provides. If you have any thoughts on things that can be done, let
me know in the comments section below.&lt;/p&gt;
&lt;p&gt;Of course, solving the packaging problem and removing it are different
things.  Conda does not make it easier to compile difficult packages.  It only
makes it so that fewer people have to do it.  And there is still work to be
done before Conda really takes over the world.&lt;/p&gt;
&lt;h2&gt;Sprints&lt;/h2&gt;
&lt;p&gt;The conference ended with two days of sprints. I mainly helped people with
Conda packaging.  One key thing that happened is that I worked with Aron
Ahmadia so that HashDist can generate Conda
packages. &lt;a href="http://hashdist.github.io/"&gt;HashDist&lt;/a&gt; is a package compiling
framework that makes it easy to have completely reproducible builds by hashing
all the information that was used to compile a package, and recompiling when
any of that information changes. You can learn more about HashDist by watching
Aron's talk from the conference:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;center&gt;&lt;iframe width="560" height="315" src="//www.youtube.com/embed/wviHkzk0AkY" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/center&gt;
&lt;p&gt;I am now convinced that HashDist is a good solution for people who still want
the control of compiling their own packages. Once HashDist is able to produce
Conda packages, then you can gain the benefits of both worlds: Conda's
powerful package management and environment notion, with HashDist's modular
and reproducible package building framework.&lt;/p&gt;
&lt;h2&gt;Other thoughts&lt;/h2&gt;
&lt;p&gt;The organizers of SciPy did an excellent job this year.  The video crew did
something which I have not seen before, which is that they uploaded the videos
of the talks on the same day that the talks were held. My talk, which was held
right before lunch, was uploaded before the last talk of the day.  Something
that I saw come out of this is that people not attending the conference were
able to watch the talks and take part of the conversation with the conference
attendees, via Twitter and other social media, or by joining the sprints after
the conference.&lt;/p&gt;
&lt;p&gt;The extended three days of talks really took their toll on me. The conference
starts early enough in the morning and the social events after go so late in
the evening that each day of the conference I become a little more sleep
deprived. Usually by two days of tutorials and two days of talks I have hit my
limit, and this year, I really had a hard time making it through that fifth
day. Fortunately for the sprints I was able sleep in a little bit, as it's not
a big deal if you miss the beginning.&lt;/p&gt;
&lt;p&gt;This year the conference organizers made a push for diversity, and it
shows. There were noticeably more women at the conference this year, and not
just insomuch as there were more people at all.&lt;/p&gt;
&lt;p&gt;Finally, I leave you with the greatest lightening talk. Ever.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;center&gt;&lt;iframe width="560" height="315" src="//www.youtube.com/embed/ln4nE_EVDCg?start=3254" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/center&gt;
&lt;!-- LocalWords:  Gede Obinna Nwanna iframe src frameborder allowfullscreen -
--&gt;
&lt;!--  LocalWords:  - VanderPlas 's PyDy 's img Ahmadia
 --&gt;&lt;/div&gt;</description><guid>http://asmeurer.github.io/posts/scipy-2014/</guid><pubDate>Sun, 13 Jul 2014 16:52:27 GMT</pubDate></item><item><title>Moving to GitHub pages with Nikola</title><link>http://asmeurer.github.io/posts/moving-to-github-pages-with-nikola/</link><dc:creator>Aaron Meurer</dc:creator><description>&lt;div&gt;&lt;p&gt;So I've finally decided to move my blog from Wordpress to GitHub pages.  I
highly recommend it if you are technically skilled enough to do it. I was
getting pretty annoyed at Wordpress. It forces you to write your posts in
html (or else using their WYSIWYG editor), the wordpress.com is locked down,
so you can't add any Javascript, their math is stuck in the past rendering png
instead of using MathJax. The list goes on.&lt;/p&gt;
&lt;p&gt;With GitHub pages, I can write my posts in Markdown, and I have full control
over everything. And there is no lock in. If I decide I don't like the
software that is generating the posts, I can easily move to something else,
since the post content itself is all Markdown (or the occasional rst or
IPython notebook if I want to do something that Markdown doesn't support). I
can use MathJax for math (like \( e^{i\pi} + 1 = 0 \)). Wordpress.com
doesn't let you install abtirary Javascript on your blog, so you can't do
things like install MathJax or enable some cool sidebar thing (like a Twitter
feed).&lt;/p&gt;
&lt;h2&gt;Setting up GitHub Pages&lt;/h2&gt;
&lt;p&gt;First, you need to set up GitHub pages. This is a bit confusing, because there
are actually two kinds of GitHub pages, user pages and project pages. User
pages are if you have a repo named &lt;code&gt;username.github.io&lt;/code&gt; (or &lt;code&gt;.com&lt;/code&gt;). The pages
are served from the &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;For project pages, you add a &lt;code&gt;gh-pages&lt;/code&gt; branch to any one of your projects,
and GitHub hosts the content automatically at
&lt;code&gt;username.github.io/projectname&lt;/code&gt;. I originally had my blog content at
&lt;code&gt;asmeurer.github.io&lt;/code&gt;, but I didn't like that I had to do everything in master,
both the generated and original content. So instead I created a repo called
&lt;code&gt;blog&lt;/code&gt;. I have my content in the &lt;code&gt;master&lt;/code&gt; branch and the generated pages in
the &lt;code&gt;gh-pages&lt;/code&gt; branch (more on this later). At my
&lt;a href="https://github.com/asmeurer/asmeurer.github.com"&gt;&lt;code&gt;asmeurer.github.com&lt;/code&gt;&lt;/a&gt; repo,
I just have for now a basic redirect to the blog. In the future, I may want to
put additional, non-blog content on the website, and it would go there (or in
a separate project repo with its own &lt;code&gt;gh-pages&lt;/code&gt; branch).&lt;/p&gt;
&lt;h2&gt;Nikola&lt;/h2&gt;
&lt;p&gt;I had initially planned on using
&lt;a href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;. However, I got stalled on the
Wordpress import. I like that Pelican is written in Python, but I was not too
keen on their abrasive
&lt;a href="https://github.com/getpelican/pelican/blob/master/LICENSE"&gt;license&lt;/a&gt;. Frankly,
I shouldn't say too many bad things about Pelican because I never really tried
that hard with it.&lt;/p&gt;
&lt;p&gt;I have decided to try &lt;a href="http://getnikola.com/"&gt;Nikola&lt;/a&gt; instead. It's also
written in Python. It has a very nice
&lt;a href="https://github.com/getnikola/nikola/blob/master/LICENSE.txt"&gt;license&lt;/a&gt;. I like
the philosophy of the &lt;a href="http://getnikola.com/handbook.html"&gt;manual&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DON'T READ THIS MANUAL. IF YOU NEED TO READ IT I FAILED, JUST USE THE THING.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I've also discovered that the
&lt;a href="https://groups.google.com/forum/#%21forum/nikola-discuss"&gt;Nikola community&lt;/a&gt; is
&lt;em&gt;very&lt;/em&gt; nice. And of course, even if Nikola ends up not being for me, it will
be easy to switch, because my actual content is just some Markdown files that
I own.&lt;/p&gt;
&lt;h3&gt;Getting started&lt;/h3&gt;
&lt;p&gt;Getting started with Nikola is pretty easy. First, you need to install it. It
has a &lt;em&gt;ton&lt;/em&gt; of dependencies (fortunately all Python, so it won't be that
hard). In addition to the ones in the requirements.txt, you should also
install &lt;code&gt;markdown&lt;/code&gt; and &lt;code&gt;webassets&lt;/code&gt;. While using &lt;code&gt;nikola&lt;/code&gt;, it will tell you if
you don't have something installed that you should, so if you see that, just
install what it tells you to.  If you use &lt;code&gt;conda&lt;/code&gt; and Mac OS X, I have
uploaded all the dependencies to my &lt;a href="https://binstar.org/asmeurer/"&gt;Binstar&lt;/a&gt;,
so you can just &lt;code&gt;conda install -c asmeurer nikola&lt;/code&gt;. Oh and don't worry, Nikola
and its dependencies fully support Python 3 (I wouldn't be using it if they
didn't).&lt;/p&gt;
&lt;p&gt;Then you just run the commands from
http://getnikola.com/handbook.html#all-you-need-to-know.&lt;/p&gt;
&lt;p&gt;One thing that doesn't tell you is that after you init the site, you should
walk through &lt;code&gt;conf.py&lt;/code&gt; and change the settings to your liking.&lt;/p&gt;
&lt;p&gt;Another trick not there is that you can add&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;eval "`nikola tabcompletion`"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to your Bash profile to get tab completion.&lt;/p&gt;
&lt;h3&gt;Tricks&lt;/h3&gt;
&lt;p&gt;Here are some useful tricks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To enable MathJax, you have to type &lt;code&gt;mathjax&lt;/code&gt; in a line by itself in the
metadata file. There are some bugs right now, but ideally you could do inline
math with &lt;code&gt;$math$&lt;/code&gt; and display math with &lt;code&gt;$$math$$&lt;/code&gt;. &lt;code&gt;$math$&lt;/code&gt; doesn't work
currently, but you can do &lt;code&gt;\\(math\\)&lt;/code&gt; (both &lt;code&gt;\&lt;/code&gt;s are required, although this
is likely a bug). You can do &lt;code&gt;\\[math\\]&lt;/code&gt; for display math.  Here are some
examples. Inline: \( \sin ^2{x} + \cos^2{x} = 1\). Display: $$ e^{i\pi} + 1 = 0 .$$&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your one-stop command when blogging is &lt;code&gt;nikola auto&lt;/code&gt;. This requires
&lt;code&gt;livereload&lt;/code&gt;. This will serve the blog on localhost, and automatically
rebuild it when any change is made (and I really mean &lt;em&gt;any&lt;/em&gt; change: it can
even detect when you change Nikola itself).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I have the following in my conf.py to deploy:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-python"&gt;DEPLOY_COMMANDS = [
    "git checkout gh-pages",
    "rsync -rPv --delete-after --exclude old_blog --exclude .git --exclude .gitignore --exclude cache/ --exclude .doit.db.db output/ .",
    "git add -A",
    "git commit -a -m 'Updating blog content'",
    "git push",
    "git checkout master",
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;WARNING: These commands are dangerous. If you don't properly exclude things
like &lt;code&gt;.git&lt;/code&gt;, you will wipe your entire git history. I &lt;em&gt;highly&lt;/em&gt; recommend
committing everything and pushing to GitHub before deploying.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;_site/
*.pyc
.DS_Store
.doit.db.db
cache/
output/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;for your &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Despite what it says on the Nikola page, be sure to read the docs, because
there are a lot of cool features you won't know about unless you read about
them. Also be sure to read through &lt;code&gt;conf.py&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Wordpress import&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;This is something that I am still figuring out. You can see the progress at
&lt;a href="http://asmeurer.github.io/blog/old_blog"&gt;http://asmeurer.github.io/blog/old_blog&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Importing from Wordpress is pretty easy actually (at least in theory). First
you need to go to the Wordpress site dashboard and go to "Export" from the
"Tools" menu. From here you can download an XML file with all your
content. Then just do&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nikola import_wordpress export_file.xml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the current version of Nikola as of this writing (6.3.0) doesn't do
this right, so you'll need to use the
&lt;a href="https://github.com/getnikola/nikola"&gt;git master&lt;/a&gt;. There are some issues with
the import, since Wordpress has its own markup that it doesn't know everything
about, so you may need to go in and fix things. Or report them as bugs to
Nikola and reimport when they are fixed.&lt;/p&gt;
&lt;p&gt;You'll need to go through the posts and make sure that they are rendered
correctly (this is one reason I haven't finished doing it yet).&lt;/p&gt;
&lt;p&gt;For comments, you first need to create a Disqus account, and enable it in your
conf.py. You should then upload the xml file that you exported from Wordpress
to Disqus. At this point, the comments should just work, because Nikola sets
the Disqus url for the imported comments to the old Wordpress url (look at the
Disqus section of one of the built pages).&lt;/p&gt;
&lt;p&gt;I don't know how to automatically backlink from Wordpress back to
Nikola. Maybe I should just automatically generate some links and paste them
in manually.&lt;/p&gt;&lt;/div&gt;</description><category>mathjax</category><guid>http://asmeurer.github.io/posts/moving-to-github-pages-with-nikola/</guid><pubDate>Sun, 09 Feb 2014 23:19:18 GMT</pubDate></item></channel></rss>