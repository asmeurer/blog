<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Aaron Meurer's Blog</title><link>http://asmeurer.github.io/</link><description>My blog</description><language>en</language><lastBuildDate>Fri, 04 Apr 2014 20:08:31 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Moving to GitHub pages with Nikola</title><link>http://asmeurer.github.io/posts/moving-to-github-pages-with-nikola/</link><dc:creator>Aaron Meurer</dc:creator><description>&lt;div&gt;&lt;p&gt;So I've fi­nal­ly de­cid­ed to move my blog from Word­press to GitHub pages.  I
high­ly rec­om­mend it if you are tech­ni­cal­ly skilled enough to do it. I was
get­ting pret­ty an­noyed at Word­press. It forces you to write your posts in­
html (or else us­ing their WYSI­WYG ed­i­tor), the word­press.­com is locked down,
­so you can't add any Javascrip­t, their math is stuck in the past ren­der­ing png
in­stead of us­ing Math­Jax. The list goes on.&lt;/p&gt; 
 &lt;p&gt;With GitHub pages, I can write my posts in Mark­down, and I have full con­trol
over ev­ery­thing. And there is no lock in. If I de­cide I don't like the
­soft­ware that is gen­er­at­ing the post­s, I can eas­i­ly move to some­thing else,
s­ince the post con­tent it­self is all Mark­down (or the oc­ca­sion­al rst or
IPython note­book if I want to do some­thing that Mark­down does­n't sup­port­). I
­can use Math­Jax for math (like \( e^{i\pi} + 1 = 0 \)). Word­press.­com
­does­n't let you in­stall abti­rary Javascript on your blog, so you can't do
things like in­stall Math­Jax or en­able some cool side­bar thing (like a Twit­ter
feed).&lt;/p&gt; 
 &lt;h2&gt;Setting up GitHub Pages&lt;/h2&gt;
&lt;p&gt;First, you need to set up GitHub pages. This is a bit con­fus­ing, be­cause there
are ac­tu­al­ly two kinds of GitHub pages, us­er pages and project pages. User
­pages are if you have a re­po named  &lt;code&gt;user­name.github.io&lt;/code&gt;  (or  &lt;code&gt;.com&lt;/code&gt;). The pages
are served from the  &lt;code&gt;mas­ter&lt;/code&gt;  branch.&lt;/p&gt; 
 &lt;p&gt;For project pages, you add a  &lt;code&gt;gh-­pages&lt;/code&gt;  branch to any one of your pro­ject­s,
and GitHub hosts the con­tent au­to­mat­i­cal­ly at
 &lt;code&gt;user­name.github.io/pro­ject­name&lt;/code&gt;. I orig­i­nal­ly had my blog con­tent at
 &lt;code&gt;as­meur­er.github.io&lt;/code&gt;, but I did­n't like that I had to do ev­ery­thing in mas­ter,
both the gen­er­at­ed and orig­i­nal con­tent. So in­stead I cre­at­ed a re­po called
 &lt;code&gt;blog&lt;/code&gt;. I have my con­tent in the  &lt;code&gt;mas­ter&lt;/code&gt;  branch and the gen­er­at­ed pages in­
the  &lt;code&gt;gh-­pages&lt;/code&gt;  branch (more on this lat­er). At my
 &lt;a href="https://github.com/asmeurer/asmeurer.github.com"&gt;&lt;code&gt;as­meur­er.github.­com&lt;/code&gt;&lt;/a&gt;  re­po,
I just have for now a ba­sic re­di­rect to the blog. In the fu­ture, I may want to
put ad­di­tion­al, non-blog con­tent on the web­site, and it would go there (or in­
a sep­a­rate project re­po with its own  &lt;code&gt;gh-­pages&lt;/code&gt;  branch).&lt;/p&gt; 
 &lt;h2&gt;Nikola&lt;/h2&gt;
&lt;p&gt;I had ini­tial­ly planned on us­ing
 &lt;a href="http://blog.getpelican.com/"&gt;Pel­i­can&lt;/a&gt;. How­ev­er, I got stalled on the
­Word­press im­port. I like that Pel­i­can is writ­ten in Python, but I was not too
­keen on their abra­sive
 &lt;a href="https://github.com/getpelican/pelican/blob/master/LICENSE"&gt;li­cense&lt;/a&gt;. Frankly,
I should­n't say too many bad things about Pel­i­can be­cause I nev­er re­al­ly tried
that hard with it.&lt;/p&gt; 
 &lt;p&gt;I have de­cid­ed to try  &lt;a href="http://getnikola.com/"&gt;Niko­la&lt;/a&gt;  in­stead. It's al­so
writ­ten in Python. It has a very nice
 &lt;a href="https://github.com/getnikola/nikola/blob/master/LICENSE.txt"&gt;li­cense&lt;/a&gt;. I like
the phi­los­o­phy of the  &lt;a href="http://getnikola.com/handbook.html"&gt;man­u­al&lt;/a&gt;:&lt;/p&gt; 
 &lt;blockquote&gt;
&lt;p&gt;DON'T READ THIS MAN­U­AL. IF YOU NEED TO READ IT I FAILED, JUST USE THE THING.&lt;/p&gt; 
 &lt;/blockquote&gt;
&lt;p&gt;I've al­so dis­cov­ered that the
 &lt;a href="https://groups.google.com/forum/#!forum/nikola-discuss"&gt;Niko­la com­mu­ni­ty&lt;/a&gt;  is
 &lt;em&gt;very&lt;/em&gt;  nice. And of course, even if Niko­la ends up not be­ing for me, it will
be easy to switch, be­cause my ac­tu­al con­tent is just some Mark­down files that
I own.&lt;/p&gt; 
 &lt;h3&gt;Getting started&lt;/h3&gt;
&lt;p&gt;Get­ting start­ed with Niko­la is pret­ty easy. First, you need to in­stall it. It
has a  &lt;em&gt;ton&lt;/em&gt;  of de­pen­den­cies (for­tu­nate­ly all Python, so it won't be that
hard). In ad­di­tion to the ones in the re­quire­ments.tx­t, you should al­so
in­stall  &lt;code&gt;mark­down&lt;/code&gt;  and  &lt;code&gt;we­bas­sets&lt;/code&gt;. While us­ing  &lt;code&gt;niko­la&lt;/code&gt;, it will tell you if
y­ou don't have some­thing in­stalled that you should, so if you see that, just
in­stall what it tells you to.  If you use  &lt;code&gt;con­da&lt;/code&gt;  and Mac OS X, I have
u­pload­ed all the de­pen­den­cies to my  &lt;a href="https://binstar.org/asmeurer/"&gt;Bin­star&lt;/a&gt;,
­so you can just  &lt;code&gt;con­da in­stall -c as­meur­er niko­la&lt;/code&gt;. Oh and don't wor­ry, Niko­la
and its de­pen­den­cies ful­ly sup­port Python 3 (I would­n't be us­ing it if they
­did­n't).&lt;/p&gt; 
 &lt;p&gt;Then you just run the com­mands from
http://get­niko­la.­com/hand­book.htm­l#al­l-y­ou-need-­to-­know.&lt;/p&gt; 
 &lt;p&gt;One thing that does­n't tell you is that af­ter you init the site, you should
walk through  &lt;code&gt;con­f.py&lt;/code&gt;  and change the set­tings to your lik­ing.&lt;/p&gt; 
 &lt;p&gt;An­oth­er trick not there is that you can add&lt;/p&gt; 
 &lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="s2"&gt;"`nikola tabcompletion`"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to your Bash pro­file to get tab com­ple­tion.&lt;/p&gt; 
 &lt;h3&gt;Tricks&lt;/h3&gt;
&lt;p&gt;Here are some use­ful trick­s:&lt;/p&gt; 
 &lt;ul&gt;
&lt;li&gt; 
 &lt;p&gt;To en­able Math­­­Jax, you have to type   &lt;code&gt;math­­­jax&lt;/code&gt;   in a line by it­­self in the
meta­­da­­ta file. There are some bugs right now, but ide­al­­ly you could do in­­­line
­­math with   &lt;code&gt;$math$&lt;/code&gt;   and dis­­­play math with   &lt;code&gt;$$­­math­­$$&lt;/code&gt;.   &lt;code&gt;$math$&lt;/code&gt;   does­n't work
cur­ren­t­­ly, but you can do   &lt;code&gt;\\(­­math­­\\)&lt;/code&gt;   (both   &lt;code&gt;\&lt;/code&gt;s are re­quired, al­though this
is like­­ly a bug). You can do   &lt;code&gt;\\[­­math­­\\]&lt;/code&gt;   for dis­­­play math.  Here are some
ex­am­­ples. In­­­line: \( \sin ^2{x} + \cos^2{x} = 1\). Dis­­­play: $$ e^{i\pi} + 1 = 0 .$$&lt;/p&gt;  
  &lt;/li&gt; 
 &lt;li&gt; 
 &lt;p&gt;Your one-stop com­­mand when blog­ging is   &lt;code&gt;niko­la au­­to&lt;/code&gt;. This re­quires
    &lt;code&gt;livereload&lt;/code&gt;. This will serve the blog on lo­­cal­host, and au­­to­­mat­i­­cal­­ly
  re­build it when any change is made (and I re­al­­ly mean   &lt;em&gt;any&lt;/em&gt;   change: it can
  even de­­tect when you change Niko­la it­­self).&lt;/p&gt;  
  &lt;/li&gt; 
 &lt;li&gt; 
 &lt;p&gt;I have the fol­low­ing in my con­f.py to de­­ploy:&lt;/p&gt;  
  &lt;/li&gt; 
 &lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;DEPLOY_COMMANDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s"&gt;"git checkout gh-pages"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"rsync -rPv --delete-after --exclude old_blog --exclude .git --exclude .gitignore --exclude cache/ --exclude .doit.db.db output/ ."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"git add -A"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"git commit -a -m 'Updating blog content'"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"git push"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"git checkout master"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;WARN­ING: These com­mands are dan­ger­ous. If you don't prop­er­ly ex­clude things
­like  &lt;code&gt;.git&lt;/code&gt;, you will wipe your en­tire git his­to­ry. I  &lt;em&gt;high­ly&lt;/em&gt;  rec­om­mend
­com­mit­ting ev­ery­thing and push­ing to GitHub be­fore de­ploy­ing.&lt;/p&gt; 
 &lt;ul&gt;
&lt;li&gt;Use&lt;/li&gt; 
 &lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;_site&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pyc&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DS_Store&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;
&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;for your  &lt;code&gt;.git­ig­nore&lt;/code&gt;.&lt;/p&gt; 
 &lt;ul&gt;
&lt;li&gt;De­spite what it says on the Niko­la page, be sure to read the doc­s, be­cause
there are a lot of cool fea­tures you won't know about un­less you read about
them. Al­so be sure to read through  &lt;code&gt;con­f.py&lt;/code&gt;.&lt;/li&gt; 
 &lt;/ul&gt;
&lt;h3&gt;Wordpress import&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;This is some­thing that I am still fig­ur­ing out. You can see the progress at
   &lt;a href="http://asmeurer.github.io/blog/old_blog"&gt;http://as­meur­er.github.io/blog/old_blog&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; 
 &lt;p&gt;Im­port­ing from Word­press is pret­ty easy ac­tu­al­ly (at least in the­o­ry). First
y­ou need to go to the Word­press site dash­board and go to "Ex­port" from the
"­Tool­s" menu. From here you can down­load an XML file with all your
­con­tent. Then just do&lt;/p&gt; 
 &lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;nikola&lt;/span&gt; &lt;span class="n"&gt;import_wordpress&lt;/span&gt; &lt;span class="n"&gt;export_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that the cur­rent ver­sion of Niko­la as of this writ­ing (6.3.0) does­n't do
this right, so you'll need to use the
 &lt;a href="https://github.com/getnikola/nikola"&gt;git mas­ter&lt;/a&gt;. There are some is­sues with­
the im­port, since Word­press has its own markup that it does­n't know ev­ery­thing
about, so you may need to go in and fix things. Or re­port them as bugs to
Niko­la and reim­port when they are fixed.&lt;/p&gt; 
 &lt;p&gt;You'll need to go through the posts and make sure that they are ren­dered
­cor­rect­ly (this is one rea­son I haven't fin­ished do­ing it yet).&lt;/p&gt; 
 &lt;p&gt;For com­ments, you first need to cre­ate a Dis­qus ac­coun­t, and en­able it in your
­con­f.py. You should then up­load the xml file that you ex­port­ed from Word­press
­to Dis­qus. At this point, the com­ments should just work, be­cause Niko­la set­s
the Dis­qus url for the im­port­ed com­ments to the old Word­press url (look at the
Dis­qus sec­tion of one of the built pages).&lt;/p&gt; 
 &lt;p&gt;I don't know how to au­to­mat­i­cal­ly back­link from Word­press back to
Niko­la. Maybe I should just au­to­mat­i­cal­ly gen­er­ate some links and paste them
in man­u­al­ly.&lt;/p&gt;&lt;/div&gt;</description><category>mathjax</category><guid>http://asmeurer.github.io/posts/moving-to-github-pages-with-nikola/</guid><pubDate>Sun, 09 Feb 2014 23:19:18 GMT</pubDate></item></channel></rss>