<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Aaron Meurer's SymPy Blog</title><link>http://asmeurersympy.wordpress.com/</link><description>My blog on my work on SymPy and other fun stuff.</description><atom:link type="application/rss+xml" href="http://asmeurersympy.wordpress.com/rss.xml" rel="self"></atom:link><language>en</language><lastBuildDate>Sun, 09 Feb 2014 16:18:35 GMT</lastBuildDate><generator>Nikola &lt;http://getnikola.com/&gt;</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Python 3: Single codebase vs. 2to3</title><link>http://asmeurersympy.wordpress.com/posts/2013/08/22/python-3-single-codebase-vs-2to3.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;In my &lt;a href="http://asmeurersympy.wordpress.com/2013/08/09/using-python-3-as-my-default-python/"&gt;previous post&lt;/a&gt; about switching to Python 3 as my default Python, I praised the use of a single codebase for supporting both Python 2 and Python 3. I even chastised the Python core developers for creating 2to3, writing, "I think that the core Python folks made a mistake by presenting Python 3 as a new language. It has made people antagonistic against Python 3 (well, that and the print function, which was another stupid mistake, because even if it was a good idea, it alone has kept too many people from switching). 2to3 was a mistake too, because it perpetuated this idea."&lt;/p&gt;
&lt;p&gt;Well, this isn't entirely fair, because I myself used to be one of the biggest advocates of using 2to3 over a single codebase. Take this &lt;a href="https://github.com/ipython/ipython/issues/2440#issuecomment-9058182"&gt;GitHub comment&lt;/a&gt; from when the IPython guys were considering this issue, where I wrote, "maintaining a common code base is going to be a bit annoying from the developer side.…The main benefit of using 2to3 is that 99% of the time, you can just write your code as you would for Python 2, and when it gets to Python 3, it just works (maybe that percent is a bit smaller if you use strings a lot, but it's still quite high). To write for Python 2 and 3 at the same time, you have to remember a lot of little rules, which no one will remember (and new contributors will not even know about). And given that IPython's test coverage is still poor (unless I am mistaken, in which case, please correct me), little mistakes will slip through, and no one will notice until they try the certain behavior in Python 3."&lt;/p&gt;
&lt;p&gt;So I just want to clarify a few things.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;ol&gt;
    &lt;li&gt;&lt;strong&gt;I was wrong.&lt;/strong&gt;  When I chastised the Python core developers for making people believe that Python 3 is a different language from Python 2, &lt;em&gt;I too&lt;/em&gt; fell into that trap. It took a month of me working on a codebase that had to be directly Python 3 compatible to see the fallacy of this.  And seeing just how small the SymPy &lt;a href="https://github.com/sympy/sympy/blob/master/sympy/core/compatibility.py"&gt;compatibility&lt;/a&gt; file is sealed the deal. I now believe that I was completely wrong in saying that maintaining a common codebase is annoying. As I wrote in the previous post, it is no different from supporting 2.4-2.7, for instance (actually, by my memory, supporting 2.4-2.7 was much worse than supporting 2.6-3.3, because &lt;em&gt;so&lt;/em&gt; many language features were introduced in Python 2.5)&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;If you have to support 2.5 or earlier and Python 3, then 2to3 might actually be better.&lt;/strong&gt; The reason is simple: Python 2.6 was the first version of Python to "know" about Python 3. So, for instance, &lt;code&gt;from &lt;strong&gt;future&lt;/strong&gt; import print_function&lt;/code&gt; was introduced in Python 2.6. This means that to support a single codebase for 2.5-3.x you have to write &lt;code&gt;print('\n')&lt;/code&gt; to print an empty line and to print something without a newline at the end, you have to use &lt;code&gt;sys.stdout.write&lt;/code&gt;. Also, &lt;code&gt;except Exception as e&lt;/code&gt;, using the &lt;code&gt;as&lt;/code&gt; keyword, which is the only syntax allowed in Python 3, was introduced in Python 2.6, so if you want to catch an exception you have to use &lt;code&gt;sys.exc_info()[1]&lt;/code&gt;. Now that really &lt;em&gt;is&lt;/em&gt; annoying. But in Python 2.6, most differences can be fixed with simple definitions, most of which boil down to try, except ImportError, import x as y type workarounds. The worst are the print function, which can be imported from &lt;strong&gt;future&lt;/strong&gt;, division, which can also be imported from &lt;strong&gt;future&lt;/strong&gt; (or worked around), and unicode literals (if it's a big deal, drop support for Python 3.2). Most other things are just simple renames, like xrange -&amp;gt; range, or making sure that you wrap functions that are iterators in Python 3 in &lt;code&gt;list&lt;/code&gt; if you want to access items from them.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;I was right about test coverage.&lt;/strong&gt; Supporting Python 2 and Python 3 in a single codebase if you have bad test coverage is not going to work. You can get around the worst things by making sure that &lt;strong&gt;future&lt;/strong&gt; imports are at the top of each file, but you are bound to miss things, because, as I said, you will forget that &lt;code&gt;map(f, s)[0]&lt;/code&gt; doesn't work in Python 3 or that the &lt;code&gt;StringIO&lt;/code&gt; module has been renamed to &lt;code&gt;io&lt;/code&gt;, or that you can't pass around data as strings—they have to be bytes.
&lt;p&gt;Of course, you also need good test coverage to support Python 3 well using 2to3, but you can get away with more because 2to3 will take care of things like the above for you.  Perhaps instead of 2to3 what really should have been made is a pyflakes-like tool that uses the same knowledge as 2to3 to check for cross-compatibility for Python 2 and Python 3.&lt;/p&gt;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;In the end, you have to be actually using Python 3.&lt;/strong&gt; I feel like people haven't been, even today, taking Python 3 seriously. They aren't actually using it. There's a feeling that someday in the future they will, but for now, Python 2 is the way to go. 2to3 exacerbates this feeling, because to use it, you have to develop in Python 2. You shouldn't touch the code generated by 2to3. As it is, then, if you develop with 2to3, you only ever use Python 3 to test that things are working in Python 3. You don't prototype your code in Python 3, because then you will write code that doesn't work in Python 2. 
&lt;p&gt;With the single codebase, your view should change. You should start prototyping in Python 3. You should only use Python 2 to test that things work in Python 2 (and since you've been using Python 2 for so long before switching to Python 3, or at least if you're like me you have, this is not that bad). Just yesterday, I found a &lt;a href="https://github.com/sympy/sympy/pull/2398"&gt;bug&lt;/a&gt; in SymPy in Python 3 that went unnoticed. It relates to what I said above about using bytes instead of strings for data. I just checked, and 2to3 wouldn't have fixed it (and indeed, the bug is present in SymPy 0.7.3, which used 2to3), because there's no way for 2to3 to have known that the data was bytes and not a string.  The code was obviously untested, but it would have been obvious that it didn't work if anyone was using Python 3 to use SymPy interactively.  As it turns out, some of our users are doing this, and they pointed it out on the mailing list, but it remained unfixed until I found it myself independently. &lt;/p&gt;&lt;/li&gt;  
&lt;/ol&gt;

&lt;p&gt;So old mistakes aside, the lessons to take away from this and the &lt;a href="http://asmeurersympy.wordpress.com/2013/08/09/using-python-3-as-my-default-python/"&gt;previous blog post&lt;/a&gt; are &lt;/p&gt;
&lt;ol&gt;
    &lt;li&gt;Use a single codebase instead of 2to3 to support both Python 2 and Python 3.&lt;/li&gt;
    &lt;li&gt;Use Python 3 as your default Python.&lt;/li&gt;
    &lt;li&gt;Keep Python 2 around, though, because not everything supports Python 3 yet.&lt;/li&gt;
    &lt;li&gt;Expect to find some bugs, because, until everyone starts doing this, people aren't going to test their software in Python 3.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</description><guid>http://asmeurersympy.wordpress.com/posts/2013/08/22/python-3-single-codebase-vs-2to3.html</guid><pubDate>Thu, 22 Aug 2013 00:45:57 GMT</pubDate></item><item><title>Using Python 3 as my default Python</title><link>http://asmeurersympy.wordpress.com/posts/2013/08/09/using-python-3-as-my-default-python.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;So I just finished my internship with &lt;a href="http://continuum.io"&gt;Continuum&lt;/a&gt;. For the internship, I primarily worked on &lt;a href="http://continuum.io/downloads"&gt;Anaconda&lt;/a&gt;, their free Python distribution, and &lt;a href="https://github.com/continuumIO/conda"&gt;conda&lt;/a&gt;, its free (BSD open source) package manager. I might write a blog post about conda later, but suffice it to say that I'm convinced that it is doing package management the right way. One of the major developments this summer that I helped out with was the ability for &lt;a href="http://docs.continuum.io/conda/build.html"&gt;anybody to build a conda package&lt;/a&gt;, and a site called &lt;a href="https://binstar.org"&gt;Binstar&lt;/a&gt; where people can upload them (the beta code is "binstar in beta" with no quotes). &lt;/p&gt;&lt;p&gt;Another thing that happened over the summer is that Almar Klein made conda Python 3 compatible, so that it can be used with the &lt;a href="http://www.pyzo.org"&gt;Pyzo&lt;/a&gt; project, which is Python 3 only.    The way this was done was by using a single code base for Python 2 and Python 3. Thus, this became the first time I have done any heavy development on Python source that had to be Python 3 compatible from a single codebase (as opposed to using the 2to3 tool). &lt;/p&gt;&lt;p&gt;Another development this summer was that SymPy was released (&lt;a href="https://github.com/sympy/sympy/releases/tag/sympy-0.7.3"&gt;0.7.3&lt;/a&gt;). This marked the last release to support Python 2.5. Around the same time, we discussed our Python 3 situation, and how annoying it is to run use2to3 all the time. The result was &lt;a href="https://github.com/sympy/sympy/pull/2318"&gt;this pull request&lt;/a&gt;, which made SymPy use a single code base for Python 2 and Python 3. Now, that pull request is hard to mull through, but the important part to look at is the &lt;a href="https://github.com/sympy/sympy/pull/2318/files#diff-124"&gt;compatibility&lt;/a&gt; file. Everything in that file has to be imported and used, because it represents things that are different between Python 2 and Python 3. Ondřej has written more about this on &lt;a href="http://ondrejcertik.blogspot.com/2013/08/how-to-support-both-python-2-and-3.html"&gt;his blog&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;In all, I think that supporting Python 2.6-3.3 (not including 3.0 or 3.1) is not that bad. The compatibility file has a few things, but thinking back, it was just that bad or worse supporting Python 2.4-2.7 (heck, back then, we couldn't even use the &lt;code&gt;all&lt;/code&gt; function without importing it). The situation is much better today now that we use Travis too, since any mistake is caught before the pull request is merged. The worst of course is the &lt;code&gt;print&lt;/code&gt; function, but since that can be imported from &lt;code&gt;&lt;strong&gt;future&lt;/strong&gt;&lt;/code&gt;, I will be warned about it pretty fast, since &lt;code&gt;print&lt;/code&gt; as a statement is a SyntaxError in that case. It also doesn't take that long to get into the habit of typing &lt;code&gt;()&lt;/code&gt; after &lt;code&gt;print&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Of course, there are a lot of nice Python 3 only features that we cannot use, but this was the case for supporting Python 2.4-2.7 too (e.g., the with statement and the ternary statement were both introduced in Python 2.5).   So this is really nothing new. There is always a stick to drop the oldest Python version we support, and a lag on what features we can use. Now that we have dropped Python 2.5 support in SymPy, we can finally start using new-style string formatting, abstract base classes, relative imports, and keyword arguments after &lt;code&gt;*args&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So as a result of this, I've come to the conclusion that Python 3 is &lt;em&gt;not&lt;/em&gt; another language. It's just another version of the same language. Supporting Python 2.6-3.3 is no different from supporting Python 2.4-2.7. You have to have some compatibility imports, you can't use new language features, and you have to have good test coverage. I think that the core Python folks made a mistake by presenting Python 3 as a new language. It has made people antagonistic against Python 3 (well, that and the &lt;code&gt;print&lt;/code&gt; function, which was another stupid mistake, because even if it was a good idea, it alone has kept too many people from switching). 2to3 was a mistake too, because it perpetuated this idea. &lt;/p&gt;
&lt;p&gt;In the past, I have always developed against the latest version of Python: 2.6 was the best when I learned Python, and then 2.7. Even though I have had to support back to 2.4, I only used 2.4 explicitly when testing. &lt;/p&gt;
&lt;p&gt;Well, given what I said above, the only logical thing to do is to use Python 3.3 as my main development Python. If you use Anaconda, there are basically two ways you can do this. The first is to just create a Python 3 environment (&lt;code&gt;conda create -n python3 python=3&lt;/code&gt;), and put that first in your &lt;code&gt;PATH&lt;/code&gt; (you also will need to add &lt;code&gt;source activate python3&lt;/code&gt; to your bash profile if you go this route, so that &lt;code&gt;conda install&lt;/code&gt; will install into that environment by default). For me, though, I plan to use a Python 3 version of Anaconda, which has Python 3 as the default. The main difference here is that &lt;code&gt;conda&lt;/code&gt; itself is written in Python 3. Aside from purity, and the fact that I plan to fix any occasional conda bugs that I come across, the other difference here is that conda itself will default to Python 3 in this case (i.e., when creating a new environment with Python like &lt;code&gt;conda create -n envname python&lt;/code&gt;, the Python will be Python 3, not Python 2, and also it will build against Python 3 by default with &lt;code&gt;conda build&lt;/code&gt;). Continuum does not yet make Python 3 versions of Anaconda, but there are Python 3 versions of &lt;a href="http://repo.continuum.io/miniconda/index.html"&gt;Miniconda&lt;/a&gt; (Miniconda3), which is a stripped down version of Anaconda with just Python, the conda package manager, and its dependencies. You can easily install Anaconda into it though with &lt;code&gt;conda install anaconda&lt;/code&gt;. I personally prefer to install only what I need to keep the disk usage low (on an SSD, disk space is sparse), so this is perfect for me anyway.&lt;/p&gt;
&lt;p&gt;My recommendation is to put a Python 2 installation second in your PATH, so that you can easily call &lt;code&gt;python2&lt;/code&gt; if you want to use Python 2. The easiest way to do this is to create a conda environment for it (&lt;code&gt;conda create -n python2 python=2&lt;/code&gt;) and add &lt;code&gt;~/anaconda/envs/python2&lt;/code&gt; to your PATH. &lt;/p&gt;
&lt;p&gt;So far, I have run into a few issues:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;Some packages aren't build for Python 3 yet in Anaconda, or they don't support it at all.  The biggest blocker in Anaconda is PySide (at least on Mac OS X), though it should be coming soon. &lt;/li&gt;
    &lt;li&gt;Some packages only install entry points with a "3" suffix, which is annoying. The biggest offender here is IPython. I brought up this issue on their &lt;a href="http://mail.scipy.org/pipermail/ipython-dev/2013-August/012074.html"&gt;mailing list&lt;/a&gt;, &lt;del&gt;so hopefully they will see the light and fix this before the next release&lt;/del&gt;, but it hasn't been implemented yet. I also plan to make sure that the Anaconda package for IPython installs an &lt;code&gt;ipython&lt;/code&gt; entry point into Python 3 environments. Even so, one has to remember this when installing old versions of IPython in environments. &lt;/li&gt;
    &lt;li&gt;There are some bugs in conda in Python 3. Actually, I suspect that there are bugs in a lot of packages in Python 3, because people don't develop against it, unless they have excellent test coverage. Even SymPy missed a few print statements. &lt;/li&gt;
    &lt;li&gt;You can't &lt;code&gt;setup.py develop&lt;/code&gt; against anything that uses 2to3 (like IPython). &lt;/li&gt;
    &lt;li&gt;It's a little annoying working against old versions of SymPy (e.g., when digging through the git history to track something down), because I have to explicitly use Python 2. Conda makes this easier because I can just create a Python 2 environment and do &lt;code&gt;source activate python2&lt;/code&gt; when I am using Python 2. Or, for a one-off, I can just use &lt;code&gt;python2&lt;/code&gt;, and keep a Python 2 environment second in my PATH. But this issue is not really new. For example, really old versions of SymPy only work with Python 2.5, because they used &lt;code&gt;as&lt;/code&gt; as a variable name.&lt;/li&gt;
    &lt;li&gt;Everyone else isn't using Python 3 yet, so if I write a script that only needs to support "the latest version of Python," it probably needs to support Python 2.7, or else I should explicitly put &lt;code&gt;/usr/bin/env python3&lt;/code&gt; in the shebang line. But for SymPy, I have to be aware of how to support 2.6-3.3, so I have to know all the features that are only in some versions anyway. On the other side of things, if I run some random Python script with a shebang line, it probably is going to expect Python 2 and not Python 3, so I either have to explicitly add &lt;code&gt;python2&lt;/code&gt; to the command or activate a Python 2 environment&lt;/li&gt;
    &lt;li&gt;Some packages just don't support Python 3 yet. Fabric (and its main dependency, Paramiko) is the one example I have come across so far in my own work. So I have to fall back to Python 2 if I want to use them. The best thing to do here is to pitch in and help these libraries port themselves.&lt;/li&gt;
    &lt;li&gt;People always give code examples with &lt;code&gt;print&lt;/code&gt; as a statement instead of a function, so I either have to fix it manually before pasting it or use Python 2. I had tried at one point to make a &lt;code&gt;%print&lt;/code&gt; magic for IPython that would let print work like a statement in Python 3, but I never finished it. I guess I should revisit it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'll update this list as I come across more issues. &lt;/p&gt;
&lt;p&gt;In all, so far, it's nothing too bad. Conda makes switching back to Python 2 easy enough, and dealing with these issues are hardly the worst thing I have to deal with when developing with Python. And if anything, seeing Python 2-3 bugs and issues makes me more aware of the differences between the two versions of the language, which is a good things since I have to develop against code that has to support both. &lt;/p&gt;&lt;/div&gt;</description><guid>http://asmeurersympy.wordpress.com/posts/2013/08/09/using-python-3-as-my-default-python.html</guid><pubDate>Fri, 09 Aug 2013 21:59:55 GMT</pubDate></item><item><title>Automating the SymPy release process</title><link>http://asmeurersympy.wordpress.com/posts/2013/07/07/automating-the-sympy-release-process.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;So I have just published &lt;a href="https://github.com/sympy/sympy/releases/sympy-0.7.3.rc1"&gt;SymPy 0.7.3.rc1&lt;/a&gt;. I'll write a blog post about the release itself when we release 0.7.3 final, but for now, I wanted to write about how we managed to automate our release process.&lt;/p&gt;
&lt;p&gt;Our story begins back in October of 2012, when I wrote a long winded &lt;a href="https://groups.google.com/d/msg/sympy/UfNhyFv-oMg/PkwIz32K-lsJ"&gt;rant&lt;/a&gt; to the mailing list about how long it was taking to get the 0.7.2 release out (it took over a month from the time the release branch was created). &lt;/p&gt;
&lt;p&gt;The rant is fun, and I recommend reading it. Here are some quotes&lt;/p&gt;
&lt;p&gt;The intro:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;Now here's a timeline: 0.7.1 was released July 29, 2011, more than a year and two months ago.  0.7.0 was released just over a month before that, on June 28.  0.6.7 was released March 18, 2010, again over a year before 0.7.0.  In almost two year's time, we've had three releases, and are struggling to get out a fourth.  And it's not like there were no changes; quite the opposite in fact.  If you look at SymPy 0.6.6 compared to the current master, it's unbelievable the amount of changes that have gone forward in that time.  We've had &lt;/p&gt;
&lt;p&gt;since then the new polys, at least four completely new submodules (combinatorics, sets, differential geometry, and stats), massive improvements to integration and special functions, a ton of new stuff in the physics module, literally thousands of bug fixes, and the list goes on.  Each of these changes on it's own was enough to warrant a release. &lt;/p&gt;
&lt;p&gt;So in case I didn't make my point, le me state it explicitly: we need to release more often.  We need to release &lt;em&gt;way&lt;/em&gt; more often. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;My views on some of the fundamental (non-technical) issues:&lt;/p&gt;
&lt;blockquote&gt;

I think that one other thing that has held back many releases is the feeling of "wait, we should put this in the release". The use of a release branch has helped keep master moving along independently, but there still seems to be the feeling with many branches of, "this is a nice feature, it ought to go in the release."  My hope is that by making the release process smoother, we can release more often, and this feeling will go away, because it won't be a big deal if something waits until the next release.  As far as deprecations go, the real issue with them is time, not release numbers.  So if we deprecate a feature today vs. one month from today, it's not a big deal (as opposed to today vs. a year from today), regardless of how many versions are in between. 



I read about what GitHub does for their Windows product regarding releasing often on their blog: https://github.com/blog/1271-how-we-ship-github-for-windows (they actually have this philosophy for all their products).  One thing that they said is, "And by shipping updates so often, there is less anxiety about getting a particular feature ready for a particular release. If your pull request isn’t ready to be merged in time for today’s release, relax. There will be another one soon, so make that code shine!"  I think that is exactly the point here.  Another thing that they noted is that automation is the key to doing this, which is what I am aiming for with the above point. 

&lt;/blockquote&gt;

&lt;p&gt;My vision:&lt;/p&gt;
&lt;blockquote&gt;

Once we start releasing very often (and believe me, this is way down the road, but I'm trying to be forward looking here), we can do away with release candidates.  A release candidate lives in the wild for a week before the full release.  But if we are capable of releasing literally every week, then having release candidates is pointless.  If a bug slips into a release, we just fix it and it will be in the next release. 

&lt;/blockquote&gt;

&lt;p&gt;...&lt;/p&gt;
&lt;blockquote&gt;

We should release *at least* once a month.  I think that if the process is automated enough, that this will be very possible (as opposed to the current situation, where the release branch lasts longer than a month).  In times of high activity, we can release more often than that (e.g., after a big pull request is merged, we can release). 

&lt;/blockquote&gt;

&lt;p&gt;That was October. Today is July. Basically, our release process was way too long. Half of it was testing stuff, half of it was tedious releasing stuff (like making tarballs and so on), and half of it was updating websites. &lt;/p&gt;
&lt;p&gt;We have moved all our testing to Travis CI. So now every pull request is tested, and we can be pretty much assured that master is always passing the tests.  There is still some work to do here (currently Travis CI doesn't test with external dependencies), but it's mostly a solved problem.&lt;/p&gt;
&lt;p&gt;For updating websites, we conceded that we are not going to update anything that we don't own. That means no attempting to make Debian or Sage packages, or updating Wikipedia or Freshmeat. Someone else will do that (and does anyone even use Freshmeat any more?). &lt;/p&gt;
&lt;p&gt;That leaves the releasing itself. It's still a pain, because we have to make a source tarball, Windows installer, html docs, and pdf docs, and do them all for both Python 2 and Python 3. &lt;/p&gt;
&lt;p&gt;So Ondrej suggested moving to fabric/vagrant. At the SciPy 2013 sprints, he started working on a fabfile that automates the whole process. Basically vagrant is a predefined Linux virtual machine that makes it easy to make everything completely reproducible. Fabric is a tool that makes it easy to write commands (in Python) that are run on that machine. &lt;/p&gt;
&lt;p&gt;Building the basic stuff was easy, but I want to automate &lt;em&gt;everything&lt;/em&gt;. So far, not everything is done yet, but we're getting close. For example, in addition to building the tarballs, the fabric script checks the contents of the tarball against &lt;code&gt;git ls-files&lt;/code&gt; to make sure that nothing is included that shouldn't be or left out accidentally (and, indeed, we caught some missing files that weren't included in the tarball, including the README). &lt;/p&gt;
&lt;p&gt;You can run all this yourself. Checkout the 0.7.3 branch from SymPy, then cd into the release directory, and read the README. Basically, you just install Fabric and Vagrant if you don't have them already, then run&lt;/p&gt;
&lt;p&gt;[code]&lt;/p&gt;
&lt;p&gt;vagrant up&lt;/p&gt;
&lt;p&gt;fab vagrant prepare&lt;/p&gt;
&lt;p&gt;fab vagrant release&lt;/p&gt;
&lt;p&gt;[/code]&lt;/p&gt;
&lt;p&gt;Note that this downloads a 280 MB virtual machine, so it will take some time to run for the first time. When you do this, the releases are in the &lt;code&gt;release&lt;/code&gt; directory. &lt;/p&gt;
&lt;p&gt;Finally, I uploaded 0.7.3.rc1 to GitHub using the new releases feature. This is what the release looks like on GitHub, from the user point of view&lt;/p&gt;
&lt;p&gt;&lt;a href="http://asmeurersympy.wordpress.com/2013/07/screenshot-2013-07-06-22-05-31.png"&gt;&lt;img src="http://asmeurersympy.wordpress.com/2013/07/screenshot-2013-07-06-22-05-31.png" alt="SymPy 0.7.3.rc1" width="450" height="260" class="alignnone size-full wp-image-1352"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is what it looks like to me&lt;/p&gt;
&lt;p&gt;&lt;a href="http://asmeurersympy.wordpress.com/2013/07/screenshot-2013-07-06-22-08-19.png"&gt;&lt;img src="http://asmeurersympy.wordpress.com/2013/07/screenshot-2013-07-06-22-08-19.png" alt="SymPy 0.7.3.rc1 Edit" width="450" height="470" class="alignnone size-full wp-image-1353"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub has (obviously) the best interface I've ever seen for this. Of course, even better would be if there were an API, so that I could automate this too.  But since Google's &lt;a href="http://google-opensource.blogspot.com/2013/05/a-change-to-google-code-download-service.html"&gt;announcement&lt;/a&gt; that they are discontinuing downloads, we can no longer upload to Google Code. Our plan was to just use PyPI, but I am glad that we can have at least one other location, especially since PyPI is so buggy and unreliable (I can't even log in, I get a 502).&lt;/p&gt;
&lt;p&gt;So please download this release candidate and test it. We espeically need people to test the Windows installer, since we haven't automated that part yet (actually, we are considering not making them any more, especailly given the existence of people like Christoph Gohlke who &lt;a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#sympy"&gt;make them&lt;/a&gt; for SymPy anyway, but we'll see). The only thing that remains to be done is to finish writing the &lt;a href="https://github.com/sympy/sympy/wiki/release-notes-for-0.7.3"&gt;release notes&lt;/a&gt;. If you made any contributions to SymPy since the last release, please add them there. Or if you want to help out, you can go through our pull requests and make sure that nothing is missing.&lt;/p&gt;&lt;/div&gt;</description><guid>http://asmeurersympy.wordpress.com/posts/2013/07/07/automating-the-sympy-release-process.html</guid><pubDate>Sun, 07 Jul 2013 03:13:57 GMT</pubDate></item><item><title>SciPy 2013</title><link>http://asmeurersympy.wordpress.com/posts/2013/07/02/scipy-2013.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;This past week was the 2013 SciPy conference. It was an exciting time, and a lot of interesting things happened. &lt;/p&gt;&lt;p&gt;First, a background. This summer, I have been doing an internship with &lt;a href="http://continuum.io/"&gt;Continuum Analytics&lt;/a&gt;. There I have been working mainly on Anaconda and conda. Anaconda is Continuum's free (to everyone) Python distribution, which makes it really easy to get bootstrapped with all the scientific software (including SymPy). Conda is Anaconda's package manager, which, I think, solves many if not all of the main issues with the Python packaging tools like pip, easy_install, PyPI, and virtualenv. &lt;/p&gt;&lt;p&gt;I may write more about that later, but for now, I want to write about my experiences at the conference. The main point there is that I have already been in Austin for about a month, so getting to the conference this year was pretty easy.&lt;/p&gt;&lt;p&gt;On the first day of the conference, on Monday morning, Ondrej Certik and I had our tutorial for SymPy. For the past couple of months, I have been rewriting the official SymPy tutorial from scratch. The official tutorial for SymPy was very old, and had many issues. It only went over features that were good at the time of its writing, so while nothing in the tutorial was wrong, it didn't really represent the latest and greatest of the library. Also, it was written just like a list of examples, which is not much more than the API docs. In my new tutorial, I aimed to give a narrative style documentation, which starts from the very beginning of what symbolics are and works its way up to the basic functionality of things like solving and simplifying expressions. My goal was also to lead by example, and in particular, to avoid teaching things that I think either are antipatterns, or lead to antipatterns. In Python, there is one-- and preferably only one --way to do it. In SymPy, by the nature of the library, there are about seven different ways to create a Symbol, for example (see https://github.com/sympy/sympy/wiki/Idioms-and-Antipatterns, the section, "Creating Symbols"). But there is one &lt;em&gt;best&lt;/em&gt; way to do it: by using symbols(). So all throughout the tutorial, I just use symbols(), even if I am creating a single Symbol. I avoid messy things like var. &lt;/p&gt;&lt;p&gt;The final tutorial is at http://docs.sympy.org/tutorial/tutorial/. This was the basis for the tutorial that Ondrej and I gave at SciPy. The site for our tutorial is at http://certik.github.io/scipy-2013-tutorial/html/index.html. There are links to videos, slides, and exercise notebooks there. &lt;/p&gt;&lt;p&gt;I think our tutorial was a great success. People liked (I think) the introduction from nothing to SymPy. For our exercises, we used the &lt;a href="https://pypi.python.org/pypi/ipython_doctester"&gt;IPython Doctester&lt;/a&gt;. I think that people really liked this way of doing exercises, but there were some issues getting it to work on everyone's machine. &lt;/p&gt;&lt;p&gt;In addition to my stuff, Ondrej presented some notebooks of examples of work that he has used in his work at LANL. I think this worked well. There were several physicists in the audience, who understood most of the content, but even for those who weren't (including me!), it really showed that SymPy is a useful tool. In a beginner tutorial, it is easy to get lost in the easy details, and forget that in the end, you can actually use SymPy to compute some powerful things.  SymPy has in the past year or two really passed the barrier of toy to tool. &lt;/p&gt;&lt;p&gt;After our tutorial, I attended the IPython tutorial, and the two-part Scikit-Learn tutorial. The most awesome part of this was just getting to meet people. Fernando Perez, Thomas Kluyver, and Brian Granger of IPython were at the conference. Brain is also a SymPy developer, who has spearheaded the quantum module. From SymPy, in addition to Ondrej (who created SymPy), I met Matthew Rocklin, one of the top contributors, Jason Moore, one of the developers of PyDy, which uses SymPy's mechanics module, and David Li, who works on SymPy Gamma and SymPy Live (more on these people later). &lt;/p&gt;&lt;p&gt;After the tutorials, Wednesday and Thursday were the talks. There were a lot of good ones. Here are the ones that I remember the most&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Fernando's keynote. If you've ever seen one of Fernando's talks, you know that he is a great speaker. &lt;/li&gt;&lt;li&gt;Matthew's talk. His talk was about his work on using SymPy's matrix expressions to compile expressions for BLAS/LAPACK. This talk excited many people in the audience. I think this is great, because it shows people some of the real power of things you can only do with symbolics.&lt;/li&gt;&lt;li&gt;Jason Moore's talk about PyDy and the mechanics module. He ran out of time, but there is a nice example of using SymPy to generate a controller for an inverted triple pendulum, which seems impossible, but then he shows a video of an actual thing that can do it.&lt;/li&gt;&lt;li&gt;William Schroeder's keynote. The message was that the academic model is broken, and doesn't lead to reproducible research. While they are fixing things, the message is that we are the new publishers. There was also mention at the end that we should stop using noncommercial licenses, and stop using viral licenses like the GPL and LGPL. I was a little surprised to hear such a controversial statement, but it's actually very true, and I agree with him that if people don't stop using the GPL, then we will never achieve openness in science. &lt;/li&gt;&lt;li&gt;David Li's talk. David Li is a high school student (starting his senior year in the fall), who started with SymPy two years ago with Google Code-In. He has continued working on &lt;a href="http://live.sympy.org/"&gt;SymPy Live&lt;/a&gt;, and &lt;a href="http://gamma.sympy.org/"&gt;SymPy Gamma&lt;/a&gt; since. He is the reason that we have &lt;a href="http://asmeurersympy.wordpress.com/2012/08/21/sympy-live-sphinx-extension/"&gt;SymPy Live in our docs&lt;/a&gt;. His talk was also well received.  David is a good speaker, and SymPy Gamma and SymPy Live are pretty cool (for those of you who don't know, SymPy Live is an online shell where you can run a Python session with SymPy in the browser, and SymPy Gamma is the SymPy version of WolframAlpha).&lt;/li&gt;&lt;li&gt;Brian Granger's talk. His talk is entitled "&lt;strong&gt;&lt;a href="http://conference.scipy.org/scipy2013/presentation_detail.php?id=195"&gt;Why you should write buggy software with as few features as possible&lt;/a&gt;". &lt;/strong&gt;I think he had some good messages in there. You have to reduce the scope of your project, or it will get out of hand. As for bugs, getting bug reports is a good thing, because it shows that people are using the software, and what parts of it they are using. &lt;/li&gt;&lt;li&gt;The lightning talks. Especially Matthew Rocklin's lightning talk. His talk was about splitting things up into very small packages, so that you don't have to get a huge package just for one function. He went a little far with it, and I think his ideas aren't really usable in the current Python packaging ecosystem, but, taken in moderation, I agree with him. At any rate, it was very entertaining (I don't have any video links here because they aren't posted yet, but I encourage you to watch the lightning talks once they are posted). &lt;/li&gt;&lt;li&gt;I heard the matplotlib talk was good, but I haven't seen it because it was at the same time as Matthew's talk. I plan to watch it when the videos come out. If you saw it, I encourage you to watch Matthew's talk, especially if you've ever used BLAS/LAPACK.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Topping off the week were the sprints on Friday and Saturday. My goal was to get out a release of SymPy. We didn't quite get that far, but we got close. We are only blocking on a few small things to get out a release candidate, so expect one before the end of the week. We did introduce a lot of people to SymPy at the sprints, though, and got some first time contributions. Definitely I think we made a lot more people aware of SymPy at this conference than we ever have before. &lt;/p&gt;&lt;p&gt;Another interesting thing at the sprints: before the conference, I was telling David Li that we should switch to Dill for SymPy Live (the way SymPy Live works on the App Engine, it has to pickle the session between runs, because there is a 60 time limit on each execution). Dill is a library that extends Python's pickle so that it can pickle just about anything. At the end of David's talk, the guy who wrote Dill, Mike McKerns raised his hand and asked him about it! At the sprints, David and he worked together to get it working in SymPy Live (and coincidentally, he also uses SymPy in another package, mystic). There were some fixes needed for Dill. He also moved Dill out of a larger project (in the spirit of Matthew's lightning talk), and over to &lt;a href="https://github.com/uqfoundation/dill"&gt;GitHub&lt;/a&gt;. Now all they need is a logo (Paul Ivanov suggested a variation on "we can pickle that!"). &lt;/p&gt;&lt;p&gt;In all, it was a fun conference. The best part, as always, was meeting people in person, and talking to them. To conclude, I want to mention two other interesting things that happened.&lt;/p&gt;&lt;p&gt;The first is that Matthew and I talked seriously about how to go about fixing the assumptions in SymPy. I will write to the list about this soon, but the basic idea is to just get in there and hack things together, so that we can get something that works. The work there is started at https://github.com/sympy/sympy/pull/2210, where I am seeing if we can merge the old and new assumptions, so that something assumed in one can be asked in the old one.&lt;/p&gt;The second thing is that Ondrej got a new hat: &lt;a href="http://asmeurersympy.wordpress.com/2013/07/2013-06-26-08-02-40-hdr.jpg"&gt;&lt;img src="http://asmeurersympy.wordpress.com/2013/07/2013-06-26-08-02-40-hdr.jpg" alt="Ondrej's Hat" width="450" height="602" class="alignnone size-full wp-image-1344"&gt;&lt;/a&gt;&lt;/div&gt;</description><guid>http://asmeurersympy.wordpress.com/posts/2013/07/02/scipy-2013.html</guid><pubDate>Tue, 02 Jul 2013 01:42:08 GMT</pubDate></item><item><title>How to make attributes un-inheritable in Python using descriptors</title><link>http://asmeurersympy.wordpress.com/posts/2013/04/06/how-to-make-attributes-un-inheritable-in-python-using-descriptors.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;For https://github.com/sympy/sympy/pull/1969, and previous work at https://github.com/sympy/sympy/pull/1901, we added the ability for the SymPy doctester to run or not run doctests conditionally depending on whether or not required external dependencies are installed. This means that for example we can doctest all the plotting examples without them failing when matplotlib is not installed. &lt;/p&gt;
&lt;p&gt;For functions, this is as easy as decorating the function with &lt;code&gt;@doctest_depends&lt;/code&gt;, which adds the attribute &lt;code&gt;_doctest_depends_on&lt;/code&gt; to the function with a list of what dependencies the doctest depends on. The doctest will then not run the doctest unless those dependencies are installed.&lt;/p&gt;
&lt;p&gt;For classes, this is not so easy. Ideally, one could just define &lt;code&gt;_doctest_depends_on&lt;/code&gt; as an attribute of the class. However, the issue is that with classes, we have inheritance. But if class &lt;code&gt;A&lt;/code&gt; has a docstring with a doctest that depends on some modules, it doesn't mean that a subclass &lt;code&gt;B&lt;/code&gt; of &lt;code&gt;A&lt;/code&gt; will have a doctest that does.  &lt;/p&gt;
&lt;p&gt;Really, what we need to do is to decorate the docstring itself, not the class. Unfortunately, Python does not allow adding attributes to strings&lt;/p&gt;
&lt;p&gt;[code language="py"]&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; a = ""&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; a.x = 1&lt;/p&gt;
&lt;p&gt;Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
AttributeError: 'str' object has no attribute 'x'&lt;/p&gt;
&lt;p&gt;[/code]&lt;/p&gt;
&lt;p&gt;So what we have to do is to create a attribute that doesn't inherit.  &lt;/p&gt;
&lt;p&gt;I had for some time wanted to give &lt;a href="http://docs.python.org/2/howto/descriptor.html"&gt;descriptors&lt;/a&gt; in Python a try, since they are a cool feature, but also the second most complicated feature in Python (the first is metaclasses). If you don't know what a descriptor is, I recommend reading &lt;a href="http://python-history.blogspot.com/2010/06/inside-story-on-new-style-classes.html?m=1"&gt;this blog post&lt;/a&gt; by Guido van Rossum, the creator of Python. It's the best explanation of the feature there is.  &lt;/p&gt;
&lt;p&gt;Basically, Python lets attributes define what happens when they are accessed (like &lt;code&gt;a.x&lt;/code&gt;).  You may already know that objects can define how their attributes are accessed via &lt;code&gt;&lt;strong&gt;getattr&lt;/strong&gt;&lt;/code&gt;. This is different. With descriptors, the &lt;em&gt;attributes themselves&lt;/em&gt; define what happens.  This may sound less useful, but in fact, it's a very core feature of the language. &lt;/p&gt;
&lt;p&gt;If you've ever wondered how &lt;code&gt;property&lt;/code&gt;, &lt;code&gt;classmethod&lt;/code&gt;, or &lt;code&gt;staticmethod&lt;/code&gt; work in Python, the answer is descriptors. Basically, if you have something like&lt;/p&gt;
&lt;p&gt;[code language="py"]&lt;/p&gt;
&lt;p&gt;class A(object):
    def f(self):
        return 1
    f = property(f)
[/code]&lt;/p&gt;
&lt;p&gt;Then &lt;code&gt;A().f&lt;/code&gt; magically calls what would normally be &lt;code&gt;A().f()&lt;/code&gt;. The way it works is that &lt;code&gt;property&lt;/code&gt; defines the &lt;code&gt;&lt;strong&gt;get&lt;/strong&gt;&lt;/code&gt; method, which returns &lt;code&gt;f(obj)&lt;/code&gt;, where &lt;code&gt;obj&lt;/code&gt; is the calling object, here &lt;code&gt;A()&lt;/code&gt; (remember in Python that the first argument of a method, usually called &lt;code&gt;self&lt;/code&gt; is the object that calls the method).  &lt;/p&gt;
&lt;p&gt;Descriptors can allow method to define arbitrary behavior when called, set, or deleted.  To make an attribute inaccessible to subclasses, then, you just need to define a descriptor that prevents the attribute from being accessed if the class of the calling object is not the original class.  Here is some code:&lt;/p&gt;
&lt;p&gt;[code language="py"]&lt;/p&gt;
&lt;p&gt;class nosubclasses(object):
    def &lt;strong&gt;init&lt;/strong&gt;(self, f, cls):
        self.f = f
        self.cls = cls
    def &lt;strong&gt;get&lt;/strong&gt;(self, obj, type=None):
        if type == self.cls:
            if hasattr(self.f, '&lt;strong&gt;get&lt;/strong&gt;'):
                return self.f.&lt;strong&gt;get&lt;/strong&gt;(obj, type)
            return self.f
        raise AttributeError
[/code]&lt;/p&gt;
&lt;p&gt;it works like this&lt;/p&gt;
&lt;p&gt;[code language="py"]&lt;/p&gt;
&lt;p&gt;In [2]: class MyClass(object):
   ...:     x = 1
   ...:&lt;/p&gt;
&lt;p&gt;In [3]: MyClass.x = nosubclasses(MyClass.x, MyClass)&lt;/p&gt;
&lt;p&gt;In [4]: class MySubclass(MyClass):
   ...:     pass
   ...:&lt;/p&gt;
&lt;p&gt;In [5]: MyClass.x&lt;/p&gt;
&lt;p&gt;Out[5]: 1&lt;/p&gt;
&lt;p&gt;In [6]: MyClass().x&lt;/p&gt;
&lt;p&gt;Out[6]: 1&lt;/p&gt;
&lt;p&gt;In [80]: MySubclass.x&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;AttributeError                            Traceback (most recent call last)&lt;/p&gt;
&lt;p&gt;&amp;lt;ipython-input-80-2b2f456dd101&amp;gt; in &amp;lt;module&amp;gt;()&lt;/p&gt;
&lt;p&gt;----&amp;gt; 1 MySubclass.x&lt;/p&gt;
&lt;p&gt;&amp;lt;ipython-input-51-7fe1b5063367&amp;gt; in &lt;strong&gt;get&lt;/strong&gt;(self, obj, type)
      8                 return self.f.&lt;strong&gt;get&lt;/strong&gt;(obj, type)
      9             return self.f
---&amp;gt; 10         raise AttributeError&lt;/p&gt;
&lt;p&gt;AttributeError:&lt;/p&gt;
&lt;p&gt;In [81]: MySubclass().x&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;AttributeError                            Traceback (most recent call last)&lt;/p&gt;
&lt;p&gt;&amp;lt;ipython-input-81-93764eeb9948&amp;gt; in &amp;lt;module&amp;gt;()&lt;/p&gt;
&lt;p&gt;----&amp;gt; 1 MySubclass().x&lt;/p&gt;
&lt;p&gt;&amp;lt;ipython-input-51-7fe1b5063367&amp;gt; in &lt;strong&gt;get&lt;/strong&gt;(self, obj, type)
      8                 return self.f.&lt;strong&gt;get&lt;/strong&gt;(obj, type)
      9             return self.f
---&amp;gt; 10         raise AttributeError&lt;/p&gt;
&lt;p&gt;AttributeError:&lt;/p&gt;
&lt;p&gt;[/code]&lt;/p&gt;
&lt;p&gt;Note that by using the third argument to &lt;code&gt;&lt;strong&gt;get&lt;/strong&gt;&lt;/code&gt;, this works regardless if the attribute is accessed from the class or the object. I have to call &lt;code&gt;&lt;strong&gt;get&lt;/strong&gt;&lt;/code&gt; on &lt;code&gt;self.f&lt;/code&gt; again if it has it to ensure that the right thing happens if the attribute has other descriptor logic defined (and note that regular methods have descriptor logic defined---that's how they convert the first argument &lt;code&gt;self&lt;/code&gt; to implicitly be the calling object).&lt;/p&gt;
&lt;p&gt;One could easily make class decorator that automatically adds the attribute to the class in a non-inheritable way:&lt;/p&gt;
&lt;p&gt;[code language="py"]&lt;/p&gt;
&lt;p&gt;def nosubclass_x(args):
    def _wrapper(cls):
        cls.x = nosubclasses(args, cls)
        return cls
    return _wrapper
[/code]&lt;/p&gt;
&lt;p&gt;This automatically adds the property &lt;code&gt;x&lt;/code&gt; to the decorated class with the value given in the decorator, and it won't be accessible to subclasses:&lt;/p&gt;
&lt;p&gt;[code language="py"]&lt;/p&gt;
&lt;p&gt;In [87]: @nosubclass_x(1)
   ....: class MyClass(object):
   ....:     pass
   ....:&lt;/p&gt;
&lt;p&gt;In [88]: MyClass().x&lt;/p&gt;
&lt;p&gt;Out[88]: 1&lt;/p&gt;
&lt;p&gt;In [89]: MySubclass().x&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;AttributeError                            Traceback (most recent call last)&lt;/p&gt;
&lt;p&gt;&amp;lt;ipython-input-89-93764eeb9948&amp;gt; in &amp;lt;module&amp;gt;()&lt;/p&gt;
&lt;p&gt;----&amp;gt; 1 MySubclass().x&lt;/p&gt;
&lt;p&gt;&amp;lt;ipython-input-51-7fe1b5063367&amp;gt; in &lt;strong&gt;get&lt;/strong&gt;(self, obj, type)
      8                 return self.f.&lt;strong&gt;get&lt;/strong&gt;(obj, type)
      9             return self.f
---&amp;gt; 10         raise AttributeError&lt;/p&gt;
&lt;p&gt;AttributeError:&lt;/p&gt;
&lt;p&gt;[/code]&lt;/p&gt;
&lt;p&gt;For SymPy, we can't use class decorators because we still support Python 2.5, and they were introduced in Python 2.6. The best work around is to just call &lt;code&gt;Class.attribute = nosubclasses(Class.attribute, Class)&lt;/code&gt; after the class definition. Unfortunately, you can't access a class inside its definition like you can with functions, so this has to go at the end. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Name Mangling&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;After coming up with all this, I remembered that Python already has a pretty standard way to define attributes in such a way that subclasses won't have access to them. All you have to do is use two underscores before the name, like &lt;code&gt;&lt;strong&gt;x&lt;/strong&gt;&lt;/code&gt;, and it will be &lt;a href="http://docs.python.org/2/reference/expressions.html#atom-identifiers"&gt;name mangled&lt;/a&gt;. This means that the name will be renamed to &lt;code&gt;_classnamex&lt;/code&gt; outside the class definition. The name will not be inherited by subclasses.  There are some subtleties with this, particularly for strange class names (names that are too long, or names that begin with an underscore). I &lt;a href="http://stackoverflow.com/q/15845931/161801"&gt;asked about this on StackOverflow&lt;/a&gt;. The best answer is that there was a function in the standard library, but it was removed in Python 3. My tests reveal that the behavior is different in CPYthon than in PyPy, so getting it right for every possible class is nontrivial. The descriptor thing should work everywhere, though.  On the other hand, &lt;code&gt;getattr(obj, '_' + obj.&lt;strong&gt;class&lt;/strong&gt;.&lt;strong&gt;name&lt;/strong&gt; + attributename)&lt;/code&gt; will work 99% of the time, and is much easier both to write and to understand than the descriptor. &lt;/p&gt;&lt;/div&gt;</description><guid>http://asmeurersympy.wordpress.com/posts/2013/04/06/how-to-make-attributes-un-inheritable-in-python-using-descriptors.html</guid><pubDate>Sat, 06 Apr 2013 02:49:13 GMT</pubDate></item><item><title>When does x^log(y) = y^log(x)?</title><link>http://asmeurersympy.wordpress.com/posts/2013/03/03/when-does-xlogy-ylogx.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;em&gt;In this blog post, when I write $latex \log(x)$, I mean the natural logarithm, or log base $latex e$, i.e., $latex \ln(x)$.&lt;/em&gt;
&lt;p&gt;A discussion on a &lt;a href="https://github.com/sympy/sympy/pull/1845"&gt;pull request&lt;/a&gt; got me thinking about this question: what are the solutions to the complex equation $latex x^{\log{(y)}} = y^{\log(x)}$?  At the outset, they look like different expressions.  But clearly there some solutions. For example, if $latex x = y$, then obviously the two expressions will be the same.  We probably should exclude $latex x = y = 0$, though note that even if $latex 0^{\log(0)}$ is well-defined (probably if it is it is either 0 or complex $latex \infty$), it will be the same well-defined value. But for the remainder of this blog post, I'll assume that $latex x$ and $latex y$ are nonzero.&lt;/p&gt;
&lt;p&gt;Now, observe that if we apply $latex \log$ to both sides of the equation, we get $latex \log{\left(x^{\log(y)}\right )} = \log {\left (y^{\log(x)}\right )}$.  Now, supposing that we can apply the famous logarithm exponent rule, we would get $latex \log(x)\log(y) = \log(y)\log(x)$, which means that if additionally $latex \log$ is one-to-one, we would have that the original expressions must be equal.&lt;/p&gt;
&lt;p&gt;The second question, that of &lt;a href="http://en.wikipedia.org/wiki/Injective_function"&gt;injectivity&lt;/a&gt;, is easier to answer than the first, so I'll address it first.  Note that the complex exponential is not one-to-one, because for example $latex e^0 = e^{2\pi i} = 1$.  But we still define the complex logarithm as the "inverse" of the complex exponential.  What this really means is that the complex logarithm is strictly speaking not a function, because it is not well-defined. Recall that the definition of one-to-one means that $latex f(x) = f(y)$ implies $latex x = y$, and that the definition of well-defined is that $latex x = y$ implies $latex f(x) = f(y)$.  It is clear to see here that $latex f$ being one-to-one is the same as $latex f^{-1}$ being well-defined and visa-versa ($latex f^{-1}$ here is the same loose definition of an inverse as saying that the complex logarithm is the inverse of the complex exponential).&lt;/p&gt;
&lt;p&gt;So note that the complex logarithm is not well-defined exactly because the complex exponential is not one-to-one.  We of course fix this problem by making it well-defined, i.e., it normally is multivalued, but we pick a single value consistently (i.e., we pick a &lt;a href="http://en.wikipedia.org/wiki/Branch_point#Complex_logarithm"&gt;branch&lt;/a&gt;), so that it is well-defined.  For the remainder of this blog post, I will assume the standard choice of branch cut for the complex logarithm, i.e., the branch cut is along the negative axis, and we choose the branch where, for $latex x &amp;gt; 0$, $latex \log(x)$ is real and $latex \log(-x) = \log(x) + i\pi$.&lt;/p&gt;
&lt;p&gt;My point here is that we automatically know that the complex logarithm is one-to-one because we know that the complex exponential is well-defined.&lt;/p&gt;
&lt;p&gt;So our question boils down to, when does the identity $latex \log{\left (z^a\right)} = a \log(z)$ hold?  In SymPy, this identity is only applied by &lt;code&gt;expand_log()&lt;/code&gt; or &lt;code&gt;logcombine()&lt;/code&gt; when $latex a$ is real and $latex z$ is positive, so let us assume that we know that it holds under those conditions. Note that it also holds for some other values too.  For example, by our definition $latex \log{\left (e^{i\pi}\right)} = \log(-1) = \log(1) + i\pi = i\pi = i\pi\log(e)$.  For our example, this means that $latex x = e$, $latex y = -1$ is a non-trivial solution (non-trivial meaning $latex x \neq y$).   Actually, the way that the complex logarithm being the "inverse" of the complex exponential works is that $latex e^{\log(x)} = x$ for all $latex x$ (on the other hand $latex \log{\left(e^x\right)} \neq x$ in general), so that if $latex x = e$, then $latex x^{\log(y)} = e^{\log(y)} = y$ and $latex y^{\log(x)} = y^{\log(e)} = y^1 = y$.  In other words, $latex x = e$ is always a solution, for any $latex y\, (\neq 0)$ (and similarly $latex y = e$ for all $latex x$).  In terms of our question of when $latex \log{\left(z^a\right)} = a\log(z)$, this just says that this always true for $latex a = \log(e) = 1$, regardless of $latex z$, which is obvious.  We can also notice that this identity always holds for $latex a = 0$, regardless of $latex z$. In terms of our original equation, this means that $latex x = e^0 = 1$ is a solution for all $latex y$ (and as before, $latex y = 1$ for all $latex x$).&lt;/p&gt;
&lt;p&gt;Note that $latex z &amp;gt; 0$ and $latex a$ real corresponds to $latex x, y &amp;gt; 0$ and $latex \log(x), \log(y)$ real, respectively, (which are the same condition).  So we have so far that the following are solutions to $latex x^{\log(y)} = y^{\log(x)}$:&lt;/p&gt;
&lt;ul&gt;
    &lt;li&gt;&lt;span style="line-height:13px;"&gt;$latex x, y &amp;gt; 0$&lt;/span&gt;&lt;/li&gt;
    &lt;li&gt;$latex x = y$&lt;/li&gt;
    &lt;li&gt;$latex x = e$, $latex y$ arbitrary&lt;/li&gt;
    &lt;li&gt;$latex y = e$, $latex x$ arbitrary&lt;/li&gt;
    &lt;li&gt;$latex x = 1$, $latex y$ arbitrary&lt;/li&gt;
    &lt;li&gt;$latex y = 1$, $latex x$ arbitrary&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let's look at some cases where $latex \log{\left (z^a\right)} \neq a\log(z)$.  If $latex z &amp;lt; 0$ and $latex a$ is a nonzero even integer, then $latex z^a &amp;gt; 0$ so $latex \log{\left (z^a \right)}) = \log{\left (\left (-z\right )^a \right )} = a\log(-z)$, whereas $latex a\log(z) = a(\log(-z) + i\pi)$, which are different by our assumption that $latex a \neq 0$.  If $latex a$ is an odd integer not equal to 1, then $latex z^a &amp;lt; 0$, so $latex \log{\left (z^a \right)} = \log{\left (-z^a \right )} + i\pi$ = $latex \log{\left (\left(- z\right)^{a} \right )} + i\pi$ &lt;em&gt;Wordpress is refusing to render this. It should be&lt;/em&gt; log((-z)^a) + iπ = $latex a\log(-z) + i\pi$, whereas $latex a\log(z) = a(\log(-z) + i\pi)$ again, which is not the same because $latex a \neq 1$. This means that if we let $latex x &amp;lt; 0$ and $latex y = e^a$, where $latex a \neq 0, 1$, we get a non-solution (and the same if we swap $latex x$ and $latex y$).  &lt;/p&gt;
&lt;p&gt;This is as far as I got tonight. Wordpress is arbitrarily not rendering that LaTeX for no good reason.  That and the very ugly LaTeX images is pissing me off (why wordpress.com hasn't switched to MathJaX yet is beyond me).  The next time I get some free time, I am going to seriously consider switching my blog to something hosted on GitHub, probably using the IPython notebook.  I welcome any hints people can give me on that, especially concerning migrating pages from this blog.&lt;/p&gt;
&lt;p&gt;Here is some work on finding the rest of the solutions: the general definition of $latex \log(x)$ is $latex \log(|x|) + i\arg(x)$, where $latex \arg(x)$ is chosen in $latex (-\pi, \pi]$.  Therefore, if $latex \log{\left(z^a\right )} = a\log(z)$, we must have $latex \arg(z^a) = a\arg(z)$.  I believe a description of all such complex $latex z$ and $latex a$ will give all solutions $latex x = z$, $latex y = e^a$ (and $latex y = z$, $latex x = e^a$) to $latex x^{\log(y)} = y^{\log(x)}$.  I need to verify that, though, and I also need to think about how to describe such $latex z$ and $latex a$. I will (hopefully) continue this post later, either by editing this one or writing a new one (depending on how much more I come up with).  &lt;/p&gt;
&lt;p&gt;Any comments to this post are welcome.  I know you can't preview comments, but if you want to use math, just write it as &lt;code&gt;$latex math$&lt;/code&gt; (like &lt;code&gt;$latex \log(x)$&lt;/code&gt; for $latex \log(x)$). If you mess something up, I'll edit your comment and fix it.&lt;/p&gt;&lt;/div&gt;</description><category>mathjax</category><guid>http://asmeurersympy.wordpress.com/posts/2013/03/03/when-does-xlogy-ylogx.html</guid><pubDate>Sun, 03 Mar 2013 06:49:35 GMT</pubDate></item><item><title>Tip for debugging SymPy with PuDB</title><link>http://asmeurersympy.wordpress.com/posts/2013/01/28/tip-for-debugging-sympy-with-pudb.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Usually, when I debug SymPy code with &lt;a href="http://asmeurersympy.wordpress.com/2010/06/04/pudb-a-better-python-debugger/"&gt;PuDB&lt;/a&gt;, I create a script that calls the code, then I put a &lt;/p&gt;
&lt;p&gt;[code language="py"]&lt;/p&gt;
&lt;p&gt;import pudb; pudb.set_trace()&lt;/p&gt;
&lt;p&gt;[/code]&lt;/p&gt;
&lt;p&gt;in the SymPy library code where I want to start debugging. But this is annoying, first because I have to create the script, and second, because I have to modify the library code, and there's always the risk of accidentally commiting that.  Also, if I want to start debugging somewhere else, I have to edit the files and change it.&lt;/p&gt;
&lt;p&gt;Well, I just figured out a better way.  &lt;del datetime="2013-01-30T02:32:19+00:00"&gt;First, if you haven't already, add an alias like this in your bash config file (&lt;code&gt;~/.profile&lt;/code&gt; or &lt;code&gt;~/.bashrc&lt;/code&gt;):&lt;code&gt;alias pudb='python -m pudb.run&lt;/code&gt;.&lt;/del&gt; &lt;i&gt;As of &lt;a href="https://github.com/inducer/pudb/pull/54"&gt;this pull request&lt;/a&gt;, this is no longer necessary.  A &lt;code&gt;pudb&lt;/code&gt; script is installed automatically with PuDB.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;This will let you run &lt;code&gt;pudb script.py&lt;/code&gt; to debug &lt;code&gt;script.py&lt;/code&gt;.  &lt;del datetime="2013-02-05T04:22:39+00:00"&gt;Next, start PuDB. It doesn't matter with what. You can just run &lt;code&gt;touch test.py&lt;/code&gt;, and then &lt;code&gt;pudb test.py&lt;/code&gt;.&lt;/del&gt;  &lt;i&gt;It occured to me that you can just set the breakpoint when starting isympy with PuDB.&lt;/i&gt;&lt;/p&gt;
&lt;p&gt;Now, press &lt;code&gt;m&lt;/code&gt;, and navigate to where in the library code you want to start debugging.  It also helps to use &lt;code&gt;/&lt;/code&gt; to search the current file and &lt;code&gt;L&lt;/code&gt; to jump to a specific line.  When you get to the line where you want to start debugging, press &lt;code&gt;b&lt;/code&gt; to set a breakpoint. You can do this in multiple places if you want.&lt;/p&gt;
&lt;p&gt;Now, you just have to start &lt;code&gt;isympy&lt;/code&gt; from within PuDB.  Just run &lt;code&gt;pudb bin/isympy&lt;/code&gt;, and immediately press &lt;code&gt;c&lt;/code&gt; to jump to the interactive prompt.  Now, run whatever code you want to debug.  When it gets to the breakpoint, PuDB will open, and you can start debugging.  If you type &lt;code&gt;c&lt;/code&gt; to continue, it will go back to isympy. But the next time you run something that hits the breakpoint, it will open PuDB again. &lt;/p&gt;
&lt;p&gt;This trick works because breakpoints are saved to file (at &lt;code&gt;~/.config/pudb/saved-breakpoints&lt;/code&gt;). In fact, if you want, you can just modify that file in the first step.  You can edit your saved breakpoints in the bottom right pane of PuDB. &lt;/p&gt;
&lt;p&gt;When you are done and you type &lt;code&gt;Ctrl-D&lt;/code&gt; PuDB will pop-up again, asking if you want to quit.  That's because it was running the whole time, underneath isympy.  Just press &lt;code&gt;q&lt;/code&gt;.  Note that you should avoid pressing &lt;code&gt;q&lt;/code&gt; while debugging, or else PuDB will quit, and you will be left with just normal isympy (it won't break at your breakpoints any more).  Actually, if you do this, but doing &lt;code&gt;Ctrl-D&lt;/code&gt; still opens the PuDB prompt, you can just press "Restart", and it should start working again.  Note that "Restart" will not actually reset isympy:  all your saved variables will still be the same, and any changes to the library code will not be reloaded.  To do that, you have to completely exit and start over again.&lt;/p&gt;
&lt;p&gt;Of course, there is nothing SymPy specific about this trick. As long as you have a script that acts as an entry point to an interactive console for your application, you can use it.  If you just use IPython, you can use something like &lt;code&gt;pudb /bin/ipython&lt;/code&gt; (replace &lt;code&gt;/bin/ipython&lt;/code&gt; with the output of &lt;code&gt;which ipython&lt;/code&gt;).  &lt;/p&gt;&lt;/div&gt;</description><guid>http://asmeurersympy.wordpress.com/posts/2013/01/28/tip-for-debugging-sympy-with-pudb.html</guid><pubDate>Mon, 28 Jan 2013 00:43:49 GMT</pubDate></item><item><title>Emacs: One year later</title><link>http://asmeurersympy.wordpress.com/posts/2013/01/01/emacs-one-year-later.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;As readers of this blog may remember, back in 2011, I decided to move to a command-line based editor. For roughly two weeks in December, 2011, I exclusively used Vim, and for the same amount of time in January, 2012, I used exclusively Emacs. I had used a little of each editor in the past, but this was my first time using them to do true editing work. My experiences are chronicled in my blog posts (parts &lt;a href="http://asmeurersympy.wordpress.com/2011/12/20/vim-vs-emacs-part-1/" title="1"&gt;1&lt;/a&gt;, &lt;a href="http://asmeurersympy.wordpress.com/2012/01/03/vim-vs-emacs-part-2/" title="2"&gt;2&lt;/a&gt;, &lt;a href="http://asmeurersympy.wordpress.com/2012/01/13/vim-vs-emacs-part-3/" title="3"&gt;3&lt;/a&gt;, and &lt;a href="http://asmeurersympy.wordpress.com/2012/07/09/emacs-7-months-later/" title="7 months later follow up"&gt;7 months later follow up&lt;/a&gt;).  &lt;/p&gt;
&lt;p&gt;To summarize, I decided to use Emacs, as I found it to be much more intuitive, and much more user-friendly.  Today, January 1, marks the one-year point of my using Emacs as my sole text editor, with some exceptions (notably, I'm currently writing this blog post in the browser).  So I'd like to make some observations:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&amp;lt;li&amp;gt;&lt;/span&gt;Either one of these editors (Vim or Emacs) is going to really suck unless you are willing to make a serious investment in customizing them and installing nice addons. For the second point, Emacs has an advantage, because the philosophy of Vim is to be barebones whereas the philosophy of Emacs is to be featureful, so that in particular many things that were once addons of Emacs are now included in the standard installation.  For customization, on the one hand, Emacs is easier, because it has a nice interface (&lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;M-x customize&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;), but on the other hand, Vim's scripting language is much easier to hack on than Emacs lisp (I still can't code in Lisp to save my life; it's a very challenging programming language).&lt;span class="nt"&gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;But my point here is that neither has really great defaults. For example, in Emacs, &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;M-space&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; is bound to &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;just-one-space&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;, which is great for programming.  What it does is remove all spaces around the cursor, except for one.  But to be really useful, it also should include newlines.  It doesn't do this by default.  Rather, you have to call it with a negative argument.  So to be really useful, you have to add
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;[sourcecode]&lt;/p&gt;
&lt;p&gt;(defun just-one-space-with-newline ()
  "Call just-one-space with a negative argument"
  (interactive)
  (just-one-space -1))&lt;/p&gt;
&lt;p&gt;(global-set-key (kbd "M-SPC") 'just-one-space-with-newline)&lt;/p&gt;
&lt;p&gt;~~~~~~~~~~~~&lt;/p&gt;
&lt;p&gt;to your &lt;code&gt;.emacs&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Emacs has great features, but I always have to look them up.  Or rather, I have to look up the keyboard shortcuts for them.  I only have the keyboard shortcuts memorized for the things I do every day.  I even ended up forgetting really important ones, like &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;M-w&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; (Emacs version of copy).  And if a feature involves several keystrokes to access, forget about it (for example, rectangular selection, or any features of special modes).  If I use a new mode, e.g., for some file type that I rarely edit (like HTML), I might as well not have any of the features, other than the syntax highlighting, because I either don't know what they are, or even if I know that they should exist (like automatic tag completion for html), I have no idea how to access them. &lt;span class="nt"&gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There's really something to be said about GUI editors, which give these things to users in a way that they don't have to memorize anything.  Perhaps I should try to use the menu more.  Or maybe authors of addons should aim to make features require as little cognitive user interaction as possible (such as the excellent &lt;a href="http://cx4a.org/software/auto-complete/manual.html"&gt;&lt;code&gt;auto-complete-mode&lt;/code&gt;&lt;/a&gt; I mentioned in &lt;a href="http://asmeurersympy.wordpress.com/2012/01/13/vim-vs-emacs-part-3/"&gt;part 3&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt; I mention this because it is one of the things I complained about with Vim, that the keybindings were too hard to memorize.  Of course, the difference with Vim is that one has to memorize keybindings to do even the most basic of editing tasks, whereas with Emacs one can always fall back to more natural things like &lt;code&gt;Shift-Arrow Key&lt;/code&gt; to select text or &lt;code&gt;Delete&lt;/code&gt; to delete the character under the cursor (and yes, I know you can rebind this stuff in Vim; I refer you to the previous bullet point). &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;I mentioned at the end of part 3 that Vim might still be useful to learn, as vi is available literally anywhere that you have POSIX.  I honestly don't think I would be able to use vi or vim if I had to, customization or no, unless I had my keyboard cheat sheet and a decent amount of time.  If I'm stuck on a barebones system and I can't do anything about it, I'll use nano/pico before I use vi.  It's not that I hate vi. I just can't do anything with it. It is the same to me now as it was before I used it in-depth.  I have forgotten all the keyboard shortcuts, except for &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;ESC&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; and &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;i&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;.&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;I don't use &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;emacsclient&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; any more.  Ever since I got my new retina MacBook Pro, I don't need it any more, because with the solid state drive starting Emacs from scratch is instantaneous.  I'm glad to get rid of it, because it had some seriously annoying glitches.&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Add &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;alias e=emacs&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; to your Bash config file (&lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;.profile&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; or &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;.bashrc&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;). It makes life much easier. "emacs" is not an easy word to type, at least on QWERTY keyboards.&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;I still feel like I am not nearly as efficient in Emacs as I could be. On the one hand, I know there are built-in features (like rectangular selection) that I do not take advantage of enough.  I have been a bit lazy with customization: there are a handful of things that I do often that require several keystrokes, but I still haven't created custom keyboard shortcuts for (off the top of my head: copying and pasting to/from the Mac OS X clipboard and rigidly indenting/dedenting a block of text (&lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;C-u 4 C-x TAB&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;, actually &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;C-c u 4 C-x TAB&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;, since I did the sensible thing and rebound &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;C-u&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; to clear to the previous newline, and bound &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;universal-argument&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; to &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;C-c u&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;) come to mind). &lt;span class="nt"&gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;I feel as if I were to watch someone who has used Emacs for a long time that I would learn a lot of tricks.&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;I really should learn Emacs lisp. There are a lot of little customizations that I would like to make, but they are really niche, and can only be done programmatically.  But who has the time to learn a completely new programming language (plus a whole library, as just knowing Lisp is useless if you don't know the proper Emacs funtions and variables and coding styles)?&lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;



&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;I've still not found a good visual browser for jumping to function definitions in a file (mostly Python function definitions, but also other kinds of headers for other kinds of files).  The best I've found is &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;imenu&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;. If you know of anything, please let me know.  One thing I really liked about Vim was the &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"http://www.vim.org/scripts/script.php?script_id=273"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;tag list&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; extension, which did this perfectly (thanks to commenter &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"http://asmeurersympy.wordpress.com/2011/12/20/vim-vs-emacs-part-1/#comment-424"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Scott&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; for pointing it out to me).  I've been told that Cedet has something like this, but every time I try to install it, I run into some issues that just seem like way too much work (I don't remember what they are, it won't compile or something, or maybe it just wants to do just way too much and I can't figure out how to disable everything except for the parts I want).  &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;If you ever code in C, add the following to your Makefile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;[code]&lt;/p&gt;
&lt;p&gt;check-syntax:
    $(CC) -o nul $(FLAGS) -S $(CHK_SOURCES)
[/code]&lt;/p&gt;
&lt;p&gt;(and if you don't use a Makefile, start using one now).  This is assuming you have &lt;code&gt;CC&lt;/code&gt; and &lt;code&gt;FLAGS&lt;/code&gt; defined at the top (generally to something like &lt;code&gt;cc&lt;/code&gt; and &lt;code&gt;-Wall&lt;/code&gt;, respectively). Also, add the following to your &lt;code&gt;.emacs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;[code]&lt;/p&gt;
&lt;p&gt;;; ===== Turn on flymake-mode ====&lt;/p&gt;
&lt;p&gt;(add-hook 'c-mode-common-hook 'turn-on-flymake)&lt;/p&gt;
&lt;p&gt;(defun turn-on-flymake ()
  "Force flymake-mode on. For use in hooks."
  (interactive)
  (flymake-mode 1))&lt;/p&gt;
&lt;p&gt;(add-hook 'c-mode-common-hook 'flymake-keyboard-shortcuts)&lt;/p&gt;
&lt;p&gt;(defun flymake-keyboard-shortcuts ()
  "Add keyboard shortcuts for flymake goto next/prev error."
  (interactive)
  (local-set-key "\M-n" 'flymake-goto-next-error)
  (local-set-key "\M-p" 'flymake-goto-prev-error))
[/code]&lt;/p&gt;
&lt;p&gt;The last part adds the useful keyboard shortcuts &lt;code&gt;M-n&lt;/code&gt; and &lt;code&gt;M-p&lt;/code&gt; to move between errors.  Now, errors in your C code will show up automatically as you type.  If you use the command line version of emacs like I do, and not the GUI version, you'll also need to install the &lt;a href="http://www.emacswiki.org/emacs/flymake-cursor.el"&gt;flymake-cursor&lt;/a&gt; module, which makes the errors show up in the mode line, since otherwise it tries to use mouse popups.  You can change the colors using &lt;code&gt;M-x customize-face&lt;/code&gt; (search for "flymake"). &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;I never got flymake to work with LaTeX.  Does anyone know how to do it? It seems it is hardcoded to use MikTeX, the Windows version of LaTeX. I found some stuff, but none of it worked.  &lt;span class="nt"&gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Actually, what I really would like is not syntax checking (I rarely make syntax mistakes in LaTeX any more), but rather something that automatically builds the PDF constantly as I type.  That way, I can just look over at the PDF as I am writing (I use an external monitor for this. I highly recommend it if you use LaTeX, especially one of those monitors that swivels to portrait mode).  &lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;If you use Mac OS X, you can use the very excellent &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"http://pqrs.org/macosx/keyremap4macbook/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;KeyRemap4MacBook&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; program to make regular Mac OS X programs act more like Emacs.  Mac OS X already has many Emacs shortcuts built in (like &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;C-a&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;, &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;C-e&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;, etc.), but that only works in Cocoa apps, and it doesn't include any meta key shortcuts.  This lets you use additional shortcuts literally everywhere (don't worry, it automatically doesn't use them in the Terminal), including an emulator for &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;C-space&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; and some &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;C-x&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; commands (like &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;C-x C-s&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; to &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;Command-s&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;).  It doesn't work on context sensitive shortcuts, unfortunately, unless the operating system already supports it with another keyboard shortcut (e.g., it can map &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;M-f&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; to &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;Option-right arrow&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;).  For example, it can't enable moving between paragraphs with &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;C-S-{&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt; and &lt;span class="nt"&gt;&amp;lt;code&amp;gt;&lt;/span&gt;C-S-}&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&lt;/span&gt;.  If anyone knows how to do that, let me know. &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;For about a month this summer, I had to use a Linux laptop, because my Mac broke and my new Mac took a month to arrive (the downside to ordering a new computer immediately after it is announced by Apple).  At this point, my saving of all my customizations to &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"http://pqrs.org/macosx/keyremap4macbook/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;GitHub&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; really helped a lot.  I created a new branch for the Linux computer (because several things in my customizations were Mac specific), and just symlinked the files I wanted.  A hint I can give to people using Linux is to use Konsole.  The Gnome terminal sucks.  One thing I never figured out is how to make Konsole (or any other Terminal for that matter) to send Control-Shift shortcuts to Emacs (see http://superuser.com/q/439961/39697).   I don't use Linux any more at the moment, but if anyone knows what was going on there, add an answer to that question. &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;In &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"http://asmeurersympy.wordpress.com/2012/01/13/vim-vs-emacs-part-3/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;part 3&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; mentioned that &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"http://www.dr-qubit.org/predictive/predictive-user-manual/html/index.php"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;predictive mode&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; was cool, but not very useful.  What it does is basically add tab completion for every word in the English language.  Actually, I've found using auto-complete-mode even when editing text (or LaTeX) to be very useful.  Unlike predictive mode, it only guesses words that you've already typed  (it turns out that you tend to type the same words over and over, and doubly so if those words are LaTeX math commands).  Also, predictive mode has a set order of words, which supposedly helps to use it with muscle memory, whereas auto-complete-mode tries to learn what words you are more likely to use based on some basic statistical machine-learning.  Also, auto-complete-mode has a much better visual UI and smarter defaults than predictive mode. The result is that it's actually quite useful and makes typing plain text, as well as LaTeX (actually, pretty much anything, as long as you tend to use the same words repeatedly) much faster.  I recommend enabling auto-complete-mode almost everywhere using hooks, like
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;[code]&lt;/p&gt;
&lt;p&gt;(add-hook 'latex-mode-hook 'auto-complete-mode)&lt;/p&gt;
&lt;p&gt;(add-hook 'LaTeX-mode-hook 'auto-complete-mode)&lt;/p&gt;
&lt;p&gt;(add-hook 'prog-mode-hook 'auto-complete-mode)&lt;/p&gt;
&lt;p&gt;;; etc.&lt;/p&gt;
&lt;p&gt;[/code]&lt;/p&gt;


&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;At the end of the day, I'm pretty happy with Emacs.  I've managed to fix most of the things that make it annoying, and it is orders of magnitude more powerful than any GUI editor or IDE I've ever seen, especially at just basic text editing, which is the most important thing (I can always use another program for other things, like debugging or whatever).  The editor uses the basic shortcuts that I am used to, and is quite efficient to write in.  Extensions like auto-complete-mode make using it much faster, though I could use some more extensions to make it even better (namely, a better isearch and a better imenu). Regarding Vim vs. Emacs, I'd like to quote something I said back in my &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"http://asmeurersympy.wordpress.com/2011/12/20/vim-vs-emacs-part-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;first blog post&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; about Vim over a year ago:
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;Vim is great for text &lt;em&gt;editing&lt;/em&gt;, but not so hot for text &lt;em&gt;writing&lt;/em&gt; (unless you always write text perfectly, so that you never need to leave insert mode until you are done typing). Just the simple act of deleting a mistyped word (yes, word, that happens a lot when you are decently fast touch typist) takes several keystrokes, when it should in my opinion only take one (two if you count the meta-key).&lt;/blockquote&gt;

&lt;p&gt;Needless to say, I find Emacs to be great for both text editing and text writing. &lt;/p&gt;&lt;/div&gt;</description><guid>http://asmeurersympy.wordpress.com/posts/2013/01/01/emacs-one-year-later.html</guid><pubDate>Tue, 01 Jan 2013 09:51:21 GMT</pubDate></item><item><title>2012 in review</title><link>http://asmeurersympy.wordpress.com/posts/2012/12/30/2012-in-review.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;The WordPress.com stats helper monkeys prepared a 2012 annual report for this blog.&lt;/p&gt;
    &lt;a href="http://asmeurersympy.wordpress.com/2012/annual-report/"&gt;&lt;img src="http://www.wordpress.com/wp-content/mu-plugins/annual-reports/img/2012-emailteaser.png" width="100%" alt=""&gt;&lt;/a&gt;
    &lt;p&gt;Here's an excerpt:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;blockquote&amp;gt;&lt;/span&gt;4,329 films were submitted to the 2012 Cannes Film Festival. This blog had &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;20,000&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt; views in 2012. If each view were a film, this blog would power 5 Film Festivals&lt;span class="nt"&gt;&amp;lt;/blockquote&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"http://asmeurersympy.wordpress.com/2012/annual-report/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Click here to see the complete report.&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</description><guid>http://asmeurersympy.wordpress.com/posts/2012/12/30/2012-in-review.html</guid><pubDate>Sun, 30 Dec 2012 23:07:19 GMT</pubDate></item><item><title>Infinitely nested lists in Python</title><link>http://asmeurersympy.wordpress.com/posts/2012/09/19/infinitely-nested-lists-in-python.html</link><description>&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;Readers of this blog know that I sometimes like to write about some &lt;a href="http://asmeurersympy.wordpress.com/2009/07/20/modifying-a-list-while-looping-through-it-in-python/"&gt;strange&lt;/a&gt;, &lt;a href="http://asmeurersympy.wordpress.com/2010/06/16/strange-python-behavior-can-someone-please-explain-to-me-what-is-going-on-here/"&gt;unexpected&lt;/a&gt;, and &lt;a href="http://asmeurersympy.wordpress.com/2011/03/15/true-is-true-is-false-is-true-is-false/"&gt;unusual&lt;/a&gt; things in Python that I stumble across.  This post is another one of those.&lt;/p&gt;
&lt;p&gt;First, look at this&lt;/p&gt;
&lt;p&gt;[code language="py"]&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; a = []&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; a.append(a)&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; a&lt;/p&gt;
&lt;p&gt;[[...]]&lt;/p&gt;
&lt;p&gt;[/code]&lt;/p&gt;
&lt;p&gt;What am I doing here?  I'm creating a list, &lt;code&gt;a&lt;/code&gt;, and I'm adding it to itself.  What you end up with is an infinitely nested list.  The first interesting thing about this is that Python is smart enough to not explode when printing this list.  The following should convince you that &lt;code&gt;a&lt;/code&gt; does indeed contain itself.&lt;/p&gt;
&lt;p&gt;[code language="py"]&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; a[0] is a&lt;/p&gt;
&lt;p&gt;True&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; a[0] == a&lt;/p&gt;
&lt;p&gt;True&lt;/p&gt;
&lt;p&gt;[/code]&lt;/p&gt;
&lt;p&gt;Now, if you have programmed in C, or a similar language that uses pointers, this should not come as a surprise to you.  Lists in Python, like most things, do not actually contain the items inside them.  Rather, they contain references (in C terminology, "pointers") to the items inside them.  From this perspective, there is no issue at all with &lt;code&gt;a&lt;/code&gt; containing a pointer to itself.&lt;/p&gt;
&lt;p&gt;The first thing I wondered when I saw this was just how clever the printer was at noticing that the list was infinitely nested.  What if we make the cycle a little more complex?&lt;/p&gt;
&lt;p&gt;[code language="py"]&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; a = []&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; b = []&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; a.append(b)&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; b.append(a)&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; a&lt;/p&gt;
&lt;p&gt;[[[...]]]&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; b&lt;/p&gt;
&lt;p&gt;[[[...]]]&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; a[0] is b&lt;/p&gt;
&lt;p&gt;True&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; b[0] is a&lt;/p&gt;
&lt;p&gt;True&lt;/p&gt;
&lt;p&gt;[/code]&lt;/p&gt;
&lt;p&gt;So it still works.  I had thought that maybe repr just catches &lt;code&gt;RuntimeError&lt;/code&gt; and falls back to printing &lt;code&gt;...&lt;/code&gt; when the list is nested too deeply, but it turns out that is not true:&lt;/p&gt;
&lt;p&gt;[code language="py"]&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; a = []&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; for i in range(10000):&lt;/p&gt;
&lt;p&gt;...     a = [a]&lt;/p&gt;
&lt;p&gt;... &lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; a&lt;/p&gt;
&lt;p&gt;Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
RuntimeError: maximum recursion depth exceeded while getting the repr of a list&lt;/p&gt;
&lt;p&gt;[/code]&lt;/p&gt;
&lt;p&gt;And by the way, in case you were wondering, it is possible to catch a &lt;code&gt;RuntimeError&lt;/code&gt; (using the same &lt;code&gt;a&lt;/code&gt; as the previous code block)&lt;/p&gt;
&lt;p&gt;[code language="py"]&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; try:&lt;/p&gt;
&lt;p&gt;...     print(a)&lt;/p&gt;
&lt;p&gt;... except RuntimeError:&lt;/p&gt;
&lt;p&gt;...     print("no way")&lt;/p&gt;
&lt;p&gt;... &lt;/p&gt;
&lt;p&gt;no way&lt;/p&gt;
&lt;p&gt;[/code]&lt;/p&gt;
&lt;p&gt;(and you also may notice that this is Python 3. Things behave the same way in Python 2)&lt;/p&gt;
&lt;p&gt;Back to infinitely nested lists, we saw that printing works, but there are some things that don't work.&lt;/p&gt;
&lt;p&gt;[code language="py"]&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; a[0] == b&lt;/p&gt;
&lt;p&gt;True&lt;/p&gt;
&lt;p&gt;&amp;gt;&amp;gt;&amp;gt; a[0] == a&lt;/p&gt;
&lt;p&gt;Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
RuntimeError: maximum recursion depth exceeded in comparison&lt;/p&gt;
&lt;p&gt;[/code]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a[0] is b&lt;/code&gt; holds (i.e., they are exactly the same object in memory), so &lt;code&gt;==&lt;/code&gt; is able to short-circuit on them.  But to test &lt;code&gt;a[0] == a&lt;/code&gt; it has to recursively compare the elements of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;a[0]&lt;/code&gt;.  Since it is infinitely nested, this leads to a recursion error.  Now an interesting question: why does this happen?  Is it because &lt;code&gt;==&lt;/code&gt; on lists uses a depth first search?  If it were somehow possible to compare these two objects, would they be equal?&lt;/p&gt;
&lt;p&gt;One is reminded of &lt;a href="http://en.wikipedia.org/wiki/Russel%27s_paradox"&gt;Russel's paradox&lt;/a&gt;, and the reason why in &lt;a href="http://en.wikipedia.org/wiki/Zermelo%E2%80%93Fraenkel_set_theory"&gt;axiomatic set theory&lt;/a&gt;, sets are not allowed to contain themselves. &lt;/p&gt;
&lt;p&gt;Thinking of this brought me to my final question.  Is it possible to make a Python &lt;code&gt;set&lt;/code&gt; that contains itself?  The answer is obviously no, because &lt;code&gt;set&lt;/code&gt; objects can only contain hashable objects, and &lt;code&gt;set&lt;/code&gt; is not hashable.  But &lt;code&gt;frozenset&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;'s counterpart, is hashable.  So can you create a &lt;code&gt;frozenset&lt;/code&gt; that contains itself?  The same for &lt;code&gt;tuple&lt;/code&gt;.  The method I used for &lt;code&gt;a&lt;/code&gt; above won't work, because &lt;code&gt;a&lt;/code&gt; must be mutable to append it to itself.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</description><guid>http://asmeurersympy.wordpress.com/posts/2012/09/19/infinitely-nested-lists-in-python.html</guid><pubDate>Wed, 19 Sep 2012 04:21:08 GMT</pubDate></item></channel></rss>